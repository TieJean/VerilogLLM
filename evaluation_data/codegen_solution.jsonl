{"task_id": "mux2to1v", "completion": "Task: Write Verilog program for the given description.\nDescription: Create a 2-1 multiplexer. When sel=0, choose a. When sel=1, choose b..\nGenerated Code: module top_module (\n\tinput [99:0] a,\n\tinput [99:0] b,\n\tinput sel,\n\toutput [99:0] out\n);\n\n\nalways @(a or b or sel) begin\nif (sel == 0) begin\nout = a;\nend else if (sel == 1) begin\nout = b;\nend else begin\nout = a + b;\nend\nend\nendmodule"}
{"task_id": "m2014_q6b", "completion": "Task: Write Verilog program for the given description.\nDescription: Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001, ..., 101 for states A, B, ..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2]..\nGenerated Code: module top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n\n\nalways @(posedge w)\nbegin\nif(w)\nbegin\nY2 <= y[3:1];\nend\nelse\nbegin\nY2 <= y[2];\nend\nend\nendmodule"}
{"task_id": "ringer", "completion": "Task: Write Verilog program for the given description.\nDescription: Suppose you are designing a circuit to control a cellphone's ringer and vibration motor. Whenever the phone needs to ring from an incoming call (input ring), your circuit must either turn on the ringer (output ringer = 1) or the motor (output motor = 1), but not both. If the phone is in vibrate mode (input vibrate_mode = 1), turn on the motor. Otherwise, turn on the ringer..\nGenerated Code: module top_module(\n\tinput ring, \n\tinput vibrate_mode,\n\toutput ringer,\n\toutput motor\n);\n\n\n//////////////////////////////////////////////////////////////////////////////\n// Declarations\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Local Declarations\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Constants\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Functions\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Outputs\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Internal Declarations\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Parameters\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Constructors\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Public Methods\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Public Functions\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Protected member functions\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Private member functions\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Inner and anonymous class declarations\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Return type definitions\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Static declarations\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// File scope declarations\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Macros\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Constructors\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Destructors\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Public methods\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Protected methods\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Private methods\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Public interfaces\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Return type definitions\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Return type definitions\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// End of generated code\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Generated code\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Generated code\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// End of generated code\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Auxiliary functions\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Inner and anonymous class declarations\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Protected member functions\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Private methods\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Public methods\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Return type definitions\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Return type definitions\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Static declarations\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Static declarations\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Internal declaration\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Internal declaration\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Public methods\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Public methods\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Protected declaration\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Protected declaration\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Internal declaration\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Internal declaration\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Internal declaration\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Undeclarations\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Undeclarations\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Static declarations\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Static declarations\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Return type definitions\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Return type definitions\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Generated code\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Generated code\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Generated code\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Undeclarations\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Undeclarations\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Internal declaration\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Internal declaration\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Output type definitions\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Output type definitions\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Generated code\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Generated code\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// External declaration\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Extern declaration\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Extern declaration\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Member function declarations\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Member function declarations\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Static declaration\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Static declaration\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Return type declaration\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Return type declaration\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Internal declaration\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Internal declaration\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// End of generated code\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Generated code\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Generated code\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Protected declaration\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Protected declaration\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Private declaration\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Internation declaration\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Internation declaration\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Static declaration\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Static declaration\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// End of generated code\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Generated code\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Generated code\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Internal declaration\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// Internal declaration\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n// End of generated code\n//////////////////////////////////////////////////////////////////////////////\n\n} // end of file main\n"}
{"task_id": "alwaysblock1", "completion": "Task: Write Verilog program for the given description.\nDescription: Build an AND gate using both an assign statement and a combinational always block. .\nGenerated Code: module top_module(\n\tinput a, \n\tinput b,\n\toutput out_assign,\n\toutput reg out_alwaysblock\n);\n\n\n`include \"\"top_module.vh\"\"\n\ninitial begin\nout_assign = 1'b0;\nout_alwaysblock = 1'b1;\nend\nendmodule // top_module"}
{"task_id": "zero", "completion": "Task: Write Verilog program for the given description.\nDescription: Build a circuit that always outputs a LOW..\nGenerated Code: module top_module(\n\toutput zero);\n\n\nparameter LOW = 1'b0;\nparameter HIGH = 1'b1;\n\nbegin\n// Declare inputs\ninput  [31:0] data;\n\n// Declare outputs\noutput [31:0] result;\n\n// Define verilog input ports\nwire [31:0] data_wire;\nwire [31:0] result_wire;\n\nassign data_wire = data;\nassign result_wire = result;\nend\n\nalways @(data_wire)\nbegin\nif (data_wire == LOW) begin\nresult_wire <= LOW;\nend\nelse if (data_wire == HIGH) begin\nresult_wire <= HIGH;\nend\nend\n\nendmodule"}
{"task_id": "circuit7", "completion": "Task: Write Verilog program for the given description.\nDescription: This is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               q               \n// 0ns             0               x               x               \n// 5ns             1               0               x               \n// 10ns            0               0               x               \n// 15ns            1               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               1               \n// 30ns            0               0               1               \n// 35ns            1               1               1               \n// 40ns            0               1               1               \n// 45ns            1               1               0               \n// 50ns            0               1               0               \n// 55ns            1               1               0               \n// 60ns            0               1               0               \n// 65ns            1               1               0               \n// 70ns            0               1               0               \n// 75ns            1               1               0               \n// 80ns            0               1               0               \n// 85ns            1               1               0               \n// 90ns            0               1               0         .\nGenerated Code: module top_module (\n\tinput clk,\n\tinput a, \n\toutput reg q\n);\n\n\n\nfunction [31:0] count;\ninput [31:0] x;\nbegin\ncount = 1;\nfor (i=0; i<32; i=i+1)\nif (x[i])\ncount[i] = count[i] + 1;\nelse\ncount[i] = 0;\nend\nendfunction\n\nfunction [31:0] count2;\ninput [31:0] x;\nbegin\ncount2 = 1;\nfor (i=0; i<32; i=i+1)\nif (x[i])\ncount2[i] = count2[i] + 1;\nelse\ncount2[i] = 0;\nend\nendfunction\n\nfunction [31:0] count3;\ninput [31:0] x;\nbegin\ncount3 = 1;\nfor (i=0; i<32; i=i+1)\nif (x[i])\ncount3[i] = count3[i] + 1;\nelse\ncount3[i] = 0;\nend\nendfunction\n\nfunction [31:0] count4;\ninput [31:0] x;\nbegin\ncount4 = 1;\nfor (i=0; i<32; i=i+1)\nif (x[i])\ncount4[i] = count4[i] + 1;\nelse\ncount4[i] = 0;\nend\nendfunction\n\nfunction [31:0] count5;\ninput [31:0] x;\nbegin\ncount5 = 1;\nfor (i=0; i<32; i=i+1)\nif (x[i])\ncount5[i] = count5[i] + 1;\nelse\ncount5[i] = 0;\nend\nendfunction\n\nfunction [31:0] count6;\ninput [31:0] x;\nbegin\ncount6 = 1;\nfor (i=0; i<32; i=i+1)\nif (x[i])\ncount6[i] = count6[i] + 1;\nelse\ncount6[i] = 0;\nend\nendfunction\n\nfunction [31:0] count7;\ninput [31:0] x;\nbegin\ncount7 = 1;\nfor (i=0; i<32; i=i+1)\nif (x[i])\ncount7[i] = count7[i] + 1;\nelse\ncount7[i] = 0;\nend\nendfunction\n\nfunction [31:0] count8;\ninput [31:0] x;\nbegin\ncount8 = 1;\nfor (i=0; i<32; i=i+1)\nif (x[i])\ncount8[i] = count8[i] + 1;\nelse\ncount8[i] = 0;\nend\nendfunction\n\nfunction [31:0] count9;\ninput [31:0] x;\nbegin\ncount9 = 1;\nfor (i=0; i<32; i=i+1)\nif (x[i])\ncount9[i] = count9[i] + 1;\nelse\ncount9[i] = 0;\nend\nendfunction\n\nfunction [31:0] count10;\ninput [31:0] x;\nbegin\ncount10 = 1;\nfor (i=0; i<32; i=i+1)\nif (x[i])\ncount10[i] = count10[i] + 1;\nelse\ncount10[i] = 0;\nend\nendfunction\n\nfunction [31:0] count11;\ninput [31:0] x;\nbegin\ncount11 = 1;\nfor (i=0; i<32; i=i+1)\nif (x[i])\ncount11[i] = count11[i] + 1;\nelse\ncount11[i] = 0;\nend\nendfunction\n\nfunction [31:0] count12;\ninput [31:0] x;\nbegin\ncount12 = 1;\nfor (i=0; i<32; i=i+1)\nif (x[i])\ncount12[i] = count12[i] + 1;\nelse\ncount12[i] = 0;\nend\nendfunction\n\nfunction [31:0] count13;\ninput [31:0] x;\nbegin\ncount13 = 1;\nfor (i=0; i<32; i=i+1)\nif (x[i])\ncount13[i] = count13[i] + 1;\nelse\ncount13[i] = 0;\nend\nendfunction\n\nfunction [31:0] count14;\ninput [31:0] x;\nbegin\ncount14 = 1;\nfor (i=0; i<32; i=i+1)\nif (x[i])\ncount14[i] = count14[i] + 1;\nelse\ncount14[i] = 0;\nend\nendfunction\n\nfunction [31:0] count15;\ninput [31:0] x;\nbegin\ncount15 = 1;\nfor (i=0; i<32; i=i+1)\nif (x[i])\ncount15[i] = count15[i] + 1;\nelse\ncount15[i] = 0;\nend\nendfunction\n\nfunction [31:0] count16;\ninput [31:0] x;\nbegin\ncount16 = 1;\nfor (i=0; i<32; i=i+1)\nif (x[i])\ncount16[i] = count16[i] + 1;\nelse\ncount16[i] = 0;\nend\nendfunction\n\nfunction [31:0] count17;\ninput [31:0] x;\nbegin\ncount17 = 1;\nfor (i=0; i<32; i=i+1)\nif (x[i])\ncount17[i] = count17[i] + 1;\nelse\ncount17[i] = 0;\nend\nendfunction\n\nfunction [31:0] count18;\ninput [31:0] x;\nbegin\ncount18 = 1;\nfor (i=0; i<32; i=i+1)\nif (x[i])\ncount18[i] = count18[i] + 1;\nelse\ncount18[i] = 0;\nend\nendfunction\n\nfunction [31:0] count19;\ninput [31:0] x;\nbegin\ncount19 = 1;\nfor (i=0; i<32; i=i+1)\nif (x[i])\ncount19[i] = count19[i] + 1;\nelse\ncount19[i] = 0;\nend\nendfunction\n\nfunction [31:0] count20;\ninput [31:0] x;\nbegin\ncount20 = 1;\nfor (i=0; i<32; i=i+1)\nif (x[i])\ncount20[i] = count20[i] + 1;\nelse\ncount20[i] = 0;\nend\nendfunction\n\nfunction [31:0] count21;\ninput [31:0] x;\nbegin\ncount21 = 1;\nfor (i=0; i<32; i=i+1)\nif (x[i])\ncount21[i] = count21[i] + 1;\nelse\ncount21[i] = 0;\nend\nendfunction\n\nfunction [31:0] count22;\ninput [31:0] x;\n"}
{"task_id": "ece241_2014_q5a", "completion": "Task: Write Verilog program for the given description.\nDescription: You are to design a one-input one-output serial 2's complementer Moore state machine. The input (x) is a series of bits (one per clock cycle) beginning with the least-significant bit of the number, and the output (Z) is the 2's complement of the input. The machine will accept input numbers of arbitrary length. The circuit requires a positive edge triggered asynchronous reset. The conversion begins when Reset is released and stops when Reset is asserted..\nGenerated Code: module top_module (\n\tinput clk,\n\tinput areset,\n\tinput x,\n\toutput z\n);\n\n\nparameter CLK = 1'b0;\nparameter RESET = 1'b1;\nparameter ASSERT = 1'b1;\nparameter READ = 1'b0;\nparameter WRITE = 1'b1;\nparameter MODE = 1'b0;\nparameter INPUT = 1'b0;\nparameter OUTPUT = 1'b0;\nparameter DUTY_CYCLE = 1'b0;\nparameter DUTY_DOWN = 1'b0;\nparameter DUTY_HIGH = 1'b0;\nparameter DUTY_LOW = 1'b0;\nparameter DUTY_UP = 1'b0;\nparameter DUTY_WARM = 1'b0;\nparameter DUTY_SHUTTER = 1'b0;\nparameter DUTY_SLEEP = 1'b0;\nparameter DUTY_SOFT = 1'b0;\nparameter DUTY_STANDBY = 1'b0;\nparameter DUTY_TOGGLE = 1'b0;\nparameter DUTY_TRANSMITTER = 1'b0;\nparameter DUTY_RECEIVE = 1'b0;\nparameter DUTY_RX = 1'b0;\nparameter DUTY_TX = 1'b0;\nparameter DUTY_CLK = 1'b0;\nparameter DUTY_RESET = 1'b0;\nparameter DUTY_ASSERT = 1'b0;\nparameter DUTY_READ = 1'b0;\nparameter DUTY_WRITE = 1'b0;\nparameter DUTY_MODE = 1'b0;\nparameter DUTY_INPUT = 1'b0;\nparameter DUTY_OUTPUT = 1'b0;\nparameter DUTY_DUTY_CYCLE = 1'b0;\nparameter DUTY_DUTY_DOWN = 1'b0;\nparameter DUTY_DUTY_HIGH = 1'b0;\nparameter DUTY_DUTY_LOW = 1'b0;\nparameter DUTY_DUTY_UP = 1'b0;\nparameter DUTY_DUTY_WARM = 1'b0;\nparameter DUTY_DUTY_SHUTTER = 1'b0;\nparameter DUTY_DUTY_SLEEP = 1'b0;\nparameter DUTY_DUTY_SOFT = 1'b0;\nparameter DUTY_DUTY_STANDBY = 1'b0;\nparameter DUTY_DUTY_TOGGLE = 1'b0;\nparameter DUTY_DUTY_TRANSMITTER = 1'b0;\nparameter DUTY_DUTY_RECEIVE = 1'b0;\nparameter DUTY_DUTY_RX = 1'b0;\nparameter DUTY_DUTY_TX = 1'b0;\nparameter DUTY_DUTY_CLK = 1'b0;\nparameter DUTY_DUTY_RESET = 1'b0;\nparameter DUTY_DUTY_ASSERT = 1'b0;\nparameter DUTY_DUTY_READ = 1'b0;\nparameter DUTY_DUTY_WRITE = 1'b0;\nparameter DUTY_DUTY_MODE = 1'b0;\nparameter DUTY_DUTY_INPUT = 1'b0;\nparameter DUTY_DUTY_OUTPUT = 1'b0;\nparameter DUTY_DUTY_DUTY_CYCLE = 1'b0;\nparameter DUTY_DUTY_DUTY_DOWN = 1'b0;\nparameter DUTY_DUTY_DUTY_HIGH = 1'b0;\nparameter DUTY_DUTY_DUTY_LOW = 1'b0;\nparameter DUTY_DUTY_DUTY_UP = 1'b0;\nparameter DUTY_DUTY_DUTY_WARM = 1'b0;\nparameter DUTY_DUTY_DUTY_SHUTTER = 1'b0;\nparameter DUTY_DUTY_DUTY_SLEEP = 1'b0;\nparameter DUTY_DUTY_DUTY_SOFT = 1'b0;\nparameter DUTY_DUTY_DUTY_STANDBY = 1'b0;\nparameter DUTY_DUTY_DUTY_TOGGLE = 1'b0;\nparameter DUTY_DUTY_DUTY_TRANSMITTER = 1'b0;\nparameter DUTY_DUTY_DUTY_RECEIVE = 1'b0;\nparameter DUTY_DUTY_DUTY_RX = 1'b0;\nparameter DUTY_DUTY_DUTY_TX = 1'b0;\nparameter DUTY_DUTY_DUTY_CLK = 1'b0;\nparameter DUTY_DUTY_DUTY_RESET = 1'b0;\nparameter DUTY_DUTY_DUTY_ASSERT = 1'b0;\nparameter DUTY_DUTY_DUTY_READ = 1'b0;\nparameter DUTY_DUTY_DUTY_WRITE = 1'b0;\nparameter DUTY_DUTY_DUTY_MODE = 1'b0;\nparameter DUTY_DUTY_DUTY_INPUT = 1'b0;\nparameter DUTY_DUTY_DUTY_OUTPUT = 1'b0;\nparameter DUTY_DUTY_DUTY_DUTY_CYCLE = 1'b0;\nparameter DUTY_DUTY_DUTY_DUTY_DOWN = 1'b0;\nparameter DUTY_DUTY_DUTY_DUTY_HIGH = 1'b0;\nparameter DUTY_DUTY_DUTY_DUTY_LOW = 1'b0;\nparameter DUTY_DUTY_DUTY_DUTY_UP = 1'b0;\nparameter DUTY_DUTY_DUTY_WARM = 1'b0;\nparameter DUTY_DUTY_DUTY_SHUTTER = 1'b0;\nparameter DUTY_DUTY_DUTY_SLEEP = 1'b0;\nparameter DUTY_DUTY_DUTY_SOFT = 1'b0;\nparameter DUTY_DUTY_DUTY_STANDBY = 1'b0;\nparameter DUTY_DUTY_DUTY_TOGGLE = 1'b0;\nparameter DUTY_DUTY_DUTY_TRANSMITTER = 1'b0;\nparameter DUTY_DUTY_DUTY_RECEIVE = 1'b0;\nparameter DUTY_DUTY_DUTY_RX = 1'b0;\nparameter DUTY_DUTY_DUTY_TX = 1'b0;\nparameter DUTY_DUTY_DUTY_CLK = 1'b0;\nparameter DUTY_DUTY_DUTY_RESET = 1'b0;\nparameter DUTY_DUTY_DUTY_ASSERT = 1'b0;\nparameter DUTY_DUTY_DUTY_READ = 1'b0;\nparameter DUTY_DUTY_DUTY_WRITE = 1'b0;\nparam"}
{"task_id": "fsm3", "completion": "Task: Write Verilog program for the given description.\nDescription: The following is the state transition table for a Moore state machine with one input, one output, and four states. Implement this state machine. Include a positive edge triggered asynchronous reset that resets the FSM to state A.\n \n// state | next state in=0, next state in=1 | output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1.\nGenerated Code: module top_module (\n\tinput clk,\n\tinput in,\n\tinput areset,\n\toutput out\n);\n\n\nwire w1;\nwire w2;\nwire w3;\nwire w4;\nwire w5;\nwire w6;\nwire w7;\nwire w8;\nwire w9;\nwire w10;\nwire w11;\nwire w12;\nwire w13;\nwire w14;\nwire w15;\nwire w16;\nwire w17;\nwire w18;\nwire w19;\nwire w20;\nwire w21;\nwire w22;\nwire w23;\nwire w24;\nwire w25;\nwire w26;\nwire w27;\nwire w28;\nwire w29;\nwire w30;\nwire w31;\nwire w32;\nwire w33;\nwire w34;\nwire w35;\nwire w36;\nwire w37;\nwire w38;\nwire w39;\nwire w40;\nwire w41;\nwire w42;\nwire w43;\nwire w44;\nwire w45;\nwire w46;\nwire w47;\nwire w48;\nwire w49;\nwire w50;\nwire w51;\nwire w52;\nwire w53;\nwire w54;\nwire w55;\nwire w56;\nwire w57;\nwire w58;\nwire w59;\nwire w60;\nwire w61;\nwire w62;\nwire w63;\nwire w64;\nwire w65;\nwire w66;\nwire w67;\nwire w68;\nwire w69;\nwire w70;\nwire w71;\nwire w72;\nwire w73;\nwire w74;\nwire w75;\nwire w76;\nwire w77;\nwire w78;\nwire w79;\nwire w80;\nwire w81;\nwire w82;\nwire w83;\nwire w84;\nwire w85;\nwire w86;\nwire w87;\nwire w88;\nwire w89;\nwire w90;\nwire w91;\nwire w92;\nwire w93;\nwire w94;\nwire w95;\nwire w96;\nwire w97;\nwire w98;\nwire w99;\nwire w100;\nwire w101;\nwire w102;\nwire w103;\nwire w104;\nwire w105;\nwire w106;\nwire w107;\nwire w108;\nwire w109;\nwire w110;\nwire w111;\nwire w112;\nwire w113;\nwire w114;\nwire w115;\nwire w116;\nwire w117;\nwire w118;\nwire w119;\nwire w120;\nwire w121;\nwire w122;\nwire w123;\nwire w124;\nwire w125;\nwire w126;\nwire w127;\nwire w128;\nwire w129;\nwire w130;\nwire w131;\nwire w132;\nwire w133;\nwire w134;\nwire w135;\nwire w136;\nwire w137;\nwire w138;\nwire w139;\nwire w140;\nwire w141;\nwire w142;\nwire w143;\nwire w144;\nwire w145;\nwire w146;\nwire w147;\nwire w148;\nwire w149;\nwire w150;\nwire w151;\nwire w152;\nwire w153;\nwire w154;\nwire w155;\nwire w156;\nwire w157;\nwire w158;\nwire w159;\nwire w160;\nwire w161;\nwire w162;\nwire w163;\nwire w164;\nwire w165;\nwire w166;\nwire w167;\nwire w168;\nwire w169;\nwire w170;\nwire w171;\nwire w172;\nwire w173;\nwire w174;\nwire w175;\nwire w176;\nwire w177;\nwire w178;\nwire w179;\nwire w180;\nwire w181;\nwire w182;\nwire w183;\nwire w184;\nwire w185;\nwire w186;\nwire w187;\nwire w188;\nwire w189;\nwire w190;\nwire w191;\nwire w192;\nwire w193;\nwire w194;\nwire w195;\nwire w196;\nwire w197;\nwire w198;\nwire w199;\nwire w200;\nwire w201;\nwire w202;\nwire w203;\nwire w204;\nwire w205;\nwire w206;\nwire w207;\nwire w208;\nwire w209;\nwire w210;\nwire w211;\nwire w212;\nwire w213;\nwire w214;\nwire w215;\nwire w216;\nwire w217;\nwire w218;\nwire w219;\nwire w220;\nwire w221;\nwire w222;\nwire w223;\nwire w224;\nwire w225;\nwire w226;\nwire w227;\nwire w228;\nwire w229;\nwire w230;\nwire w231;\nwire w232;\nwire w233;\nwire w234;\nwire w235;\nwire w236;\nwire w237;\nwire w238;\nwire w239;\nwire w240;\nwire w241;\nwire w242;\nwire w243;\nwire w244;\nwire w245;\nwire w246;\nwire w247;\nwire w248;\nwire w249;\nwire w250;\nwire w251;\nwire w252;\nwire w253;\nwire w254;\nwire w255;\nwire w256;\nwire w257;\nwire w258;\nwire w259;\nwire w260;\nwire w261;\nwire w262;\nwire w263;\nwire w264;\nwire w265;\nwire w266;\nwire w267;\nwire w268;\nwire w269;\nwire w270;\nwire w271;\nwire w272;\nwire w273;\nwire w274;\nwire w275;\nwire w276;\nwire w277;\nwire w278;\nwire w279;\nwire w280;\nwire w281;\nwire w282;\nwire w283;\nwire w284;\nwire w285;\nwire w286;\nwire w287;\nwire w288;\nwire w289;\nwire w290;\nwire w291;\nwire w292;\nwire w293;\nwire w294;\nwire w295;\nwire w296;\nwire w297;\nwire w298;\nwire w299;\nwire w300;\nwire w301;\nwire w302;\nwire w303;\nwire w304;\nwire w305;\nwire w306;\nwire w307;\nwire w308;\nwire w309;\nwire w310;\nwire w311;\nwire w312;\nwire w313;\nwire w314;\nwire w315;\nwire w316;\nwire w317;\nwire w318;\nwire w319;\nwire w320;\nwire w321;\nwire w322;\nwire w323;\nwire w324;\nwire w325;\nwire w326;\nwire w327;\nwire w328;\nwire w329;\nwire w330;\nwire w331;\nwire w332;\nwire w333;\nwire w334;\nwire w335;\nwire w336;\nwire w337;\nwire w338;\nwire w339;\nwire w340;\nwire w341;\nwire w342;\nwire w343;\nwire w344;\nwire w345;\nwire w346;\nwire w347;\nwire w348;\nwire w349;\nwire w350;\nwire w351;\nwire w352;\nwire w353;\nwire w354;\nwire w355;\nwire w356;\nwire w357;\nwire w358;\nwire w359;\nwire w360;\nwire w361;\nwire w362;\nwire w363;\nwire w364;\nwire w365;\nwire w366;\nwire w367;\nwire w368;\nwire w369;\nwire w370;\nwire w371;\nwire w372;\nwire w373;\nwire w374;\nwire w375;\nwire w376;\nwire w377;\nwire w378;\nwire w379;\nwire w"}
{"task_id": "vector2", "completion": "Task: Write Verilog program for the given description.\nDescription: Build a circuit that reverses the byte order of a 32-bit vector..\nGenerated Code: module top_module (\n\tinput [31:0] in,\n\toutput [31:0] out\n);\n\n\nwire [31:0] w1;\nwire [31:0] w2;\nwire [31:0] w3;\nwire [31:0] w4;\nwire [31:0] w5;\nwire [31:0] w6;\nwire [31:0] w7;\nwire [31:0] w8;\nwire [31:0] w9;\nwire [31:0] w10;\nwire [31:0] w11;\nwire [31:0] w12;\nwire [31:0] w13;\nwire [31:0] w14;\nwire [31:0] w15;\nwire [31:0] w16;\nwire [31:0] w17;\nwire [31:0] w18;\nwire [31:0] w19;\nwire [31:0] w20;\nwire [31:0] w21;\nwire [31:0] w22;\nwire [31:0] w23;\nwire [31:0] w24;\nwire [31:0] w25;\nwire [31:0] w26;\nwire [31:0] w27;\nwire [31:0] w28;\nwire [31:0] w29;\nwire [31:0] w30;\nwire [31:0] w31;\nwire [31:0] w32;\nwire [31:0] w33;\nwire [31:0] w34;\nwire [31:0] w35;\nwire [31:0] w36;\nwire [31:0] w37;\nwire [31:0] w38;\nwire [31:0] w39;\nwire [31:0] w40;\nwire [31:0] w41;\nwire [31:0] w42;\nwire [31:0] w43;\nwire [31:0] w44;\nwire [31:0] w45;\nwire [31:0] w46;\nwire [31:0] w47;\nwire [31:0] w48;\nwire [31:0] w49;\nwire [31:0] w50;\nwire [31:0] w51;\nwire [31:0] w52;\nwire [31:0] w53;\nwire [31:0] w54;\nwire [31:0] w55;\nwire [31:0] w56;\nwire [31:0] w57;\nwire [31:0] w58;\nwire [31:0] w59;\nwire [31:0] w60;\nwire [31:0] w61;\nwire [31:0] w62;\nwire [31:0] w63;\nwire [31:0] w64;\nwire [31:0] w65;\nwire [31:0] w66;\nwire [31:0] w67;\nwire [31:0] w68;\nwire [31:0] w69;\nwire [31:0] w70;\nwire [31:0] w71;\nwire [31:0] w72;\nwire [31:0] w73;\nwire [31:0] w74;\nwire [31:0] w75;\nwire [31:0] w76;\nwire [31:0] w77;\nwire [31:0] w78;\nwire [31:0] w79;\nwire [31:0] w80;\nwire [31:0] w81;\nwire [31:0] w82;\nwire [31:0] w83;\nwire [31:0] w84;\nwire [31:0] w85;\nwire [31:0] w86;\nwire [31:0] w87;\nwire [31:0] w88;\nwire [31:0] w89;\nwire [31:0] w90;\nwire [31:0] w91;\nwire [31:0] w92;\nwire [31:0] w93;\nwire [31:0] w94;\nwire [31:0] w95;\nwire [31:0] w96;\nwire [31:0] w97;\nwire [31:0] w98;\nwire [31:0] w99;\nwire [31:0] w100;\nwire [31:0] w101;\nwire [31:0] w102;\nwire [31:0] w103;\nwire [31:0] w104;\nwire [31:0] w105;\nwire [31:0] w106;\nwire [31:0] w107;\nwire [31:0] w108;\nwire [31:0] w109;\nwire [31:0] w110;\nwire [31:0] w111;\nwire [31:0] w112;\nwire [31:0] w113;\nwire [31:0] w114;\nwire [31:0] w115;\nwire [31:0] w116;\nwire [31:0] w117;\nwire [31:0] w118;\nwire [31:0] w119;\nwire [31:0] w120;\nwire [31:0] w121;\nwire [31:0] w122;\nwire [31:0] w123;\nwire [31:0] w124;\nwire [31:0] w125;\nwire [31:0] w126;\nwire [31:0] w127;\nwire [31:0] w128;\nwire [31:0] w129;\nwire [31:0] w130;\nwire [31:0] w131;\nwire [31:0] w132;\nwire [31:0] w133;\nwire [31:0] w134;\nwire [31:0] w135;\nwire [31:0] w136;\nwire [31:0] w137;\nwire [31:0] w138;\nwire [31:0] w139;\nwire [31:0] w140;\nwire [31:0] w141;\nwire [31:0] w142;\nwire [31:0] w143;\nwire [31:0] w144;\nwire [31:0] w145;\nwire [31:0] w146;\nwire [31:0] w147;\nwire [31:0] w148;\nwire [31:0] w149;\nwire [31:0] w150;\nwire [31:0] w151;\nwire [31:0] w152;\nwire [31:0] w153;\nwire [31:0] w154;\nwire [31:0] w155;\nwire [31:0] w156;\nwire [31:0] w157;\nwire [31:0] w158;\nwire [31:0] w159;\nwire [31:0] w160;\nwire [31:0] w161;\nwire [31:0] w162;\nwire [31:0] w163;\nwire [31:0] w164;\nwire [31:0] w165;\nwire [31:0] w166;\nwire [31:0] w167;\nwire [31:0] w168;\nwire [31:0] w169;\nwire [31:0] w170;\nwire [31:0] w171;\nwire [31:0] w172;\nwire [31:0] w173;\nwire [31:0] w174;\nwire [31:0] w175;\nwire [31:0] w176;\nwire [31:0] w177;\nwire [31:0] w178;\nwire [31:0] w179;\nwire [31:0] w180;\nwire [31:0] w181;\nwire [31:0] w182;\nwire [31:0] w183;\nwire [31:0] w184;\nwire [31:0] w185;\nwire [31:0] w186;\nwire [31:0] w187;\nwire [31:0] w188;\nwire [31:0] w189;\nwire [31:0] w190;\nwire [31:0] w191;\nwire [31:0] w192;\nwire [31:0] w193;\nwire [31:0] w194;\nwire [31:0] w195;\nwire [31:0] w196;\nwire [31:0] w197;\nwire [31:0] w198;\nwire [31:"}
{"task_id": "m2014_q4c", "completion": "Task: Write Verilog program for the given description.\nDescription: Implement a simple D flip flop with active high synchronous reset (reset output to 0)..\nGenerated Code: module top_module (\n\tinput clk,\n\tinput d,\n\tinput r,\n\toutput logic q\n);\n\n\nlogic [1:0] dflip;\nlogic [1:0] dflip2;\nlogic [1:0] dflip3;\nlogic [1:0] dflip4;\nlogic [1:0] dflip5;\nlogic [1:0] dflip6;\nlogic [1:0] dflip7;\nlogic [1:0] dflip8;\nlogic [1:0] dflip9;\nlogic [1:0] dflip10;\nlogic [1:0] dflip11;\nlogic [1:0] dflip12;\nlogic [1:0] dflip13;\nlogic [1:0] dflip14;\nlogic [1:0] dflip15;\nlogic [1:0] dflip16;\nlogic [1:0] dflip17;\nlogic [1:0] dflip18;\nlogic [1:0] dflip19;\nlogic [1:0] dflip20;\nlogic [1:0] dflip21;\nlogic [1:0] dflip22;\nlogic [1:0] dflip23;\nlogic [1:0] dflip24;\nlogic [1:0] dflip25;\nlogic [1:0] dflip26;\nlogic [1:0] dflip27;\nlogic [1:0] dflip28;\nlogic [1:0] dflip29;\nlogic [1:0] dflip30;\nlogic [1:0] dflip31;\nlogic [1:0] dflip32;\nlogic [1:0] dflip33;\nlogic [1:0] dflip34;\nlogic [1:0] dflip35;\nlogic [1:0] dflip36;\nlogic [1:0] dflip37;\nlogic [1:0] dflip38;\nlogic [1:0] dflip39;\nlogic [1:0] dflip40;\nlogic [1:0] dflip41;\nlogic [1:0] dflip42;\nlogic [1:0] dflip43;\nlogic [1:0] dflip44;\nlogic [1:0] dflip45;\nlogic [1:0] dflip46;\nlogic [1:0] dflip47;\nlogic [1:0] dflip48;\nlogic [1:0] dflip49;\nlogic [1:0] dflip50;\nlogic [1:0] dflip51;\nlogic [1:0] dflip52;\nlogic [1:0] dflip53;\nlogic [1:0] dflip54;\nlogic [1:0] dflip55;\nlogic [1:0] dflip56;\nlogic [1:0] dflip57;\nlogic [1:0] dflip58;\nlogic [1:0] dflip59;\nlogic [1:0] dflip60;\nlogic [1:0] dflip61;\nlogic [1:0] dflip62;\nlogic [1:0] dflip63;\nlogic [1:0] dflip64;\nlogic [1:0] dflip65;\nlogic [1:0] dflip66;\nlogic [1:0] dflip67;\nlogic [1:0] dflip68;\nlogic [1:0] dflip69;\nlogic [1:0] dflip70;\nlogic [1:0] dflip71;\nlogic [1:0] dflip72;\nlogic [1:0] dflip73;\nlogic [1:0] dflip74;\nlogic [1:0] dflip75;\nlogic [1:0] dflip76;\nlogic [1:0] dflip77;\nlogic [1:0] dflip78;\nlogic [1:0] dflip79;\nlogic [1:0] dflip80;\nlogic [1:0] dflip81;\nlogic [1:0] dflip82;\nlogic [1:0] dflip83;\nlogic [1:0] dflip84;\nlogic [1:0] dflip85;\nlogic [1:0] dflip86;\nlogic [1:0] dflip87;\nlogic [1:0] dflip88;\nlogic [1:0] dflip89;\nlogic [1:0] dflip90;\nlogic [1:0] dflip91;\nlogic [1:0] dflip92;\nlogic [1:0] dflip93;\nlogic [1:0] dflip94;\nlogic [1:0] dflip95;\nlogic [1:0] dflip96;\nlogic [1:0] dflip97;\nlogic [1:0] dflip98;\nlogic [1:0] dflip99;\nlogic [1:0] dflip100;\nlogic [1:0] dflip101;\nlogic [1:0] dflip102;\nlogic [1:0] dflip103;\nlogic [1:0] dflip104;\nlogic [1:0] dflip105;\nlogic [1:0] dflip106;\nlogic [1:0] dflip107;\nlogic [1:0] dflip108;\nlogic [1:0] dflip109;\nlogic [1:0] dflip110;\nlogic [1:0] dflip111;\nlogic [1:0] dflip112;\nlogic [1:0] dflip113;\nlogic [1:0] dflip114;\nlogic [1:0] dflip115;\nlogic [1:0] dflip116;\nlogic [1:0] dflip117;\nlogic [1:0] dflip118;\nlogic [1:0] dflip119;\nlogic [1:0] dflip120;\nlogic [1:0] dflip121;\nlogic [1:0] dflip122;\nlogic [1:0] dflip123;\nlogic [1:0] dflip124;\nlogic [1:0] dflip125;\nlogic [1:0] dflip126;\nlogic [1:0] dflip127;\nlogic [1:0] dflip128;\nlogic [1:0] dflip129;\nlogic [1:0] dflip130;\nlogic [1:0] dflip131;\nlogic [1:0] dflip132;\nlogic [1:0] dflip133;\nlogic [1:0] dflip134;\nlogic [1:0] dflip135;\nlogic [1:0] dflip136;\nlogic [1:0] dflip137;\nlogic [1:0] dflip138;\nlogic [1:0] dflip139;\nlogic [1:0] dflip140;\nlogic [1:0] dflip141;\nlogic [1:0] dflip142;\nlogic [1:0] dflip143;\nlogic [1:0] dflip144;\nlogic [1:0] dflip145;\nlogic [1:0] dflip146;\nlogic [1:0] dflip147;\nlogic [1:0] dflip148;\nlogic [1:0] dflip149;\nlogic [1:0] dflip150;\nlogic [1:0] dflip151;\nlogic [1:0] dflip152;\nlogic ["}
{"task_id": "mt2015_q4a", "completion": "Task: Write Verilog program for the given description.\nDescription: Implement the boolean function z = (x^y) & x..\nGenerated Code: module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n\n\nassign z = x ^ y;\nendmodule"}
{"task_id": "shift18", "completion": "Task: Write Verilog program for the given description.\nDescription: Build a 64-bit arithmetic shift register, with synchronous load. The shifter can shift both left and right, and by 1 or 8 bit positions, selected by \"amount.\" Assume the right shit is an arithmetic right shift. \n\n// Signals are defined as below:\n// (1) load: Loads shift register with data[63:0] instead of shifting. Active high.\n// (2) ena: Chooses whether to shift. Active high. \n// (3) amount: Chooses which direction and how much to shift. \n//     (a) 2'b00: shift left by 1 bit. \n//     (b) 2'b01: shift left by 8 bits. \n//     (c) 2'b10: shift right by 1 bit. \n//     (d) 2'b11: shift right by 8 bits. \n// (4) q: The contents of the shifter..\nGenerated Code: module top_module(\n\tinput clk,\n\tinput load,\n\tinput ena,\n\tinput [1:0] amount,\n\tinput [63:0] data,\n\toutput reg [63:0] q);\n\n\nalways @(posedge clk)\nif(load)\nq <= data;\nelse if(ena)\nq <= 0;\nelse if(amount == 2'b00)\nq <= data;\nelse if(amount == 2'b01)\nq <= data + 1;\nelse if(amount == 2'b10)\nq <= data + 2;\nelse if(amount == 2'b11)\nq <= data + 3;\nendmodule"}
{"task_id": "ece241_2013_q8", "completion": "Task: Write Verilog program for the given description.\nDescription: Implement a Mealy-type finite state machine that recognizes the sequence \"101\" on an input signal named x. Your FSM should have an output signal, z, that is asserted to logic-1 when the \"101\" sequence is detected. Your FSM should also have a negative edge triggered asynchronous reset. You may only have 3 states in your state machine. Your FSM should recognize overlapping sequences..\nGenerated Code: module top_module (\n\tinput clk,\n\tinput aresetn,\n\tinput x,\n\toutput reg z\n);\n\n\nmealy_fsm fsm(\n.clk(clk),\n.aresetn(aresetn),\n.x(x),\n.z(z)\n);\nendmodule"}
{"task_id": "m2014_q6", "completion": "Task: Write Verilog program for the given description.\nDescription: Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Implement this state machine in Verilog..\nGenerated Code: module top_module (\n\tinput clk,\n\tinput reset,\n\tinput w,\n\toutput z\n);\n\n\nassign z = 1'b0;\nassign z = 1'b1;\nassign z = 1'b2;\nassign z = 1'b3;\nassign z = 1'b4;\nassign z = 1'b5;\nassign z = 1'b6;\nassign z = 1'b7;\nassign z = 1'b8;\nassign z = 1'b9;\nassign z = 1'b10;\nassign z = 1'b11;\nassign z = 1'b12;\nassign z = 1'b13;\nassign z = 1'b14;\nassign z = 1'b15;\nassign z = 1'b16;\nassign z = 1'b17;\nassign z = 1'b18;\nassign z = 1'b19;\nassign z = 1'b20;\nassign z = 1'b21;\nassign z = 1'b22;\nassign z = 1'b23;\nassign z = 1'b24;\nassign z = 1'b25;\nassign z = 1'b26;\nassign z = 1'b27;\nassign z = 1'b28;\nassign z = 1'b29;\nassign z = 1'b30;\nassign z = 1'b31;\nassign z = 1'b32;\nassign z = 1'b33;\nassign z = 1'b34;\nassign z = 1'b35;\nassign z = 1'b36;\nassign z = 1'b37;\nassign z = 1'b38;\nassign z = 1'b39;\nassign z = 1'b40;\nassign z = 1'b41;\nassign z = 1'b42;\nassign z = 1'b43;\nassign z = 1'b44;\nassign z = 1'b45;\nassign z = 1'b46;\nassign z = 1'b47;\nassign z = 1'b48;\nassign z = 1'b49;\nassign z = 1'b50;\nassign z = 1'b51;\nassign z = 1'b52;\nassign z = 1'b53;\nassign z = 1'b54;\nassign z = 1'b55;\nassign z = 1'b56;\nassign z = 1'b57;\nassign z = 1'b58;\nassign z = 1'b59;\nassign z = 1'b60;\nassign z = 1'b61;\nassign z = 1'b62;\nassign z = 1'b63;\nassign z = 1'b64;\nassign z = 1'b65;\nassign z = 1'b66;\nassign z = 1'b67;\nassign z = 1'b68;\nassign z = 1'b69;\nassign z = 1'b70;\nassign z = 1'b71;\nassign z = 1'b72;\nassign z = 1'b73;\nassign z = 1'b74;\nassign z = 1'b75;\nassign z = 1'b76;\nassign z = 1'b77;\nassign z = 1'b78;\nassign z = 1'b79;\nassign z = 1'b80;\nassign z = 1'b81;\nassign z = 1'b82;\nassign z = 1'b83;\nassign z = 1'b84;\nassign z = 1'b85;\nassign z = 1'b86;\nassign z = 1'b87;\nassign z = 1'b88;\nassign z = 1'b89;\nassign z = 1'b90;\nassign z = 1'b91;\nassign z = 1'b92;\nassign z = 1'b93;\nassign z = 1'b94;\nassign z = 1'b95;\nassign z = 1'b96;\nassign z = 1'b97;\nassign z = 1'b98;\nassign z = 1'b99;\nassign z = 1'b100;\nassign z = 1'b101;\nassign z = 1'b102;\nassign z = 1'b103;\nassign z = 1'b104;\nassign z = 1'b105;\nassign z = 1'b106;\nassign z = 1'b107;\nassign z = 1'b108;\nassign z = 1'b109;\nassign z = 1'b110;\nassign z = 1'b111;\nassign z = 1'b112;\nassign z = 1'b113;\nassign z = 1'b114;\nassign z = 1'b115;\nassign z = 1'b116;\nassign z = 1'b117;\nassign z = 1'b118;\nassign z = 1'b119;\nassign z = 1'b120;\nassign z = 1'b121;\nassign z = 1'b122;\nassign z = 1'b123;\nassign z = 1'b124;\nassign z = 1'b125;\nassign z = 1'b126;\nassign z = 1'b127;\nassign z = 1'b128;\nassign z = 1'b129;\nassign z = 1'b130;\nassign z = 1'b131;\nassign z = 1'b132;\nassign z = 1'b133;\nassign z = 1'b134;\nassign z = 1'b135;\nassign z = 1'b136;\nassign z = 1'b137;\nassign z = 1'b138;\nassign z = 1'b139;\nassign z = 1'b140;\nassign z = 1'b141;\nassign z = 1'b142;\nassign z = 1'b143;\nassign z = 1'b144;\nassign z = 1'b145;\nassign z = 1'b146;\nassign z = 1'b147;\nassign z = 1'b148;\nassign z = 1'b149;\nassign z = 1'b150;\nassign z = 1'b151;\nassign z = 1'b152;\nassign z = 1'b153;\nassign z = 1'b154;\nassign z = 1'b155;\nassign z = 1'b156;\nassign z = 1'b157;\nassign z = 1'b158;\nassign z = 1'b159;\nassign z = 1'b160;\nassign z = 1'b161;\nassign z = 1'b162;\nassign z = 1'b163;\nassign z = 1'b164;\nassign z = 1'b165;\nassign z = 1'b166;\nassign z = 1'b167;\nassign z = 1'b168;\nassign z = 1'b169;\nassign z = 1'b170;\nassign z = 1'b171;\nassign z = 1'b172;\nassign z = 1'b173;\nassign z = 1'b174;\nassign z = 1'b175;\nassign z = 1'b176;\nassign z = 1'b177;\nassign z = 1'b178;\nassign z = 1'b179;\nassign z = 1'b180;\nassign z = 1'b181;\nassign z = 1'b182;\nassign z = 1'b183;\nassign z = 1'b184;\nassign z = 1'b185;"}
{"task_id": "2012_q2b", "completion": "Task: Write Verilog program for the given description.\nDescription: \n// Consider the state machine shown below:\n\n// A (0) --1--> B\n// A (0) --0--> A\n// B (0) --1--> C\n// B (0) --0--> D\n// C (0) --1--> E\n// C (0) --0--> D\n// D (0) --1--> F\n// D (0) --0--> A\n// E (1) --1--> E\n// E (1) --0--> D\n// F (1) --1--> C\n// F (1) --0--> D\n\n// Assume that a one-hot code is used with the state assignment y[5:0] = 000001(A), 000010(B), 000100(C), 001000(D), 010000(E), 100000(F)\n\n// Write a Verilog for the signal Y1, which is the input of state flip-flop y[1], for the signal Y3, which is the input of state flip-flop y[3]. Derive the Verilog by inspection assuming a one-hot encoding.\n.\nGenerated Code: module top_module (\n\tinput [5:0] y,\n\tinput w,\n\toutput Y1,\n\toutput Y3\n);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "vector0", "completion": "Task: Write Verilog program for the given description.\nDescription: Build a circuit that has one 3-bit input, then outputs the same vector, and also splits it into three separate 1-bit outputs. Connect output o0 to the input vector's position 0, o1 to position 1, etc..\nGenerated Code: module top_module(\n\tinput [2:0] vec, \n\toutput [2:0] outv,\n\toutput o2,\n\toutput o1,\n\toutput o0\n);\n\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Module interface declarations\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Declarations\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Constants\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Static declarations\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Scalar declarations\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Constructors\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Functions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal functions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Public functions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Global variables\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Local variables\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Instance declarations\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Constructors\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Public functions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Private functions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Public functions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal functions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Public functions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal return type definitions\n//\n////////////////////////////////"}
{"task_id": "kmap4", "completion": "Task: Write Verilog program for the given description.\nDescription: Implement the circuit described by the Karnaugh map below.\n\n//        ab\n// cd   00 01 11 10\n//  00 | 0 | 1 | 0 | 1 |\n//  01 | 1 | 0 | 1 | 0 |\n//  11 | 0 | 1 | 0 | 1 |\n//  10 | 1 | 0 | 1 | 0 |.\nGenerated Code: module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput reg out\n);\n\n\nalways @(a,b,c,d) begin\nout = a + b + c + d;\nend\nendmodule"}
{"task_id": "vector1", "completion": "Task: Write Verilog program for the given description.\nDescription: Build a combinational circuit that splits an input half-word (16 bits, [15:0] ) into lower [7:0] and upper [15:8] bytes..\nGenerated Code: module top_module (\n\tinput [15:0] in,\n\toutput [7:0] out_hi,\n\toutput [7:0] out_lo\n);\n\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Module Declarations\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//\n// Global Variables\n//\n\n//\n// Local Variables\n//\n\n//\n// Local Variables\n//\n\n//\n// Instance Declarations\n//\n\n//\n// Instance Declarations\n//\n\n//\n// Instantiation Statements\n//\n\n//\n// Instantiation Statements\n//\n\n//\n// Constructor Declarations\n//\n\n//\n// Constructor Declarations\n//\n\n//\n// Constructor Declarations\n//\n\n//\n// Instance Declarations\n//\n\n//\n// Instance Declarations\n//\n\n//\n// Destructor Declarations\n//\n\n//\n// Destructor Declarations\n//\n\n//\n// Public Functions\n//\n\n//\n// Public Functions\n//\n\n//\n// Public Functions\n//\n\n//\n// Public Functions\n//\n\n//\n// Public Functions\n//\n\n//\n// Public Functions\n//\n\n//\n// Private Function Declarations\n//\n\n//\n// Private Function Declarations\n//\n\n//\n// Private Function Declarations\n//\n\n//\n// Private Function Declarations\n//\n\n//\n// Static Function Declarations\n//\n\n//\n// Static Function Declarations\n//\n\n//\n// Static Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function Declarations\n//\n\n//\n// Public Function"}
{"task_id": "norgate", "completion": "Task: Write Verilog program for the given description.\nDescription: Create a module that implements a NOR gate..\nGenerated Code: module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n\n\nassign out = (a == b) ? 1'b1 : 1'b0;\nendmodule"}
{"task_id": "alwaysblock2", "completion": "Task: Write Verilog program for the given description.\nDescription: Build an XOR gate three ways, using an assign statement (output out_assign), a combinational always block (output out_always_comb), and a clocked always block (output out_always_ff). Note that the clocked always block produces a different circuit from the other two: There is a flip-flop so the output is delayed..\nGenerated Code: module top_module(\n\tinput clk,\n\tinput a, \n\tinput b,\n\toutput out_assign,\n\toutput reg out_always_comb,\n\toutput reg out_always_ff\n);\n\n\n//*****************************************************************************\n// Global Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Local Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Local Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//*****************************************************************************\n// Instance Variables\n//*****************************************************************************\n\n//****************************************************************"}
{"task_id": "m2014_q6c", "completion": "Task: Write Verilog program for the given description.\nDescription: Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Resets into state A. For this part, assume that a one-hot code is used with the state assignment y[6:1] = 000001, 000010, 000100, 001000, 010000, 100000 for states A, B,..., F, respectively.\n\n// Write Verilog for the next-state signals Y2 and Y4 corresponding to signal y[2] and y[4]. Derive the logic equations by inspection assuming a one-hot encoding. .\nGenerated Code: module top_module (\n\tinput [6:1] y,\n\tinput w,\n\toutput Y2,\n\toutput Y4\n);\n\n\nassign Y2 = y[2];\nassign Y4 = y[4];\n\nassign Y = y[6:1];\nassign Y2 = y[2];\nassign Y4 = y[4];\n\nalways @(posedge w)\nif (w)\nY2 <= 1'b1;\nelse\nY2 <= y[2];\n\nalways @(posedge w)\nif (w)\nY4 <= 1'b1;\nelse\nY4 <= y[4];\n\nendmodule"}
{"task_id": "mux256to1", "completion": "Task: Write Verilog program for the given description.\nDescription: Create a 1-bit wide, 256-to-1 multiplexer. The 256 inputs are all packed into a single 256-bit input vector. sel=0 should select in[0], sel=1 selects bits in[1], sel=2 selects bits in[2], etc..\nGenerated Code: module top_module (\n\tinput [255:0] in,\n\tinput [7:0] sel,\n\toutput  out\n);\n\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Module interface declarations\n//\n//////////////////////////////////////////////////////////////////////////////\n\nfunction [255:0] pack;\ninput [255:0] in;\ninput [7:0] sel;\noutput [255:0] out;\nendfunction\n\nfunction [255:0] unpack;\ninput [255:0] in;\ninput [7:0] sel;\noutput [255:0] out;\nendfunction\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Declarations\n//\n//////////////////////////////////////////////////////////////////////////////\n\nwire [255:0] wire1;\nwire [255:0] wire2;\nwire [255:0] wire3;\nwire [255:0] wire4;\nwire [255:0] wire5;\nwire [255:0] wire6;\nwire [255:0] wire7;\nwire [255:0] wire8;\nwire [255:0] wire9;\nwire [255:0] wire10;\nwire [255:0] wire11;\nwire [255:0] wire12;\nwire [255:0] wire13;\nwire [255:0] wire14;\nwire [255:0] wire15;\nwire [255:0] wire16;\nwire [255:0] wire17;\nwire [255:0] wire18;\nwire [255:0] wire19;\nwire [255:0] wire20;\nwire [255:0] wire21;\nwire [255:0] wire22;\nwire [255:0] wire23;\nwire [255:0] wire24;\nwire [255:0] wire25;\nwire [255:0] wire26;\nwire [255:0] wire27;\nwire [255:0] wire28;\nwire [255:0] wire29;\nwire [255:0] wire30;\nwire [255:0] wire31;\nwire [255:0] wire32;\nwire [255:0] wire33;\nwire [255:0] wire34;\nwire [255:0] wire35;\nwire [255:0] wire36;\nwire [255:0] wire37;\nwire [255:0] wire38;\nwire [255:0] wire39;\nwire [255:0] wire40;\nwire [255:0] wire41;\nwire [255:0] wire42;\nwire [255:0] wire43;\nwire [255:0] wire44;\nwire [255:0] wire45;\nwire [255:0] wire46;\nwire [255:0] wire47;\nwire [255:0] wire48;\nwire [255:0] wire49;\nwire [255:0] wire50;\nwire [255:0] wire51;\nwire [255:0] wire52;\nwire [255:0] wire53;\nwire [255:0] wire54;\nwire [255:0] wire55;\nwire [255:0] wire56;\nwire [255:0] wire57;\nwire [255:0] wire58;\nwire [255:0] wire59;\nwire [255:0] wire60;\nwire [255:0] wire61;\nwire [255:0] wire62;\nwire [255:0] wire63;\nwire [255:0] wire64;\nwire [255:0] wire65;\nwire [255:0] wire66;\nwire [255:0] wire67;\nwire [255:0] wire68;\nwire [255:0] wire69;\nwire [255:0] wire70;\nwire [255:0] wire71;\nwire [255:0] wire72;\nwire [255:0] wire73;\nwire [255:0] wire74;\nwire [255:0] wire75;\nwire [255:0] wire76;\nwire [255:0] wire77;\nwire [255:0] wire78;\nwire [255:0] wire79;\nwire [255:0] wire80;\nwire [255:0] wire81;\nwire [255:0] wire82;\nwire [255:0] wire83;\nwire [255:0] wire84;\nwire [255:0] wire85;\nwire [255:0] wire86;\nwire [255:0] wire87;\nwire [255:0] wire88;\nwire [255:0] wire89;\nwire [255:0] wire90;\nwire [255:0] wire91;\nwire [255:0] wire92;\nwire [255:0] wire93;\nwire [255:0] wire94;\nwire [255:0] wire95;\nwire [255:0] wire96;\nwire [255:0] wire97;\nwire [255:0] wire98;\nwire [255:0] wire99;\nwire [255:0] wire100;\nwire [255:0] wire101;\nwire [255:0] wire102;\nwire [255:0] wire103;\nwire [255:0] wire104;\nwire [255:0] wire105;\nwire [255:0] wire106;\nwire [255:0] wire107;\nwire [255:0] wire108;\nwire [255:0] wire109;\nwire [255:0] wire110;\nwire [255:0] wire111;\nwire [255:0] wire112;\nwire [255:0] wire113;\nwire [255:0] wire114;\nwire [255:0] wire115;\nwire [255:0] wire116;\nwire [255:0] wire117;\nwire [255:0] wire118;\nwire [255:0] wire119;\nwire [255:0] wire120;\nwire [255:0] wire121;\nwire [255:0] wire122;\nwire [255:0] wire123;\nwire [255:0] wire124;\nwire [255:0] wire125;\nwire [255:0] wire126;\nwire [255:0] wire127;\nwire [255:0] wire128;\nwire [255:0] wire129;\nwire [255:0] wire130;\nwire [255:0] wire131;\nwire [255:0] wire132;\nwire [255:0] wire133;\nwire [255:0] wire134;\nwire [255:0] wire135;\nwire [255:0] wire136;\nwire [255:0] wire137;\nwire [255:0] wire138;\nwire [255:0] wire139;\nwire [255:0] wire140;\nwire [255:0] wire141;\nwire [255:0] wire142;\nwire [255:0] wire143;\nwire [255:0] wire144;\nwire [255:0] wire145;\nwire [255:0] wire146;\nwire [255:0] wire147;\nwire [255:0] wire148;\nwire [255:0] wire149;\nwire [255:0] wire150;\nwire [255:0] wire151;\nwire [255:0] wire152;\nwire [255:0] wire153;\nwire [255:0] wire154;\nwire [255:0] wire155;\nwire [255:0] wire156;\nwire [255:0] wire157;\nwire [255:0] wire158;\nwire [255:0] wire159;\nwire [255:0] wire160;\nwire [255:0] wire161;\nwire [255:0] wire162;\nwire [255:0] wire163;\nwire [255:0] wire164;\nwire [255:0] wire165;\nwire [255:0] wire166;\nwire [255:0] wire167;\nwire [255:0] wire168;\nwire [255:0] wire169;\nwire [255:0] wire170;\nwire [255:0] wire171;\nwire [255:0] wire172;\nwire [255:0] wire173;\nwire [255:0] wire174;\nwire [255:0] wire175;\nwire [255:0] wire176;\nwire [255:0] wire177;\nwire [255:0] wire178;\nwire [255:0] wire179;\nwire [255:0] wire180;\nwire [255:"}
{"task_id": "2014_q4a", "completion": "Task: Write Verilog program for the given description.\nDescription: Consider an n-bit shift register circuit. Inputs E are for enabling shift, R for value to load, L is asserted when it should load, and w is the input to the first stage of the shift register. Write a Verilog module named top_module for one stage of this circuit, including both the flip-flop and multiplexers..\nGenerated Code: module top_module (\n\tinput clk,\n\tinput w,\n\tinput R,\n\tinput E,\n\tinput L,\n\toutput reg Q\n);\n\n\n\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//========================================================================================="}
{"task_id": "ece241_2014_q4", "completion": "Task: Write Verilog program for the given description.\nDescription: Given the finite state machine circuit described below, assume that the D flip-flops are initially reset to zero before the machine begins.\n\n// Build this circuit in Verilog.\n\n// Input x goes to three different two-input gates: a XOR, an AND, and a OR gate. Each of the three gates is connected to the input of a D flip-flop and then the flip-flop outputs all go to a three-input XNOR, whose output is Z. The second input of the XOR is its corresponding flip-flop's output, the second input of the AND is its corresponding flip-flop's complemented output, and finally the second input of the OR is its corresponding flip-flop's complementary output..\nGenerated Code: module top_module (\n\tinput clk,\n\tinput x,\n\toutput z\n);\n\n\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z;\nassign z = ~z"}
{"task_id": "rule110", "completion": "Task: Write Verilog program for the given description.\nDescription: Rule 110 is a one-dimensional cellular automaton with interesting properties (such as being Turing-complete). There is a one-dimensional array of cells (on or off). At each time step, the state of each cell changes. In Rule 110, the next state of each cell depends only on itself and its two neighbours, according to the following table:\n// Left | Center | Right | Center's next state\n// 1 | 1 | 1 | 0\n// 1 | 1 | 0 | 1\n// 1 | 0 | 1 | 1\n// 1 | 0 | 0 | 0\n// 0 | 1 | 1 | 1\n// 0 | 1 | 0 | 1\n// 0 | 0 | 1 | 1\n// 0 | 0 | 0 | 0 \n// In this circuit, create a 512-cell system (q[511:0]), and advance by one time step each clock cycle. The synchronous active high load input indicates the state of the system should be loaded with data[511:0]. Assume the boundaries (q[-1] and q[512]) are both zero (off)..\nGenerated Code: module top_module(\n\tinput clk,\n\tinput load,\n\tinput [511:0] data,\n\toutput reg [511:0] q);\n\n\nalways @(posedge clk)\nbegin\nif(load == 1'b1)\nq <= data;\nelse if(load == 1'b0)\nq <= data;\nend\nendmodule"}
{"task_id": "fsm3s", "completion": "Task: Write Verilog program for the given description.\nDescription: The following is the state transition table for a Moore state machine with one input, one output, and four states. Implement this state machine. Include a synchronous active high reset that resets the FSM to state A. \n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1.\nGenerated Code: module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput out\n);\n\n\nalways @(posedge clk) begin\nif (reset) begin\nout <= 0;\nend else begin\nout <= in;\nend\nend\nendmodule"}
{"task_id": "bugs_mux2", "completion": "Task: Write Verilog program for the given description.\nDescription: Find the bug and fix this 8-bit wide 2-to-1 mux.\n\n// module top_module (\n//     input sel,\n//     input [7:0] a,\n//     input [7:0] b,\n//     output out  );\n\n//     assign out = (~sel & a) | (sel & b);\n\n// endmodule.\nGenerated Code: module top_module (\n\tinput sel,\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput reg [7:0] out\n);\n\n\nalways @*\ncase (sel)\n0:out = a;\n1:out = b;\n2:out = out;\n3:out = out;\n4:out = out;\n5:out = out;\n6:out = out;\n7:out = out;\n8:out = out;\n9:out = out;\n10:out = out;\n11:out = out;\n12:out = out;\n13:out = out;\n14:out = out;\n15:out = out;\n16:out = out;\n17:out = out;\n18:out = out;\n19:out = out;\n20:out = out;\n21:out = out;\n22:out = out;\n23:out = out;\n24:out = out;\n25:out = out;\n26:out = out;\n27:out = out;\n28:out = out;\n29:out = out;\n30:out = out;\n31:out = out;\n32:out = out;\n33:out = out;\n34:out = out;\n35:out = out;\n36:out = out;\n37:out = out;\n38:out = out;\n39:out = out;\n40:out = out;\n41:out = out;\n42:out = out;\n43:out = out;\n44:out = out;\n45:out = out;\n46:out = out;\n47:out = out;\n48:out = out;\n49:out = out;\n50:out = out;\n51:out = out;\n52:out = out;\n53:out = out;\n54:out = out;\n55:out = out;\n56:out = out;\n57:out = out;\n58:out = out;\n59:out = out;\n60:out = out;\n61:out = out;\n62:out = out;\n63:out = out;\n64:out = out;\n65:out = out;\n66:out = out;\n67:out = out;\n68:out = out;\n69:out = out;\n70:out = out;\n71:out = out;\n72:out = out;\n73:out = out;\n74:out = out;\n75:out = out;\n76:out = out;\n77:out = out;\n78:out = out;\n79:out = out;\n80:out = out;\n81:out = out;\n82:out = out;\n83:out = out;\n84:out = out;\n85:out = out;\n86:out = out;\n87:out = out;\n88:out = out;\n89:out = out;\n90:out = out;\n91:out = out;\n92:out = out;\n93:out = out;\n94:out = out;\n95:out = out;\n96:out = out;\n97:out = out;\n98:out = out;\n99:out = out;\n100:out = out;\n101:out = out;\n102:out = out;\n103:out = out;\n104:out = out;\n105:out = out;\n106:out = out;\n107:out = out;\n108:out = out;\n109:out = out;\n110:out = out;\n111:out = out;\n112:out = out;\n113:out = out;\n114:out = out;\n115:out = out;\n116:out = out;\n117:out = out;\n118:out = out;\n119:out = out;\n120:out = out;\n121:out = out;\n122:out = out;\n123:out = out;\n124:out = out;\n125:out = out;\n126:out = out;\n127:out = out;\n128:out = out;\n129:out = out;\n130:out = out;\n131:out = out;\n132:out = out;\n133:out = out;\n134:out = out;\n135:out = out;\n136:out = out;\n137:out = out;\n138:out = out;\n139:out = out;\n140:out = out;\n141:out = out;\n142:out = out;\n143:out = out;\n144:out = out;\n145:out = out;\n146:out = out;\n147:out = out;\n148:out = out;\n149:out = out;\n150:out = out;\n151:out = out;\n152:out = out;\n153:out = out;\n154:out = out;\n155:out = out;\n156:out = out;\n157:out = out;\n158:out = out;\n159:out = out;\n160:out = out;\n161:out = out;\n162:out = out;\n163:out = out;\n164:out = out;\n165:out = out;\n166:out = out;\n167:out = out;\n168:out = out;\n169:out = out;\n170:out = out;\n171:out = out;\n172:out = out;\n173:out = out;\n174:out = out;\n175:out = out;\n176:out = out;\n177:out = out;\n178:out = out;\n179:out = out;\n180:out = out;\n181:out = out;\n182:out = out;\n183:out = out;\n184:out = out;\n185:out = out;\n186:out = out;\n187:out = out;\n188:out = out;\n189:out = out;\n190:out = out;\n191:out = out;\n192:out = out;\n193:out = out;\n194:out = out;\n195:out = out;\n196:out = out;\n197:out = out;\n198:out = out;\n199:out = out;\n200:out = out;\n201:out = out;\n202:out = out;\n203:out = out;\n204:out = out;\n205:out = out;\n206:out = out;\n207:out = out;\n208:out = out;\n209:out = out;\n210:out = out;\n211:out = out;\n212:out = out;\n213:out = out;\n214:out = out;\n215:out = out;\n216:out = out;\n217:out = out;\n218:out = out;\n219:out = out;\n220:out = out;\n221:out = out;\n222:out = out;\n223:out = out;\n224:out = out;\n225:out = out;\n226:out = out;\n227:out = out;\n228:out = out;\n229:out = out;\n230:out = out;\n231:out = out;\n232:out = out;\n233:out = out;\n234:out = out;\n235:out = out;\n236:out = out;\n237:out = out;\n238:out = out;\n239:out = out;\n240:out = out;\n241:out = out;\n242:out = out;\n243:out = out;\n244:out = out;\n245:out = out;\n246:out = out;\n247:out = out;\n248:out = out;\n249:out = out;\n250:out = out;\n251:out = out;\n252:out = out;\n253:out = out;\n254:out = out;\n255:out = out;\n256:out = out;\n257:out = out;\n258:out = out;\n259:out = out;\n260:out = out;\n261:out = out;\n262:out = out;\n263:out = out;\n264:out = out;\n265:out = out;\n266:out = out;\n267:out = out;\n268:out = out;\n269:out ="}
{"task_id": "mt2015_muxdff", "completion": "Task: Write Verilog program for the given description.\nDescription: Consider this Verilog module \"full_module\":\n\n// module full_module (\n//     input [2:0] r,\n//     input L,\n//     input clk,\n//     output reg [2:0] q\n);\n\n// always @(posedge clk) begin\n//     if (L) begin\n//         q <= r;\n//     end else begin\n//         q <= {q[1] ^ q[2], q[0], q[2]};\n//     end\n// end\n\n// endmodule\n\n// You want to create a hierarchical Verilog design where a flipflop and 2-1 multiplexer are in a submodule, and that submodule is instantiated three times in this code. Create the submodule called \"top_module\".\n.\nGenerated Code: module top_module(\n\tinput clk,\n\tinput L,\n\tinput q_in,\n\tinput r_in,\n\toutput reg Q);\n\n\nalways @(posedge clk) begin\nif (L) begin\nQ <= r_in;\nend else begin\nQ <= {q_in[1] ^ q_in[2], q_in[0], q_in[2]};\nend\nend\nendmodule // top_module"}
{"task_id": "edgecapture", "completion": "Task: Write Verilog program for the given description.\nDescription: For each bit in a 32-bit vector, capture when the input signal changes from 1 in one clock cycle to 0 the next. \"Capture\" means that the output will remain 1 until the register is reset (active high synchronous reset)..\nGenerated Code: module top_module(\n\tinput clk,\n\tinput reset,\n\tinput [31:0] in,\n\toutput reg [31:0] out);\n\n\nalways @(posedge clk) begin\nif(reset) begin\nout[31:0] = in[31:0];\nend else begin\nout[31:0] = in[31:0];\nend\nend\nendmodule"}
{"task_id": "dff8", "completion": "Task: Write Verilog program for the given description.\nDescription: Create 8 D flip-flops. All DFFs should be triggered by the positive edge of clk..\nGenerated Code: module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\toutput reg [7:0] q);\n\n\nalways @(posedge clk) begin\nq <= d;\nend\nendmodule"}
{"task_id": "ece241_2014_q1c", "completion": "Task: Write Verilog program for the given description.\nDescription: Assume that you have two 8-bit 2's complement numbers, a[7:0] and b[7:0]. These numbers are added to produce s[7:0]. Also compute whether a (signed) overflow has occurred..\nGenerated Code: module top_module (\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput [7:0] s,\n\toutput overflow\n);\n\n\nalways @(a or b) begin\ns = a + b;\nif (overflow) begin\ncase (a[7:0])\n8'd0: s = a + b;\n8'd1: s = a + b;\n8'd2: s = a + b;\n8'd3: s = a + b;\n8'd4: s = a + b;\n8'd5: s = a + b;\n8'd6: s = a + b;\n8'd7: s = a + b;\n8'd8: s = a + b;\n8'd9: s = a + b;\n8'd10: s = a + b;\n8'd11: s = a + b;\n8'd12: s = a + b;\n8'd13: s = a + b;\n8'd14: s = a + b;\n8'd15: s = a + b;\n8'd16: s = a + b;\n8'd17: s = a + b;\n8'd18: s = a + b;\n8'd19: s = a + b;\n8'd20: s = a + b;\n8'd21: s = a + b;\n8'd22: s = a + b;\n8'd23: s = a + b;\n8'd24: s = a + b;\n8'd25: s = a + b;\n8'd26: s = a + b;\n8'd27: s = a + b;\n8'd28: s = a + b;\n8'd29: s = a + b;\n8'd30: s = a + b;\n8'd31: s = a + b;\n8'd32: s = a + b;\n8'd33: s = a + b;\n8'd34: s = a + b;\n8'd35: s = a + b;\n8'd36: s = a + b;\n8'd37: s = a + b;\n8'd38: s = a + b;\n8'd39: s = a + b;\n8'd40: s = a + b;\n8'd41: s = a + b;\n8'd42: s = a + b;\n8'd43: s = a + b;\n8'd44: s = a + b;\n8'd45: s = a + b;\n8'd46: s = a + b;\n8'd47: s = a + b;\n8'd48: s = a + b;\n8'd49: s = a + b;\n8'd50: s = a + b;\n8'd51: s = a + b;\n8'd52: s = a + b;\n8'd53: s = a + b;\n8'd54: s = a + b;\n8'd55: s = a + b;\n8'd56: s = a + b;\n8'd57: s = a + b;\n8'd58: s = a + b;\n8'd59: s = a + b;\n8'd60: s = a + b;\n8'd61: s = a + b;\n8'd62: s = a + b;\n8'd63: s = a + b;\n8'd64: s = a + b;\n8'd65: s = a + b;\n8'd66: s = a + b;\n8'd67: s = a + b;\n8'd68: s = a + b;\n8'd69: s = a + b;\n8'd70: s = a + b;\n8'd71: s = a + b;\n8'd72: s = a + b;\n8'd73: s = a + b;\n8'd74: s = a + b;\n8'd75: s = a + b;\n8'd76: s = a + b;\n8'd77: s = a + b;\n8'd78: s = a + b;\n8'd79: s = a + b;\n8'd80: s = a + b;\n8'd81: s = a + b;\n8'd82: s = a + b;\n8'd83: s = a + b;\n8'd84: s = a + b;\n8'd85: s = a + b;\n8'd86: s = a + b;\n8'd87: s = a + b;\n8'd88: s = a + b;\n8'd89: s = a + b;\n8'd90: s = a + b;\n8'd91: s = a + b;\n8'd92: s = a + b;\n8'd93: s = a + b;\n8'd94: s = a + b;\n8'd95: s = a + b;\n8'd96: s = a + b;\n8'd97: s = a + b;\n8'd98: s = a + b;\n8'd99: s = a + b;\n8'd100: s = a + b;\n8'd101: s = a + b;\n8'd102: s = a + b;\n8'd103: s = a + b;\n8'd104: s = a + b;\n8'd105: s = a + b;\n8'd106: s = a + b;\n8'd107: s = a + b;\n8'd108: s = a + b;\n8'd109: s = a + b;\n8'd110: s = a + b;\n8'd111: s = a + b;\n8'd112: s = a + b;\n8'd113: s = a + b;\n8'd114: s = a + b;\n8'd115: s = a + b;\n8'd116: s = a + b;\n8'd117: s = a + b;\n8'd118: s = a + b;\n8'd119: s = a + b;\n8'd120: s = a + b;\n8'd121: s = a + b;\n8'd122: s = a + b;\n8'd123: s = a + b;\n8'd124: s = a + b;\n8'd125: s = a + b;\n8'd126: s = a + b;\n8'd127: s = a + b;\n8'd128: s = a + b;\n8'd129: s = a + b;\n8'd130: s = a + b;\n8'd131: s = a + b;\n8'd132: s = a + b;\n8'd133: s = a + b;\n8'd134: s = a + b;\n8'd135: s = a + b;\n8'd136: s = a + b;\n8'd137: s = a + b;\n8'd138: s = a + b;\n8'd139: s = a + b;\n8'd140: s = a + b;\n8'd141: s = a + b;\n8'd142: s = a + b;\n8'd143: s = a + b;\n8'd144: s = a + b;\n8'd145: s = a + b;\n8'd146: s = a + b;\n8'd147: s = a + b;\n8'd148: s = a + b;\n8'd149: s = a + b;\n8'd150: s = a + b;\n8'd151: s = a + b;\n8'd152: s = a + b;\n8'd153: s = a + b;\n8'd154: s = a + b;\n8'd155: s = a + b;\n8'd156: s = a + b;\n8'd157: s = a + b;\n8'd158: s = a + b;\n8'd159: s = a + b;\n8'd160: s = a + b;\n8'd161: s = a + b;\n8'd162: s = a + b;\n8'd163: s = a + b;\n8'd164: s = a + b;\n8'd165: s = a + b;\n8'd166: s = a + b;\n8'd167: s = a + b;\n8'd168: s = a + b;\n8'd169: s = a + b;\n8'd170: s = a + b;\n8'd171: s = a + b;\n8'd172: s = a + b;\n"}
{"task_id": "review2015_fsmonehot", "completion": "Task: Write Verilog program for the given description.\nDescription: Given the following Moore state machine with 3 input (d, done_counting, ack) and 3 outputs (shift_ena, counting, done). Unless otherwise stated in the diagram below, assume outputs are 0 and inputs are don't cares.\n\n// S () --d=0--> S\n// S () --d=1--> S1\n// S1 () --d=0--> S\n// S1 () --d=1--> S11\n// S11 () --d=0--> S110\n// S11 () --d=1--> S11\n// S110 () --d=0--> S\n// S110 () --d=1--> B0\n// B0 (shift_ena=1) -- (always go to next cycle) --> B1\n// B1 (shift_ena=1) -- (always go to next cycle) --> B2\n// B2 (shift_ena=1) -- (always go to next cycle) --> B3\n// B3 (shift_ena=1) -- (always go to next cycle) --> Count\n// Count (counting=1) --!(done_counting)--> Count\n// Count (counting=1) --(done_counting)--> Wait\n// Wait (done=1) --ack=0--> Wait\n// Wait (done=1) --ack=1--> S\n\n// At reset, the state machine starts in state \"S\". Derive next-state logic equations and output logic equations by inspection assuming the following one-hot encoding is used: (S, S1, S11, S110, B0, B1, B2, B3, Count, Wait) = (10'b0000000001, 10'b0000000010, 10'b0000000100, ... , 10'b1000000000)\n\n// Derive state transition and output logic equations by inspection assuming a one-hot encoding. Implement only the state transition logic and output logic (the combinational logic portion) for this state machine.\n\n// Write code that generates the following equations:\n\n// - B3_next -- next-state logic for state B3\n// - S_next\n// - S1_next\n// - Count_next\n// - Wait_next\n// - done -- output logic\n// - counting\n// - shift_ena\n.\nGenerated Code: module top_module(\n    input d,\n    input done_counting,\n    input ack,\n    input [9:0] state,    // 10-bit one-hot current state\n    output B3_next,\n    output S_next,\n    output S1_next,\n    output Count_next,\n    output Wait_next,\n    output done,\n    output counting,\n    output shift_ena\n );\n\n\n// Generate code that generates the following equations:\n\n// - B3_next -- next-state logic for state B3\n// - S_next\n// - S1_next\n// - Count_next\n// - Wait_next\n// - done -- output logic\n// - counting\n// - shift_ena\n.\nGenerated Code: module top_module(\n    input d,\n    input done_counting,\n    input ack,\n    input [9:0] state,    // 10-bit one-hot current state\n    output B3_next,\n    output S_next,\n    output S1_next,\n    output Count_next,\n    output Wait_next,\n    output done,\n    output counting,\n    output shift_ena\n );\n\n// Generate code that generates the following equations:\n\n// - B3_next -- next-state logic for state B3\n// - S_next\n// - S1_next\n// - Count_next\n// - Wait_next\n// - done -- output logic\n// - counting\n// - shift_ena\n.\nGenerated Code: module top_module(\n    input d,\n    input done_counting,\n    input ack,\n    input [9:0] state,    // 10-bit one-hot current state\n    output B3_next,\n    output S_next,\n    output S1_next,\n    output Count_next,\n    output Wait_next,\n    output done,\n    output counting,\n    output shift_ena\n );\n\n// Generate code that generates the following equations:\n\n// - B3_next -- next-state logic for state B3\n// - S_next\n// - S1_next\n// - Count_next\n// - Wait_next\n// - done -- output logic\n// - counting\n// - shift_ena\n.\nGenerated Code: module top_module(\n    input d,\n    input done_counting,\n    input ack,\n    input [9:0] state,    // 10-bit one-hot current state\n    output B3_next,\n    output S_next,\n    output S1_next,\n    output Count_next,\n    output Wait_next,\n    output done,\n    output counting,\n    output shift_ena\n );\n\n// Generate code that generates the following equations:\n\n// - B3_next -- next-state logic for state B3\n// - S_next\n// - S1_next\n// - Count_next\n// - Wait_next\n// - done -- output logic\n// - counting\n// - shift_ena\n.\nGenerated Code: module top_module(\n    input d,\n    input done_counting,\n    input ack,\n    input [9:0] state,    // 10-bit one-hot current state\n    output B3_next,\n    output S_next,\n    output S1_next,\n    output Count_next,\n    output Wait_next,\n    output done,\n    output counting,\n    output shift_ena\n );\n\n// Generate code that generates the following equations:\n\n// - B3_next -- next-state logic for state B3\n// - S_next\n// - S1_next\n// - Count_next\n// - Wait_next\n// - done -- output logic\n// - counting\n// - shift_ena\n.\nGenerated Code: module top_module(\n    input d,\n    input done_counting,\n    input ack,\n    input [9:0] state,    // 10-bit one-hot current state\n    output B3_next,\n    output S_next,\n    output S1_next,\n    output Count_next,\n    output Wait_next,\n    output done,\n    output counting,\n    output shift_ena\n );\n\n// Generate code that generates the following equations:\n\n// - B3_next -- next-state logic for state B3\n// - S_next\n// - S1_next\n// - Count_next\n// - Wait_next\n// - done -- output logic\n// - counting\n// - shift_ena\n.\nGenerated Code: module top_module(\n    input d,\n    input done_counting,\n    input ack,\n    input [9:0] state,    // 10-bit one-hot current state\n    output B3_next,\n    output S_next,\n    output S1_next,\n    output Count_next,\n    output Wait_next,\n    output done,\n    output counting,\n    output shift_ena\n );\n\n// Generate code that generates the following equations:\n\n// - B3_next -- next-state logic for state B3\n// - S_next\n// - S1_next\n// - Count_next\n// - Wait_next\n// - done -- output logic\n// - counting\n// - shift_ena\n.\nGenerated Code: module top_module(\n    input d,\n    input done_counting,\n    input ack,\n    input [9:0] state,    // 10-bit one-hot current state\n    output B3_next,\n    output S_next,\n    output S1_next,\n    output Count_next,\n    output Wait_next,\n    output done,\n    output counting,\n    output shift_ena\n );\n\n// Generate code that generates the following equations:\n\n// - B3_next -- next-state logic for state B3\n// - S_next\n// - S1_next\n// - Count_next\n// - Wait_next\n// - done -- output logic\n// - counting\n// - shift_ena\n.\nGenerated Code: module top_module(\n    input d,\n    input done_counting,\n    input ack,\n    input [9:0] state,    // 10-bit one-hot current state\n    output B3_next,\n    output S_next,\n    output S1_next,\n    output Count_next,\n    output Wait_next,\n    output done,\n    output counting,\n    output shift_ena\n );\n\n// Generate code that generates the following"}
{"task_id": "counter_2bc", "completion": "Task: Write Verilog program for the given description.\nDescription: Build a two-bit saturating counter. The counter increments (up to a maximum of 3) when train_valid = 1 and train_taken = 1. It decrements (down to a minimum of 0) when train_valid = 1 and train_taken = 0. When not training (train_valid = 0), the counter keeps its value unchanged. areset is a positive edge triggered asynchronous reset that resets the counter to weakly not-taken (2'b01). Output state[1:0] is the two-bit counter value..\nGenerated Code: module top_module(\n    input clk,\n    input areset,\n    input train_valid,\n    input train_taken,\n    output logic [1:0] state\n);\n\n\nlogic [1:0] state;\n\nalways @(posedge clk) begin\nif (areset) begin\nstate <= 2'b00;\nend else if (train_valid && train_taken) begin\nstate <= 2'b01;\nend\nend\nend\n\nendmodule"}
{"task_id": "always_casez", "completion": "Task: Write Verilog program for the given description.\nDescription: Build a priority encoder for 8-bit inputs. Given an 8-bit vector, the output should report the first (least significant) bit in the vector that is 1. Report zero if the input vector has no bits that are high. For example, the input 8'b10010000 should output 3'd4, because bit[4] is first bit that is high..\nGenerated Code: module top_module (\n\tinput [7:0] in,\n\toutput reg [2:0] pos\n);\n\n\nalways @(posedge clk) begin\npos = 0;\nfor (int i = 0; i < 8; i = i + 1) begin\nif (in[i])\npos = pos + 1;\nelse\npos = pos - 1;\nend\nend\n\nendmodule // top_module"}
{"task_id": "always_nolatches", "completion": "Task: Write Verilog program for the given description.\nDescription: Suppose you're building a circuit to process scancodes from a PS/2 keyboard for a game. Given the last two bytes of scancodes received, you need to indicate whether one of the arrow keys on the keyboard have been pressed. This involves a fairly simple mapping, which can be implemented as a case statement (or if-elseif) with four cases.\n// Scancode[15:0] | Arrow key\n// 16'he06b | left arrow\n// 16'he072 | down arrow\n// 16'he074 | right arrow\n// 16'he075 | up arrow\n// Anything else | none\n// Your circuit has one 16-bit input, and four outputs. Build this circuit that recognizes these four scancodes and asserts the correct output.\n\n.\nGenerated Code: module top_module (\n\tinput [15:0] scancode,\n\toutput reg left,\n\toutput reg down,\n\toutput reg right,\n\toutput reg up\n);\n\n\n\nbegin\nleft = 0;\ndown = 0;\nright = 0;\nup = 0;\nend\n\nbegin\nleft = 1;\ndown = 1;\nright = 1;\nup = 1;\nend\n\nbegin\nleft = 2;\ndown = 2;\nright = 2;\nup = 2;\nend\n\nbegin\nleft = 3;\ndown = 3;\nright = 3;\nup = 3;\nend\n\nbegin\nleft = 4;\ndown = 4;\nright = 4;\nup = 4;\nend\n\nbegin\nleft = 5;\ndown = 5;\nright = 5;\nup = 5;\nend\n\nbegin\nleft = 6;\ndown = 6;\nright = 6;\nup = 6;\nend\n\nbegin\nleft = 7;\ndown = 7;\nright = 7;\nup = 7;\nend\n\nbegin\nleft = 8;\ndown = 8;\nright = 8;\nup = 8;\nend\n\nbegin\nleft = 9;\ndown = 9;\nright = 9;\nup = 9;\nend\n\nbegin\nleft = 10;\ndown = 10;\nright = 10;\nup = 10;\nend\n\nbegin\nleft = 11;\ndown = 11;\nright = 11;\nup = 11;\nend\n\nbegin\nleft = 12;\ndown = 12;\nright = 12;\nup = 12;\nend\n\nbegin\nleft = 13;\ndown = 13;\nright = 13;\nup = 13;\nend\n\nbegin\nleft = 14;\ndown = 14;\nright = 14;\nup = 14;\nend\n\nbegin\nleft = 15;\ndown = 15;\nright = 15;\nup = 15;\nend\n\nbegin\nleft = 16;\ndown = 16;\nright = 16;\nup = 16;\nend\n\nbegin\nleft = 17;\ndown = 17;\nright = 17;\nup = 17;\nend\n\nbegin\nleft = 18;\ndown = 18;\nright = 18;\nup = 18;\nend\n\nbegin\nleft = 19;\ndown = 19;\nright = 19;\nup = 19;\nend\n\nbegin\nleft = 20;\ndown = 20;\nright = 20;\nup = 20;\nend\n\nbegin\nleft = 21;\ndown = 21;\nright = 21;\nup = 21;\nend\n\nbegin\nleft = 22;\ndown = 22;\nright = 22;\nup = 22;\nend\n\nbegin\nleft = 23;\ndown = 23;\nright = 23;\nup = 23;\nend\n\nbegin\nleft = 24;\ndown = 24;\nright = 24;\nup = 24;\nend\n\nbegin\nleft = 25;\ndown = 25;\nright = 25;\nup = 25;\nend\n\nbegin\nleft = 26;\ndown = 26;\nright = 26;\nup = 26;\nend\n\nbegin\nleft = 27;\ndown = 27;\nright = 27;\nup = 27;\nend\n\nbegin\nleft = 28;\ndown = 28;\nright = 28;\nup = 28;\nend\n\nbegin\nleft = 29;\ndown = 29;\nright = 29;\nup = 29;\nend\n\nbegin\nleft = 30;\ndown = 30;\nright = 30;\nup = 30;\nend\n\nbegin\nleft = 31;\ndown = 31;\nright = 31;\nup = 31;\nend\n\nbegin\nleft = 32;\ndown = 32;\nright = 32;\nup = 32;\nend\n\nbegin\nleft = 33;\ndown = 33;\nright = 33;\nup = 33;\nend\n\nbegin\nleft = 34;\ndown = 34;\nright = 34;\nup = 34;\nend\n\nbegin\nleft = 35;\ndown = 35;\nright = 35;\nup = 35;\nend\n\nbegin\nleft = 36;\ndown = 36;\nright = 36;\nup = 36;\nend\n\nbegin\nleft = 37;\ndown = 37;\nright = 37;\nup = 37;\nend\n\nbegin\nleft = 38;\ndown = 38;\nright = 38;\nup = 38;\nend\n\nbegin\nleft = 39;\ndown = 39;\nright = 39;\nup = 39;\nend\n\nbegin\nleft = 40;\ndown = 40;\nright = 40;\nup = 40;\nend\n\nbegin\nleft = 41;\ndown = 41;\nright = 41;\nup = 41;\nend\n\nbegin\nleft = 42;\ndown = 42;\nright = 42;\nup = 42;\nend\n\nbegin\nleft = 43;\ndown = 43;\nright = 43;\nup = 43;\nend\n\nbegin\nleft = 44;\ndown = 44;\nright = 44;\nup = 44;\nend\n\nbegin\nleft = 45;\ndown = 45;\nright = 45;\nup = 45;\nend\n\nbegin\nleft = 46;\ndown = 46;\nright = 46;\nup = 46;\nend\n\nbegin\nleft = 47;\ndown = 47;\nright = 47;\nup = 47;\nend\n\nbegin\nleft = 48;\ndown = 48;\nright = 48;\nup = 48;\nend\n\nbegin\nleft = 49;\ndown = 49;\nright = 49;\nup = 49;\nend\n\nbegin\nleft = 50;\ndown = 50;\nright = 50;\nup = 50;\nend\n\nbegin\nleft = 51;\ndown = 51;\nright = 51;\nup = 51;\nend\n\nbegin\nleft = 52;\ndown = 52;\nright = 52;\nup = 52;\nend\n\nbegin\nleft = 53;\ndown = 53;\nright = 53;\nup = 53;\nend\n\nbegin\nleft = 54;\ndown = 54;\nright = 54;\nup = 54;\nend\n\nbegin\nleft = 55;\ndown = 55;\nright = 55;\nup = 55;\nend\n\nbegin\nleft = 56;\ndown = 56;\nright = 56;\nup = 56;\nend\n\nbegin\nleft = 57;\ndown = 57;\nright = 57;\nup = 57;\nend\n\nbegin\nleft = 58;\ndown = 58;\nright = 58;\nup = 58;\nend\n\nbegin\nleft = 59;\ndown = 59;\nright = 59;\nup = 59;\nend\n\nbegin\nleft = 60;\ndown = 60;\nright = 60;\nup = 60;\nend\n\nbegin\nleft = 61;\ndown = 61;\nright = 61;\nup = 61;\nend\n\nbegin\nleft = 62;\ndown = 62;\nright = 62;\nup = 62;\nend\n\nbegin\nleft = 63;\ndown = 63;\nright = 63;\nup = 63;\nend\n\nbegin\nleft = 64;\ndown = 64;\nright = 64;\nup = 64;\nend\n\nbegin\nleft = 65;\ndown = 65;\nright = 65;\nup = 65;\nend\n\nbegin\nleft = 66;\ndown = 66;\nright = 66;\nup = 66;\nend\n\nbegin\nleft = 67;\ndown = 67;\nright = 67;\nup = 67;\nend\n\nbegin\nleft = 68;\ndown = 68;\nright = 68;\nup = 68;\nend\n\nbegin\nleft = 69;\ndown = 69;\nright = 69;\nup = 69;\nend\n\nbegin\nleft = 70;\ndown = 70;\nright = 70;\nup = 70;\nend\n\nbegin\nleft = 71;\ndown = 71;\nright = 71;\nup = 71;\nend\n\nbegin\nleft = 72;\ndown = 72;\nright = 72;"}
{"task_id": "m2014_q4j", "completion": "Task: Write Verilog program for the given description.\nDescription: Implement a 4-bit adder with full adders. The output sum should include the overflow bit..\nGenerated Code: module top_module (\n\tinput [3:0] x,\n\tinput [3:0] y,\n\toutput [4:0] sum\n);\n\n\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations"}
{"task_id": "history_shift", "completion": "Task: Write Verilog program for the given description.\nDescription: Build a 32-bit global history shift register, including support for rolling back state in response to a pipeline flush caused by a branch misprediction. When a branch prediction is made (predict_valid = 1), shift in predict_taken from the LSB side to update the branch history for the predicted branch. (predict_history[0] is the direction of the youngest branch.) When a branch misprediction occurs (train_mispredicted = 1), load the branch history register with the history after the completion of the mispredicted branch. This is the history before the mispredicted branch (train_history) concatenated with the actual result of the branch (train_taken). If both a prediction and misprediction occur at the same time, the misprediction takes precedence, because the pipeline flush will also flush out the branch that is currently making a prediction. predict_history is the value of the branch history register. areset is a positive edge triggered asynchronous reset that resets the history counter to zero.\n\n.\nGenerated Code: module top_module\n(\n    input clk,\n    input areset,\n    input predict_valid,\n    input predict_taken,\n    output logic [31:0] predict_history,\n    \n    input train_mispredicted,\n    input train_taken,\n    input [31:0] train_history\n);\n\n\n\nlogic [31:0] pred_history;\nlogic [31:0] pred_taken;\n\nlogic [31:0] predict_history;\nlogic [31:0] predict_taken;\n\nlogic [31:0] train_history;\nlogic [31:0] train_mispredicted;\nlogic [31:0] train_taken;\n\nlogic [31:0] valid_history;\nlogic [31:0] valid_mispredicted;\nlogic [31:0] valid_taken;\n\nlogic [31:0] predicted_history;\nlogic [31:0] predicted_mispredicted;\nlogic [31:0] predicted_taken;\n\nlogic [31:0] predicted_valid_history;\nlogic [31:0] predicted_valid_mispredicted;\nlogic [31:0] predicted_valid_taken;\n\nlogic [31:0] predicted_predicted_history;\nlogic [31:0] predicted_predicted_mispredicted;\nlogic [31:0] predicted_predicted_taken;\n\nlogic [31:0] predicted_predicted_valid_history;\nlogic [31:0] predicted_predicted_valid_mispredicted;\nlogic [31:0] predicted_predicted_valid_taken;\n\nlogic [31:0] predicted_valid_predicted_history;\nlogic [31:0] predicted_valid_predicted_mispredicted;\nlogic [31:0] predicted_valid_predicted_taken;\n\nlogic [31:0] predicted_valid_predicted_valid_history;\nlogic [31:0] predicted_valid_predicted_valid_mispredicted;\nlogic [31:0] predicted_valid_predicted_valid_taken;\n\nlogic [31:0] predicted_valid_predicted_valid_predicted_history;\nlogic [31:0] predicted_valid_predicted_valid_predicted_mispredicted;\nlogic [31:0] predicted_valid_predicted_valid_predicted_taken;\n\nlogic [31:0] predicted_valid_predicted_valid_predicted_valid_history;\nlogic [31:0] predicted_valid_predicted_valid_predicted_valid_mispredicted;\nlogic [31:0] predicted_valid_predicted_valid_predicted_valid_taken;\n\nlogic [31:0] predicted_valid_predicted_valid_predicted_valid_predicted_history;\nlogic [31:0] predicted_valid_predicted_valid_predicted_valid_predicted_mispredicted;\nlogic [31:0] predicted_valid_predicted_valid_predicted_valid_predicted_taken;\n\nlogic [31:0] predicted_valid_predicted_valid_predicted_valid_predicted_valid_history;\nlogic [31:0] predicted_valid_predicted_valid_predicted_valid_predicted_valid_mispredicted;\nlogic [31:0] predicted_valid_predicted_valid_predicted_valid_predicted_valid_taken;\n\nlogic [31:0] predicted_valid_predicted_valid_predicted_valid_predicted_valid_predicted_history;\nlogic [31:0] predicted_valid_predicted_valid_predicted_valid_predicted_valid_predicted_mispredicted;\nlogic [31:0] predicted_valid_predicted_valid_predicted_valid_predicted_valid_predicted_taken;\n\nlogic [31:0] predicted_valid_predicted_valid_predicted_valid_predicted_valid_predicted_history;\nlogic [31:0] predicted_valid_predicted_valid_predicted_valid_predicted_valid_predicted_mispredicted;\nlogic [31:0] predicted_valid_predicted_valid_predicted_valid_predicted_valid_predicted_taken;\n\nlogic [31:0] predicted_valid_predicted_valid_predicted_valid_predicted_valid_predicted_history;\nlogic [31:0] predicted_valid_predicted_valid_predicted_valid_predicted_valid_predicted_mispredicted;\nlogic [31:0] predicted_valid_predicted_valid_predicted_valid_predicted_valid_predicted_taken;\n\nlogic [31:0] predicted_valid_predicted_valid_predicted_valid_predicted_valid_predicted_history;\nlogic [31:0] predicted_valid_predicted_valid_predicted_valid_predicted_valid_predicted_mispredicted;\nlogic [31:0] predicted_valid_predicted_valid_predicted_valid_predicted_valid_predicted_taken;\n\nlogic [31:0] predicted_valid_predicted_valid_predicted_valid_predicted_valid_predicted_history;\nlogic [31:0] predicted_valid_predicted_valid_predicted_valid_predicted_valid_predicted_mispredicted;\nlogic [31:0] predicted_valid_predicted_valid_predicted_valid_predicted_valid_predicted_taken;\n\nlogic [31:0] predicted_valid_predicted_valid_predicted_valid_predicted_valid_predicted_history;\nlogic [31:0] predicted_valid_predicted_valid_predicted_valid_predicted_valid_predicted_mispredicted;\nlogic [31:0] predicted_valid_predicted_valid_predicted_valid_predicted_valid_predicted_taken;\n\nlogic [31:0] predicted_valid_predicted_valid_predicted_valid_predicted_valid_predicted_history;\nlogic [31:0] predicted_valid_predicted_valid_predicted_valid_predicted_valid_predicted_mispredicted;\nlogic [31:0] predicted_valid_predicted_valid_predicted_valid_predicted_valid_predicted_taken;\n\nlogic [31:0] predicted_valid_predicted_valid_predicted_valid_predicted_valid_predicted_history;\nlogic [31:0] predicted_valid_predicted_valid_predicted_valid_predicted_valid_predicted_mispredicted;\nlogic [31:0] predicted_valid_predicted_valid_predicted_valid_predicted_valid_predicted_taken;\n\nlogic [31:0] predicted_valid_predicted_valid_predicted_valid_predicted_valid_predicted_history;\nlogic [31:0] predicted_valid_predicted_valid_predicted_valid_predicted_valid_predicted_mispredicted;\nlogic [31:0] predicted_valid_predicted_valid_predicted_valid_predicted_valid_predicted_taken;\n\nlogic [31:0] predicted_valid_predicted_valid_predicted_valid_predicted_valid_predicted_history;\nlogic [31:0] predicted_valid_predicted_valid"}
{"task_id": "wire_decl", "completion": "Task: Write Verilog program for the given description.\nDescription: Implement the following circuit. Create two intermediate wires (named anything you want) to connect the AND and OR gates together. Note that the wire that feeds the NOT gate is really wire `out`, so you do not necessarily need to declare a third wire here. Notice how wires are driven by exactly one source (output of a gate), but can feed multiple inputs.\n\n// The circuit is composed of two layers. The first layer, counting from the input, is two AND gates: one whose input is connected to a and b, and the second is connected to c and d. The second layer there is an OR gate to OR the two AND outputs, connected the output 'out'. Additionally, there is an inverted output 'out_n'..\nGenerated Code: module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out,\n\toutput out_n );\n\n\n\n// Declare the parameters.\nparameter int_a = 0;\nparameter int_b = 0;\nparameter int_c = 0;\nparameter int_d = 0;\nparameter int_e = 0;\nparameter int_f = 0;\nparameter int_g = 0;\nparameter int_h = 0;\nparameter int_i = 0;\nparameter int_j = 0;\nparameter int_k = 0;\nparameter int_l = 0;\nparameter int_m = 0;\nparameter int_n = 0;\nparameter int_o = 0;\nparameter int_p = 0;\nparameter int_q = 0;\nparameter int_r = 0;\nparameter int_s = 0;\nparameter int_t = 0;\nparameter int_u = 0;\nparameter int_v = 0;\nparameter int_w = 0;\nparameter int_x = 0;\nparameter int_y = 0;\nparameter int_z = 0;\nparameter int_1 = 0;\nparameter int_2 = 0;\nparameter int_3 = 0;\nparameter int_4 = 0;\nparameter int_5 = 0;\nparameter int_6 = 0;\nparameter int_7 = 0;\nparameter int_8 = 0;\nparameter int_9 = 0;\nparameter int_10 = 0;\nparameter int_11 = 0;\nparameter int_12 = 0;\nparameter int_13 = 0;\nparameter int_14 = 0;\nparameter int_15 = 0;\nparameter int_16 = 0;\nparameter int_17 = 0;\nparameter int_18 = 0;\nparameter int_19 = 0;\nparameter int_20 = 0;\nparameter int_21 = 0;\nparameter int_22 = 0;\nparameter int_23 = 0;\nparameter int_24 = 0;\nparameter int_25 = 0;\nparameter int_26 = 0;\nparameter int_27 = 0;\nparameter int_28 = 0;\nparameter int_29 = 0;\nparameter int_30 = 0;\nparameter int_31 = 0;\nparameter int_32 = 0;\nparameter int_33 = 0;\nparameter int_34 = 0;\nparameter int_35 = 0;\nparameter int_36 = 0;\nparameter int_37 = 0;\nparameter int_38 = 0;\nparameter int_39 = 0;\nparameter int_40 = 0;\nparameter int_41 = 0;\nparameter int_42 = 0;\nparameter int_43 = 0;\nparameter int_44 = 0;\nparameter int_45 = 0;\nparameter int_46 = 0;\nparameter int_47 = 0;\nparameter int_48 = 0;\nparameter int_49 = 0;\nparameter int_50 = 0;\nparameter int_51 = 0;\nparameter int_52 = 0;\nparameter int_53 = 0;\nparameter int_54 = 0;\nparameter int_55 = 0;\nparameter int_56 = 0;\nparameter int_57 = 0;\nparameter int_58 = 0;\nparameter int_59 = 0;\nparameter int_60 = 0;\nparameter int_61 = 0;\nparameter int_62 = 0;\nparameter int_63 = 0;\nparameter int_64 = 0;\nparameter int_65 = 0;\nparameter int_66 = 0;\nparameter int_67 = 0;\nparameter int_68 = 0;\nparameter int_69 = 0;\nparameter int_70 = 0;\nparameter int_71 = 0;\nparameter int_72 = 0;\nparameter int_73 = 0;\nparameter int_74 = 0;\nparameter int_75 = 0;\nparameter int_76 = 0;\nparameter int_77 = 0;\nparameter int_78 = 0;\nparameter int_79 = 0;\nparameter int_80 = 0;\nparameter int_81 = 0;\nparameter int_82 = 0;\nparameter int_83 = 0;\nparameter int_84 = 0;\nparameter int_85 = 0;\nparameter int_86 = 0;\nparameter int_87 = 0;\nparameter int_88 = 0;\nparameter int_89 = 0;\nparameter int_90 = 0;\nparameter int_91 = 0;\nparameter int_92 = 0;\nparameter int_93 = 0;\nparameter int_94 = 0;\nparameter int_95 = 0;\nparameter int_96 = 0;\nparameter int_97 = 0;\nparameter int_98 = 0;\nparameter int_99 = 0;\nparameter int_100 = 0;\nparameter int_101 = 0;\nparameter int_102 = 0;\nparameter int_103 = 0;\nparameter int_104 = 0;\nparameter int_105 = 0;\nparameter int_106 = 0;\nparameter int_107 = 0;\nparameter int_108 = 0;\nparameter int_109 = 0;\nparameter int_110 = 0;\nparameter int_111 = 0;\nparameter int_112 = 0;\nparameter int_113 = 0;\nparameter int_114 = 0;\nparameter int_115 = 0;\nparameter int_116 = 0;\nparameter int_117 = 0;\nparameter int_118 = 0;\nparameter int_119 = 0;\nparameter int_120 = 0;\nparameter int_121 = 0;\nparameter int_122 = 0;\nparameter int_123 = 0;\nparameter int_124 = 0;\nparameter int_125 = 0;\nparameter int_126 = 0;\nparameter int_127 = 0;\nparameter int_128 = 0;\nparameter int_129 = 0;\nparameter int_130 = 0;\nparameter int_131 = 0;\nparameter int_132 = 0;\nparameter int_133 = 0;\nparameter int_134 = 0;\nparameter int_135 = 0;\nparameter int_136 = 0;\nparameter int_137 = 0;\nparameter int_138 = 0;\nparameter int_139 = 0;\nparameter int_140 = 0;\nparameter int_141 = 0;\nparameter int_142 = 0;\nparameter int_143 = 0;\nparameter int_144 = 0;\nparameter int_145 = 0;\nparameter int_146 = 0;\nparameter int_147 = 0;\nparameter int_148 = 0;\nparameter int_149 = 0;\nparameter int_150 = 0;\nparameter int_151 = 0;\nparameter int_152 = 0;\nparameter int_153 = 0;\nparameter int_154 = 0;\nparameter int_155 = 0;\nparameter int_156 = 0;\nparameter int_157 = 0;\nparameter int_158 = 0;\nparameter int_159 = 0;\nparameter int_160 = 0;\nparameter int_161 = 0;\nparameter int_162 = 0;\nparameter int_163 = 0;\nparameter int_164 = 0;\nparameter int_165 = 0;\nparameter int_166 = 0;\nparameter int_167 = 0;\nparameter int_168 = 0;\nparameter int_169 = 0;\nparameter int_170 = 0;\nparameter int_171 = 0;\nparameter int_172 = 0;\nparameter int_173 = 0;\nparameter int_174 = 0;\nparameter int_175 = 0;\nparameter int_176 = 0;\nparameter int_177 = 0;\nparameter"}
{"task_id": "dff", "completion": "Task: Write Verilog program for the given description.\nDescription: Create a single D flip-flop..\nGenerated Code: module top_module(\n\tinput clk,\n\tinput d,\n\toutput reg q);\n\n\nalways @(posedge clk) begin\nq <= d;\nend\nendmodule"}
{"task_id": "ece241_2013_q12", "completion": "Task: Write Verilog program for the given description.\nDescription: In this question, you will design a circuit for an 8x1 memory, where writing to the memory is accomplished by shifting-in bits, and reading is \"random access\", as in a typical RAM. You will then use the circuit to realize a 3-input logic function. First, create an 8-bit shift register with 8 D-type flip-flops. Label the flip-flop outputs from Q[0]...Q[7]. The shift register input should be called S, which feeds the input of Q[0] (MSB is shifted in first). The enable input is synchronous active high and controls whether to shift. Extend the circuit to have 3 additional inputs A,B,C and an output Z. The circuit's behaviour should be as follows: when ABC is 000, Z=Q[0], when ABC is 001, Z=Q[1], and so on. Your circuit should contain ONLY the 8-bit shift register, and multiplexers. .\nGenerated Code: module top_module (\n\tinput clk,\n\tinput enable,\n\tinput S,\n\tinput A,\n\tinput B,\n\tinput C,\n\toutput reg Z\n);\n\n\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//=======================================================================================\n//================================================================"}
{"task_id": "thermostat", "completion": "Task: Write Verilog program for the given description.\nDescription: A heating/cooling thermostat controls both a heater (during winter) and an air conditioner (during summer). Implement a circuit that will turn on and off the heater, air conditioning, and blower fan as appropriate. The thermostat can be in one of two modes: heating (mode = 1) and cooling (mode = 0). In heating mode, turn the heater on when it is too cold (too_cold = 1) but do not use the air conditioner. In cooling mode, turn the air conditioner on when it is too hot (too_hot = 1), but do not turn on the heater. When the heater or air conditioner are on, also turn on the fan to circulate the air. In addition, the user can also request the fan to turn on (fan_on = 1), even if the heater and air conditioner are off..\nGenerated Code: module top_module(\n\tinput mode,\n\tinput too_cold, \n\tinput too_hot,\n\tinput fan_on,\n\toutput heater,\n\toutput aircon,\n\toutput fan\n);\n\n\n//*****************************************************************************\n// This file implements the thermal control logic.\n//*****************************************************************************\n\n///////////////////////////////////////////////////////////////////////////////\n// Local Variables\n// LocalTables\n// End of Local Tables\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// External Declarations\n// End of Extern Declarations\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Internal Declarations\n// End of Internal Declarations\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// User Defined Functions\n// End of User Defined Functions\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Constants\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Constructors\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Public Methods\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Protected member functions\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Private member functions\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Functions implemented by this module\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Class implemented by this module\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Interface implemented by this module\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Parameter declarations\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Interfaces implemented by this module\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Function implemented by this module\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Hidden functions implemented by this module\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Public functions\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Type implemented by this module\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Inner interfaces implemented by this module\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Module body\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Global variables\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Constant declarations\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Constant declarations\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Static declarations\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Static declarations\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Parameter declarations\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Parameter declarations\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Hidden function declarations\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Hidden function declarations\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Static function declarations\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Static function declarations\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Dynamic function declarations\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Dynamic function declarations\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Parameter declarations\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Parameter declarations\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Hidden function declarations\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Static function declarations\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Static function declarations\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Parameter declarations\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Parameter declarations\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Hidden function declarations\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Parameter declarations\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Return type\n///////////////////////////////////////////////////////////////////////////////\n\n////////////////////////////////"}
{"task_id": "ece241_2013_q2", "completion": "Task: Write Verilog program for the given description.\nDescription: A single-output digital system with four inputs (a,b,c,d) generates a logic-1 when 2, 7, or 15 appears on the inputs, and a logic-0 when 0, 1, 4, 5, 6, 9, 10, 13, or 14 appears. The input conditions for the numbers 3, 8, 11, and 12 never occur in this system. For example, 7 corresponds to a,b,c,d being set to 0,1,1,1, respectively. Determine the output out_sop in minimum sum-of-products form, and the output out_pos in minimum product-of-sums form.\n\n.\nGenerated Code: module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out_sop,\n\toutput out_pos\n);\n\n\nassign out_sop = a + b + c + d;\nassign out_pos = 0;\nendmodule"}
{"task_id": "lfsr32", "completion": "Task: Write Verilog program for the given description.\nDescription: A linear feedback shift register is a shift register usually with a few XOR gates to produce the next state of the shift register. A Galois LFSR is one particular arrangement where bit positions with a \"tap\" are XORed with the output bit to produce each bit's next value, while bit positions without a tap shift. Build a 32-bit Galois LFSR with taps at bit positions 32, 22, 2, and 1. Reset should be active high synchronous, and should reset the output q to 32'h1..\nGenerated Code: module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [31:0] q);\n\n\nalways @(posedge clk)\nif(reset)\nq[31:0] <= 32'h1;\nelse\nq[31:0] <= q[31:0];\nendmodule"}
{"task_id": "7420", "completion": "Task: Write Verilog program for the given description.\nDescription: The 7400-series integrated circuits are a series of digital chips with a few gates each. The 7420 is a chip with two 4-input NAND gates.\n\n// Create a module with the same functionality as the 7420 chip. It has 8 inputs and 2 outputs..\nGenerated Code: module top_module(\n\tinput p1a, \n\tinput p1b, \n\tinput p1c, \n\tinput p1d, \n\toutput p1y, \n\tinput p2a, \n\tinput p2b, \n\tinput p2c, \n\tinput p2d, \n\toutput p2y\n);\n\n\nassign p1a = 1'b1;\nassign p1b = 1'b1;\nassign p1c = 1'b1;\nassign p1d = 1'b1;\nassign p1y = 1'b1;\nassign p2a = 1'b1;\nassign p2b = 1'b1;\nassign p2c = 1'b1;\nassign p2d = 1'b1;\nassign p2y = 1'b1;\nendmodule"}
{"task_id": "popcount255", "completion": "Task: Write Verilog program for the given description.\nDescription: A \"population count\" circuit counts the number of '1's in an input vector. Build a population count circuit for a 255-bit input vector..\nGenerated Code: module top_module (\n\tinput [254:0] in,\n\toutput reg [7:0] out\n);\n\n\nparameter population_count_width = 1;\nparameter population_count_bits = 8;\nparameter population_count_max_value = 255;\nparameter population_count_min_value = 0;\nparameter population_count_increment = 1;\nparameter population_count_decrement = -1;\nparameter population_count_round_up = 1;\nparameter population_count_round_down = -1;\nparameter population_count_expand = 1;\nparameter population_count_subtract = 1;\nparameter population_count_multiply = 1;\nparameter population_count_divide = 1;\nparameter population_count_add = 1;\nparameter population_count_subtract = 1;\nparameter population_count_mul = 1;\nparameter population_count_divide = 1;\nparameter population_count_add = 1;\nparameter population_count_subtract = 1;\nparameter population_count_mul = 1;\nparameter population_count_divide = 1;\nparameter population_count_add = 1;\nparameter population_count_subtract = 1;\nparameter population_count_mul = 1;\nparameter population_count_divide = 1;\nparameter population_count_add = 1;\nparameter population_count_subtract = 1;\nparameter population_count_mul = 1;\nparameter population_count_divide = 1;\nparameter population_count_add = 1;\nparameter population_count_subtract = 1;\nparameter population_count_mul = 1;\nparameter population_count_divide = 1;\nparameter population_count_add = 1;\nparameter population_count_subtract = 1;\nparameter population_count_mul = 1;\nparameter population_count_divide = 1;\nparameter population_count_add = 1;\nparameter population_count_subtract = 1;\nparameter population_count_mul = 1;\nparameter population_count_divide = 1;\nparameter population_count_add = 1;\nparameter population_count_subtract = 1;\nparameter population_count_mul = 1;\nparameter population_count_divide = 1;\nparameter population_count_add = 1;\nparameter population_count_subtract = 1;\nparameter population_count_mul = 1;\nparameter population_count_divide = 1;\nparameter population_count_add = 1;\nparameter population_count_subtract = 1;\nparameter population_count_mul = 1;\nparameter population_count_divide = 1;\nparameter population_count_add = 1;\nparameter population_count_subtract = 1;\nparameter population_count_mul = 1;\nparameter population_count_divide = 1;\nparameter population_count_add = 1;\nparameter population_count_subtract = 1;\nparameter population_count_mul = 1;\nparameter population_count_divide = 1;\nparameter population_count_add = 1;\nparameter population_count_subtract = 1;\nparameter population_count_mul = 1;\nparameter population_count_divide = 1;\nparameter population_count_add = 1;\nparameter population_count_subtract = 1;\nparameter population_count_mul = 1;\nparameter population_count_divide = 1;\nparameter population_count_add = 1;\nparameter population_count_subtract = 1;\nparameter population_count_mul = 1;\nparameter population_count_divide = 1;\nparameter population_count_add = 1;\nparameter population_count_subtract = 1;\nparameter population_count_mul = 1;\nparameter population_count_divide = 1;\nparameter population_count_add = 1;\nparameter population_count_subtract = 1;\nparameter population_count_mul = 1;\nparameter population_count_divide = 1;\nparameter population_count_add = 1;\nparameter population_count_subtract = 1;\nparameter population_count_mul = 1;\nparameter population_count_divide = 1;\nparameter population_count_add = 1;\nparameter population_count_subtract = 1;\nparameter population_count_mul = 1;\nparameter population_count_divide = 1;\nparameter population_count_add = 1;\nparameter population_count_subtract = 1;\nparameter population_count_mul = 1;\nparameter population_count_divide = 1;\nparameter population_count_add = 1;\nparameter population_count_subtract = 1;\nparameter population_count_mul = 1;\nparameter population_count_divide = 1;\nparameter population_count_add = 1;\nparameter population_count_subtract = 1;\nparameter population_count_mul = 1;\nparameter population_count_divide = 1;\nparameter population_count_add = 1;\nparameter population_count_subtract = 1;\nparameter population_count_mul = 1;\nparameter population_count_divide = 1;\nparameter population_count_add = 1;\nparameter population_count_subtract = 1;\nparameter population_count_mul = 1;\nparameter population_count_divide = 1;\nparameter population_count_add = 1;\nparameter population_count_subtract = 1;\nparameter population_count_mul = 1;\nparameter population_count_divide = 1;\nparameter population_count_add = 1;\nparameter population_count_subtract = 1;\nparameter population_count_mul = 1;\nparameter population_count_divide = 1;\nparameter population_count_add = 1;\nparameter population_count_subtract = 1;\nparameter population_count_mul = 1;\nparameter population_count_divide = 1;\nparameter population_count_add = 1;\nparameter population_count_subtract = 1;\nparameter population_count_mul = 1;\nparameter population_count_divide = 1;\nparameter population_count_add = 1;\nparameter population_count_subtract = 1;\nparameter population_count_mul = 1;\nparameter population_count_divide = 1;\nparameter population_count_add = 1;\nparameter population_count_subtract = 1;\nparameter population_count_mul = 1;\nparameter population_count_divide = 1;\nparameter population_count_add = 1;\nparameter population_count_subtract = 1;\nparameter population_count_mul = 1;\nparameter population_count_divide = 1;\nparameter population_count_add = 1;\nparameter population_count_subtract = 1;\nparameter population_count_mul = 1;\nparameter population_count_divide = 1;\nparameter population_count_add = 1;\nparameter population_count_subtract = 1;\nparameter population_count_mul = 1;\nparameter population_count_divide = 1;\nparameter population_count_add = 1;\nparameter population_count_subtract = 1;\nparameter population_count_mul = 1;\nparameter population_count_divide = 1;\nparameter population_count_add = 1;\nparameter population_count_subtract = 1;\nparameter population_count_mul = 1;\nparameter population_count_divide = 1;\nparameter population_count_add = 1;\nparameter population_count_subtract = 1;\nparameter population_count_mul = 1;\nparameter population_count_divide = 1;\nparameter population_count_add = 1;\nparameter population_count_subtract = 1;\nparameter population_count_mul = 1;\nparameter population_count_divide = 1;\nparameter population_count_add = 1;\nparameter population_count_subtract = 1;\nparameter population_count_mul = 1;\nparameter population_count"}
{"task_id": "gatesv", "completion": "Task: Write Verilog program for the given description.\nDescription: You are given a four-bit input vector in[3:0]. We want to know some relationships between each bit and its neighbour: \n// (1) out_both: Each bit of this output vector should indicate whether both the corresponding input bit and its neighbour to the left (higher index) are '1'. For example, out_both[2] should indicate if in[2] and in[3] are both 1. Since in[3] has no neighbour to the left, the answer is obvious so we don't need to know out_both[3]. \n// (2) out_any: Each bit of this output vector should indicate whether any of the corresponding input bit and its neighbour to the right are '1'. For example, out_any[2] should indicate if either in[2] or in[1] are 1. Since in[0] has no neighbour to the right, the answer is obvious so we don't need to know out_any[0]. \n// (3) out_different: Each bit of this output vector should indicate whether the corresponding input bit is different from its neighbour to the left. For example, out_different[2] should indicate if in[2] is different from in[3]. For this part, treat the vector as wrapping around, so in[3]'s neighbour to the left is in[0]..\nGenerated Code: module top_module (\n\tinput [3:0] in,\n\toutput [2:0] out_both,\n\toutput [3:1] out_any,\n\toutput [3:0] out_different\n);\n\n\nassign out_both[3] = in[3];\nassign out_both[2] = in[2];\nassign out_both[1] = in[1];\nassign out_both[0] = in[0];\n\nassign out_any[3] = in[3];\nassign out_any[2] = in[2];\nassign out_any[1] = in[1];\nassign out_any[0] = in[0];\n\nassign out_different[3] = in[3];\nassign out_different[2] = in[2];\nassign out_different[1] = in[1];\nassign out_different[0] = in[0];\n\nendmodule"}
{"task_id": "circuit6", "completion": "Task: Write Verilog program for the given description.\nDescription: This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a                  q            \n// 0ns             x                  x            \n// 5ns             x                  x            \n// 10ns            x                  x            \n// 15ns            0               1232            \n// 20ns            1               aee0            \n// 25ns            2               27d4            \n// 30ns            3               5a0e            \n// 35ns            4               2066            \n// 40ns            5               64ce            \n// 45ns            6               c526            \n// 50ns            7               2f19            \n// 55ns            0               1232            \n// 60ns            1               aee0            \n// 65ns            2               27d4            \n// 70ns            4               2066            \n// 75ns            1               aee0            \n// 80ns            1               aee0            \n// 85ns            3               5a0e            \n// 90ns            5               64ce            .\nGenerated Code: module top_module (\n\tinput [2:0] a, \n\toutput reg [15:0] q\n);\n\n\nreg [15:0] result;\n\ninitial begin\nresult = 16'h0000;\nend\n\nalways @(a) begin\nif (a == 1) begin\nresult = 16'h0001;\nend\nelse if (a == 2) begin\nresult = 16'h0002;\nend\nelse if (a == 3) begin\nresult = 16'h0003;\nend\nelse if (a == 4) begin\nresult = 16'h0004;\nend\nelse if (a == 5) begin\nresult = 16'h0005;\nend\nelse if (a == 6) begin\nresult = 16'h0006;\nend\nelse if (a == 7) begin\nresult = 16'h0007;\nend\nelse if (a == 8) begin\nresult = 16'h0008;\nend\nelse if (a == 9) begin\nresult = 16'h0009;\nend\nelse if (a == 10) begin\nresult = 16'h000a;\nend\nelse if (a == 11) begin\nresult = 16'h000b;\nend\nelse if (a == 12) begin\nresult = 16'h000c;\nend\nelse if (a == 13) begin\nresult = 16'h000d;\nend\nelse if (a == 14) begin\nresult = 16'h000e;\nend\nelse if (a == 15) begin\nresult = 16'h000f;\nend\nelse if (a == 16) begin\nresult = 16'h0010;\nend\nelse if (a == 17) begin\nresult = 16'h0011;\nend\nelse if (a == 18) begin\nresult = 16'h0012;\nend\nelse if (a == 19) begin\nresult = 16'h0013;\nend\nelse if (a == 20) begin\nresult = 16'h0014;\nend\nelse if (a == 21) begin\nresult = 16'h0015;\nend\nelse if (a == 22) begin\nresult = 16'h0016;\nend\nelse if (a == 23) begin\nresult = 16'h0017;\nend\nelse if (a == 24) begin\nresult = 16'h0018;\nend\nelse if (a == 25) begin\nresult = 16'h0019;\nend\nelse if (a == 26) begin\nresult = 16'h001a;\nend\nelse if (a == 27) begin\nresult = 16'h001b;\nend\nelse if (a == 28) begin\nresult = 16'h001c;\nend\nelse if (a == 29) begin\nresult = 16'h001d;\nend\nelse if (a == 30) begin\nresult = 16'h001e;\nend\nelse if (a == 31) begin\nresult = 16'h001f;\nend\nelse if (a == 32) begin\nresult = 16'h0020;\nend\nelse if (a == 33) begin\nresult = 16'h0021;\nend\nelse if (a == 34) begin\nresult = 16'h0022;\nend\nelse if (a == 35) begin\nresult = 16'h0023;\nend\nelse if (a == 36) begin\nresult = 16'h0024;\nend\nelse if (a == 37) begin\nresult = 16'h0025;\nend\nelse if (a == 38) begin\nresult = 16'h0026;\nend\nelse if (a == 39) begin\nresult = 16'h0027;\nend\nelse if (a == 40) begin\nresult = 16'h0028;\nend\nelse if (a == 41) begin\nresult = 16'h0029;\nend\nelse if (a == 42) begin\nresult = 16'h002a;\nend\nelse if (a == 43) begin\nresult = 16'h002b;\nend\nelse if (a == 44) begin\nresult = 16'h002c;\nend\nelse if (a == 45) begin\nresult = 16'h002d;\nend\nelse if (a == 46) begin\nresult = 16'h002e;\nend\nelse if (a == 47) begin\nresult = 16'h002f;\nend\nelse if (a == 48) begin\nresult = 16'h0030;\nend\nelse if (a == 49) begin\nresult = 16'h0031;\nend\nelse if (a == 50) begin\nresult = 16'h0032;\nend\nelse if (a == 51) begin\nresult = 16'h0033;\nend\nelse if (a == 52) begin\nresult = 16'h0034;\nend\nelse if (a == 53) begin\nresult = 16'h0035;\nend\nelse if (a == 54) begin\nresult = 16'h0036;\nend\nelse if (a == 55) begin\nresult = 16'h0037;\nend\nelse if (a == 56) begin\nresult = 16'h0038;\nend\nelse if (a == 57) begin\nresult = 16'h0039;\nend\nelse if (a == 58) begin\nresult = 16'h003a;\nend\nelse if (a == 59) begin\nresult = 16'h003b;\nend\nelse if (a == 60) begin\nresult = 16'h003c;\nend\nelse if (a == 61) begin\nresult = 16'h003d;\nend\nelse if (a == 62) begin\nresult = 16'h003e;\nend\nelse if (a == 63) begin\nresult = 16'h003f;\nend\nelse if (a == 64) begin\nresult = 16'h0040;\nend\nelse if (a == 65) begin\nresult = 16'h0041;\nend\nelse if (a == 66) begin\nresult = 16'h0042;\nend\nelse if (a == 67) begin\nresult = 16'h0043;\nend\nelse if (a == 68) begin\nresult = 16'h0044;\nend\nelse if (a == 69) begin\nresult = 16'h0045;\nend\nelse if (a == 70) begin\nresult = 16'h0046;\nend\nelse if (a == 71) begin\nresult = 16'h0047;\nend\nelse if (a == 72) begin\nresult = 16'h0048;\nend\nelse if (a == 73) begin\nresult = 16'h0049;\nend\nelse if (a == 74) begin\nresult = 16'h004a;\nend\nelse if (a == 75) begin\nresult = 16'h004b;\nend\nelse if (a == 76) begin\nresult = 16'h004c;\nend\nelse if (a == 77) begin\nresult = 16'h004d;\nend\nelse if (a == 78) begin\nresult = 16'h004e;\nend\nelse if (a == 79) begin\nresult = 16'h004f;\nend\nelse if (a == 80) begin\nresult = 16'h0050;\nend\nelse if (a == 81) begin\nresult = 16'h0051;\nend\nelse if (a == 82) begin\nresult = 16'h0052;\nend\nelse if (a == 83) begin\nresult = 16'h0053;\nend\nelse if (a == 84) begin\nresult = 16'h0054;\nend\nelse if (a == 85) begin\nresult = 16'h0055;\nend\nelse if (a == 86) begin\nresult = 16'h0056;\nend\nelse if (a == 87) begin\nresult = 16'h0057;\nend\n"}
{"task_id": "countslow", "completion": "Task: Write Verilog program for the given description.\nDescription: Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is active high synchronous, and should reset the counter to 0. We want to be able to pause the counter rather than always incrementing every clock cycle, so the \"slowena\" input if high indicates when the counter should increment. .\nGenerated Code: module top_module(\n\tinput clk,\n\tinput slowena,\n\tinput reset,\n\toutput reg [3:0] q);\n\n\n\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//=========================================================================================\n//"}
{"task_id": "m2014_q4f", "completion": "Task: Write Verilog program for the given description.\nDescription: Implement the following circuit in Verilog. Two inputs (in1 and in2) go to an AND gate, but the in2 input to the AND gate has a bubble. The output of the AND gate is connected to 'out'..\nGenerated Code: module top_module (\n\tinput in1,\n\tinput in2,\n\toutput logic out\n);\n\n\nassign out = logic ? in1 : in2;\nendmodule"}
{"task_id": "m2014_q4h", "completion": "Task: Write Verilog program for the given description.\nDescription: The module assigns the output port to the same value as the input port combinationally..\nGenerated Code: module top_module(\n\tinput in,\n\toutput out);\n\n\nassign out = in;\nendmodule"}
{"task_id": "fsm1", "completion": "Task: Write Verilog program for the given description.\nDescription: Consider the follow Moore machine with the diagram described below:\n\n// B (1) --0--> A\n// B (1) --1--> B\n// A (0) --0--> B\n// A (0) --1--> A\n\n// Write Verilog implementing this state machine. It should asynchronously reset into state B if reset if high..\nGenerated Code: module top_module (\n\tinput clk,\n\tinput in,\n\tinput areset,\n\toutput out\n);\n\n\nassign out = in;\nassign out = areset;\n\nendmodule // top_module"}
{"task_id": "dualedge", "completion": "Task: Write Verilog program for the given description.\nDescription: A dual-edge triggered flip-flop is triggered on both edges of the clock. However, FPGAs don't have dual-edge triggered flip-flops, and always @(posedge clk or negedge clk) is not accepted as a legal sensitivity list. Build a circuit that functionally behaves like a dual-edge triggered flip-flop..\nGenerated Code: module top_module(\n\tinput clk,\n\tinput d,\n\toutput reg q);\n\n\nassign q = d;\nendmodule"}
{"task_id": "xnorgate", "completion": "Task: Write Verilog program for the given description.\nDescription: Create a module that implements an XNOR gate..\nGenerated Code: module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n\n\nassign out = (a !== 0 && b !== 0) ? 1'b1 : 1'b0;\nendmodule // top_module"}
{"task_id": "rotate100", "completion": "Task: Write Verilog program for the given description.\nDescription: Build a 100-bit left/right rotator, with synchronous load and left/right enable. A rotator shifts-in the shifted-out bit from the other end of the register, unlike a shifter that discards the shifted-out bit and shifts in a zero. If enabled, a rotator rotates the bits around and does not modify/discard them. \n// (1) load: Loads shift register with data[99:0] instead of rotating. Synchronous active high.\n// (2) ena[1:0]: Synchronous. Chooses whether and which direction to rotate: \n//     (a) 2'b01 rotates right by one bit, \n//     (b) 2'b10 rotates left by one bit, \n//     (c) 2'b00 and 2'b11 do not rotate. \n// (3) q: The contents of the rotator..\nGenerated Code: module top_module(\n\tinput clk,\n\tinput load,\n\tinput [1:0] ena,\n\tinput [99:0] data,\n\toutput reg [99:0] q);\n\n\nreg [99:0] q;\n\nalways @(posedge clk)\nif (ena[1:0] == 2'b00)\nq <= data[99:0];\nelse if (ena[1:0] == 2'b01)\nq <= q + 1'b1;\nelse if (ena[1:0] == 2'b10)\nq <= q + 1'b10;\nelse if (ena[1:0] == 2'b11)\nq <= q + 1'b11;\nendmodule"}
{"task_id": "review2015_count1k", "completion": "Task: Write Verilog program for the given description.\nDescription: Build a counter that counts from 0 to 999, inclusive, with a period of 1000 cycles. The reset input is active high synchronous, and should reset the counter to 0..\nGenerated Code: module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [9:0] q);\n\n\nalways @(posedge clk)\nif(reset)\nq <= 0;\nelse\nq <= q + 1;\nendmodule"}
{"task_id": "notgate", "completion": "Task: Write Verilog program for the given description.\nDescription: Create a module that implements a NOT gate..\nGenerated Code: module top_module(\n\tinput in,\n\toutput out\n);\n\n\nassign out = ~in;\nendmodule"}
{"task_id": "fsm_onehot", "completion": "Task: Write Verilog program for the given description.\nDescription: Given the follow state machine with 1 input and 2 outputs (the outputs are given as \"(out1, out2)\"):\n\n// S0 (0, 0) --0--> S0\n// S0 (0, 0) --1--> S1\n// S1 (0, 0) --0--> S0\n// S1 (0, 0) --1--> S2\n// S2 (0, 0) --0--> S0\n// S2 (0, 0) --1--> S3\n// S3 (0, 0) --0--> S0\n// S3 (0, 0) --1--> S4\n// S4 (0, 0) --0--> S0\n// S4 (0, 0) --1--> S5\n// S5 (0, 0) --0--> S8\n// S5 (0, 0) --1--> S6\n// S6 (0, 0) --0--> S9\n// S6 (0, 0) --1--> S7\n// S7 (0, 1) --0--> S0\n// S7 (0, 1) --1--> S7\n// S8 (1, 0) --0--> S0\n// S8 (1, 0) --1--> S1\n// S9 (1, 1) --0--> S0\n// S9 (1, 1) --1--> S1\n\n// Suppose this state machine uses one-hot encoding, where state[0] through state[9] correspond to the states S0 though S9, respectively. The outputs are zero unless otherwise specified.\n\n// Write Verilog implementing the state transition logic and output logic portions of the state machine (but not the state flip-flops). You are given the current state in state[9:0] and must produce next_state[9:0] and the two outputs. Derive the logic equations by inspection assuming a one-hot encoding..\nGenerated Code: module top_module (\n\tinput in,\n\tinput [9:0] state,\n\toutput [9:0] next_state,\n\toutput out1,\n\toutput out2);\n\n\nassign out1 = state[9];\nassign out2 = state[9:0];\nendmodule"}
{"task_id": "ece241_2013_q7", "completion": "Task: Write Verilog program for the given description.\nDescription: A JK flip-flop has the below truth table. Note: Qold is the output of the flip-flop before the positive clock edge.\n// J | K | Q\n// 0 | 0 | Qold\n// 0 | 1 | 0\n// 1 | 0 | 1\n// 1 | 1 | ~Qold.\nGenerated Code: module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\toutput reg Q\n);\n\n\nalways @(posedge clk) begin\nQ <= k;\nend\nendmodule"}
{"task_id": "popcount3", "completion": "Task: Write Verilog program for the given description.\nDescription: A \"population count\" circuit counts the number of '1's in an input vector. Build a population count circuit for a 3-bit input vector..\nGenerated Code: module top_module (\n\tinput [2:0] in,\n\toutput [1:0] out\n);\n\n\n// Declare inputs.\nwire [2:0] in;\nwire [1:0] out;\n\n// Declare outputs.\nwire [2:0] out;\n\n// Instantiate the Top module.\ntop top_instance (.in(in), .out(out));\n\nendmodule // top_module"}
{"task_id": "vector5", "completion": "Task: Write Verilog program for the given description.\nDescription: Given five 1-bit signals (a, b, c, d, and e), compute all 25 pairwise one-bit comparisons in the 25-bit output vector. The output should be 1 if the two bits being compared are equal. Example: out[24] = ~a ^ a; out[23] = ~a ^ b; out[22] = ~a ^ c; ... out[ 1] = ~e ^ d; out[ 0] = ~e ^ e..\nGenerated Code: module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\tinput e,\n\toutput [24:0] out\n);\n\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Global Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Global Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n\n//------------------------------------------------------------------------------\n// Internal Decl"}
{"task_id": "lemmings1", "completion": "Task: Write Verilog program for the given description.\nDescription: The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. Implement a Moore state machine with two states, two inputs, and one output (internal to the module) that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left..\nGenerated Code: module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\toutput walk_left,\n\toutput walk_right\n);\n\n\n//////////////////////////////////////////////////////////////////////////////\n// Declarations\n//////////////////////////////////////////////////////////////////////////////\nreg [1:0] state;\nreg [1:0] state2;\nreg [1:0] state3;\nreg [1:0] state4;\nreg [1:0] state5;\nreg [1:0] state6;\nreg [1:0] state7;\nreg [1:0] state8;\nreg [1:0] state9;\nreg [1:0] state10;\nreg [1:0] state11;\nreg [1:0] state12;\nreg [1:0] state13;\nreg [1:0] state14;\nreg [1:0] state15;\nreg [1:0] state16;\nreg [1:0] state17;\nreg [1:0] state18;\nreg [1:0] state19;\nreg [1:0] state20;\nreg [1:0] state21;\nreg [1:0] state22;\nreg [1:0] state23;\nreg [1:0] state24;\nreg [1:0] state25;\nreg [1:0] state26;\nreg [1:0] state27;\nreg [1:0] state28;\nreg [1:0] state29;\nreg [1:0] state30;\nreg [1:0] state31;\nreg [1:0] state32;\nreg [1:0] state33;\nreg [1:0] state34;\nreg [1:0] state35;\nreg [1:0] state36;\nreg [1:0] state37;\nreg [1:0] state38;\nreg [1:0] state39;\nreg [1:0] state40;\nreg [1:0] state41;\nreg [1:0] state42;\nreg [1:0] state43;\nreg [1:0] state44;\nreg [1:0] state45;\nreg [1:0] state46;\nreg [1:0] state47;\nreg [1:0] state48;\nreg [1:0] state49;\nreg [1:0] state50;\nreg [1:0] state51;\nreg [1:0] state52;\nreg [1:0] state53;\nreg [1:0] state54;\nreg [1:0] state55;\nreg [1:0] state56;\nreg [1:0] state57;\nreg [1:0] state58;\nreg [1:0] state59;\nreg [1:0] state60;\nreg [1:0] state61;\nreg [1:0] state62;\nreg [1:0] state63;\nreg [1:0] state64;\nreg [1:0] state65;\nreg [1:0] state66;\nreg [1:0] state67;\nreg [1:0] state68;\nreg [1:0] state69;\nreg [1:0] state70;\nreg [1:0] state71;\nreg [1:0] state72;\nreg [1:0] state73;\nreg [1:0] state74;\nreg [1:0] state75;\nreg [1:0] state76;\nreg [1:0] state77;\nreg [1:0] state78;\nreg [1:0] state79;\nreg [1:0] state80;\nreg [1:0] state81;\nreg [1:0] state82;\nreg [1:0] state83;\nreg [1:0] state84;\nreg [1:0] state85;\nreg [1:0] state86;\nreg [1:0] state87;\nreg [1:0] state88;\nreg [1:0] state89;\nreg [1:0] state90;\nreg [1:0] state91;\nreg [1:0] state92;\nreg [1:0] state93;\nreg [1:0] state94;\nreg [1:0] state95;\nreg [1:0] state96;\nreg [1:0] state97;\nreg [1:0] state98;\nreg [1:0] state99;\nreg [1:0] state100;\nreg [1:0] state101;\nreg [1:0] state102;\nreg [1:0] state103;\nreg [1:0] state104;\nreg [1:0] state105;\nreg [1:0] state106;\nreg [1:0] state107;\nreg [1:0] state108;\nreg [1:0] state109;\nreg [1:0] state110;\nreg [1:0] state111;\nreg [1:0] state112;\nreg [1:0] state113;\nreg [1:0] state114;\nreg [1:0] state115;\nreg [1:0] state116;\nreg [1:0] state117;\nreg [1:0] state118;\nreg [1:0] state119;\nreg [1:0] state120;\nreg [1:0] state121;\nreg [1:0] state122;\nreg [1:0] state123;\nreg [1:0] state124;\nreg [1:0] state125;\nreg [1:0] state126;\nreg [1:0] state127;\nreg [1:0] state128;\nreg [1:0] state129;\nreg [1:0] state130;\nreg [1:0] state131;\nreg [1:0] state132;\nreg [1:0] state133;\nreg [1:0] state134;\nreg [1:0] state135;\nreg [1:0] state136;\nreg [1:0] state137;\nreg [1:0] state138;\nreg [1:0] state139;\nreg [1:0] state140;\nreg [1:0] state141;\nreg [1:0] state142;\nreg [1:0] state143;\nreg [1:0] state144;\nreg [1:0] state145;\nreg [1:0] state146;\nreg [1:0] state147;\nreg [1:0] state148;\nreg [1:0] state149;\nreg [1:0] state150;\nreg [1:0] state151;\nreg [1:0] state152;\nreg [1:0] state153;\nreg [1:0] state154;\nreg [1:0] state155;\nreg [1:0] state156;\nreg [1:0] state157;\nreg [1:0] state158;\nreg [1:0] state159;\nreg [1:0] state160;\nreg [1:0] state161;\nreg [1:0] state162;\nreg [1:0] state163;\nreg [1:0] state164;\nreg [1:0] state165;\nreg [1:0] state166;\nreg [1:0] state167;\nreg [1:0] state168;\nreg [1:0] state169;\nreg [1:0] state170;\nreg [1:0] state171;\nreg [1:0] state172;\nreg [1:0] state173;\nreg [1:0] state174;\nreg [1:0] state175;\nreg [1:0] state176;\nreg [1:0] state177;\nreg [1:0] state"}
{"task_id": "circuit1", "completion": "Task: Write Verilog program for the given description.\nDescription: This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               q               \n// 0ns             0               0               0               \n// 5ns             0               0               0               \n// 10ns            0               0               0               \n// 15ns            0               0               0               \n// 20ns            0               0               0               \n// 25ns            0               1               0               \n// 30ns            0               1               0               \n// 35ns            1               0               0               \n// 40ns            1               0               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               0               \n// 60ns            0               0               0               \n// 65ns            0               1               0               \n// 70ns            0               1               0               \n// 75ns            1               0               0               \n// 80ns            1               0               0               \n// 85ns            1               1               1               \n// 90ns            1               1               1               \n.\nGenerated Code: module top_module (\n\tinput a, \n\tinput b, \n\toutput q\n);\n\n\n\nassign a = b;\nassign q = 1'b0;\nendmodule"}
{"task_id": "7458", "completion": "Task: Write Verilog program for the given description.\nDescription: The 7458 is a chip with four AND gates and two OR gates. Create a module in Verilog with the same functionality as the 7458 chip. It has 10 inputs and 2 outputs. You may choose to use an `assign` statement to drive each of the output wires, or you may choose to declare (four) wires for use as intermediate signals, where each internal wire is driven by the output of one of the AND gates.\n\n// In this circuit, p1y should be the OR of two 3-input AND gates: one that ANDs p1a, p1b, and p1c, and the second that ANDs p1d, p1e, and p1f. The output p2y is the OR of two 2-input AND gates: one that ANDs p2a and p2b, and the second that ANDs p2c and p2d..\nGenerated Code: module top_module(\n\tinput p1a, \n\tinput p1b, \n\tinput p1c, \n\tinput p1d,\n\tinput p1e,\n\tinput p1f,\n\toutput p1y, \n\tinput p2a, \n\tinput p2b, \n\tinput p2c, \n\tinput p2d, \n\toutput p2y\n);\n\n\n\ngenerate\nbegin\n$writen"}
{"task_id": "2014_q3c", "completion": "Task: Write Verilog program for the given description.\nDescription: Given the state-assigned table shown below, implement the logic functions Y[0] and z.\n// Present state y[2:0] | Next state Y[2:0] x=0, Next state Y[2:0] x=1 | Output z\n// 000 | 000, 001 | 0\n// 001 | 001, 100 | 0\n// 010 | 010, 001 | 0\n// 011 | 001, 010 | 1\n// 100 | 011, 100 | 1\n.\nGenerated Code: module top_module (\n\tinput clk,\n\tinput x,\n\tinput [2:0] y,\n\toutput reg Y0,\n\toutput reg z\n);\n\n\nalways @(posedge clk) begin\nY0 <= y[2:0];\nend\n\nalways @(posedge clk) begin\nif (x == 0) begin\nY0 <= y[2:0];\nend\nelse if (x == 1) begin\nY0 <= y[2:0];\nend\nelse if (x == 2) begin\nY0 <= y[2:0];\nend\nelse if (x == 3) begin\nY0 <= y[2:0];\nend\nelse if (x == 4) begin\nY0 <= y[2:0];\nend\nelse if (x == 5) begin\nY0 <= y[2:0];\nend\nelse if (x == 6) begin\nY0 <= y[2:0];\nend\nelse if (x == 7) begin\nY0 <= y[2:0];\nend\nelse if (x == 8) begin\nY0 <= y[2:0];\nend\nelse if (x == 9) begin\nY0 <= y[2:0];\nend\nelse if (x == 10) begin\nY0 <= y[2:0];\nend\nelse if (x == 11) begin\nY0 <= y[2:0];\nend\nelse if (x == 12) begin\nY0 <= y[2:0];\nend\nelse if (x == 13) begin\nY0 <= y[2:0];\nend\nelse if (x == 14) begin\nY0 <= y[2:0];\nend\nelse if (x == 15) begin\nY0 <= y[2:0];\nend\nelse if (x == 16) begin\nY0 <= y[2:0];\nend\nelse if (x == 17) begin\nY0 <= y[2:0];\nend\nelse if (x == 18) begin\nY0 <= y[2:0];\nend\nelse if (x == 19) begin\nY0 <= y[2:0];\nend\nelse if (x == 20) begin\nY0 <= y[2:0];\nend\nelse if (x == 21) begin\nY0 <= y[2:0];\nend\nelse if (x == 22) begin\nY0 <= y[2:0];\nend\nelse if (x == 23) begin\nY0 <= y[2:0];\nend\nelse if (x == 24) begin\nY0 <= y[2:0];\nend\nelse if (x == 25) begin\nY0 <= y[2:0];\nend\nelse if (x == 26) begin\nY0 <= y[2:0];\nend\nelse if (x == 27) begin\nY0 <= y[2:0];\nend\nelse if (x == 28) begin\nY0 <= y[2:0];\nend\nelse if (x == 29) begin\nY0 <= y[2:0];\nend\nelse if (x == 30) begin\nY0 <= y[2:0];\nend\nelse if (x == 31) begin\nY0 <= y[2:0];\nend\nelse if (x == 32) begin\nY0 <= y[2:0];\nend\nelse if (x == 33) begin\nY0 <= y[2:0];\nend\nelse if (x == 34) begin\nY0 <= y[2:0];\nend\nelse if (x == 35) begin\nY0 <= y[2:0];\nend\nelse if (x == 36) begin\nY0 <= y[2:0];\nend\nelse if (x == 37) begin\nY0 <= y[2:0];\nend\nelse if (x == 38) begin\nY0 <= y[2:0];\nend\nelse if (x == 39) begin\nY0 <= y[2:0];\nend\nelse if (x == 40) begin\nY0 <= y[2:0];\nend\nelse if (x == 41) begin\nY0 <= y[2:0];\nend\nelse if (x == 42) begin\nY0 <= y[2:0];\nend\nelse if (x == 43) begin\nY0 <= y[2:0];\nend\nelse if (x == 44) begin\nY0 <= y[2:0];\nend\nelse if (x == 45) begin\nY0 <= y[2:0];\nend\nelse if (x == 46) begin\nY0 <= y[2:0];\nend\nelse if (x == 47) begin\nY0 <= y[2:0];\nend\nelse if (x == 48) begin\nY0 <= y[2:0];\nend\nelse if (x == 49) begin\nY0 <= y[2:0];\nend\nelse if (x == 50) begin\nY0 <= y[2:0];\nend\nelse if (x == 51) begin\nY0 <= y[2:0];\nend\nelse if (x == 52) begin\nY0 <= y[2:0];\nend\nelse if (x == 53) begin\nY0 <= y[2:0];\nend\nelse if (x == 54) begin\nY0 <= y[2:0];\nend\nelse if (x == 55) begin\nY0 <= y[2:0];\nend\nelse if (x == 56) begin\nY0 <= y[2:0];\nend\nelse if (x == 57) begin\nY0 <= y[2:0];\nend\nelse if (x == 58) begin\nY0 <= y[2:0];\nend\nelse if (x == 59) begin\nY0 <= y[2:0];\nend\nelse if (x == 60) begin\nY0 <= y[2:0];\nend\nelse if (x == 61) begin\nY0 <= y[2:0];\nend\nelse if (x == 62) begin\nY0 <= y[2:0];\nend\nelse if (x == 63) begin\nY0 <= y[2:0];\nend\nelse if (x == 64) begin\nY0 <= y[2:0];\nend\nelse if (x == 65) begin\nY0 <= y[2:0];\nend\nelse if (x == 66) begin\nY0 <= y[2:0];\nend\nelse if (x == 67) begin\nY0 <= y[2:0];\nend\nelse if (x == 68) begin\nY0 <= y[2:0];\nend\nelse if (x == 69) begin\nY0 <= y[2:0];\nend\nelse if (x == 70) begin\nY0 <= y[2:0];\nend\nelse if (x == 71) begin\nY0 <= y[2:0];\nend\nelse if (x == 72) begin\nY0 <= y[2:0];\nend\nelse if (x == 73) begin\nY0 <= y[2:0];\nend\nelse if (x == 74) begin\nY0 <= y[2:0];\nend\nelse if (x == 75) begin\nY0 <= y[2:0];\nend\nelse if (x == 76) begin\nY0 <= y[2:0];\nend\nelse if (x == 77) begin\nY0 <= y[2:0];\nend\nelse if (x == 78) begin\nY0 <= y[2:0];\nend\nelse if (x == 79) begin\nY0 <= y[2:0];\nend\nelse if (x == 80) begin\nY0 <= y[2:0];\nend\nelse if (x == 81) begin\nY0 <= y[2:0];\nend\nelse if (x == 82) begin\nY0 <= y[2:0];\nend\nelse if (x == 83) begin\nY0 <= y[2:0];\nend\nelse if (x == 84) begin\nY0 <= y[2:0];\nend\nelse if (x == 85) begin\nY0 <= y[2:0];\nend\nelse if (x == 86) begin\nY0 <= y[2:0];\nend\nelse if (x == 87) begin\nY0 <="}
{"task_id": "m2014_q4e", "completion": "Task: Write Verilog program for the given description.\nDescription: Implement a 2-input NOR gate..\nGenerated Code: module top_module (\n\tinput in1,\n\tinput in2,\n\toutput logic out\n);\n\n\n\nlogic [1:0] out;\n\nalways @(in1 or in2) begin\nif (in1)\nout = in2;\nelse\nout = in1;\nend\n\nendmodule // top_module"}
{"task_id": "wire4", "completion": "Task: Write Verilog program for the given description.\nDescription: Create a module with 3 inputs and 4 outputs that behaves like wires that makes these connections: a -> w\n// ; b -> x; b -> y; c -> z..\nGenerated Code: module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\toutput w,\n\toutput x,\n\toutput y,\n\toutput z  );\n\n\nassign w = a + b + c;\nassign x = a + b + c;\nassign y = a + b + c;\nassign z = a + b + c;\nendmodule"}
{"task_id": "m2014_q4b", "completion": "Task: Write Verilog program for the given description.\nDescription: Implement a D flip flop, positive edge triggered, with an asynchronous reset \"ar\"..\nGenerated Code: module top_module (\n\tinput clk,\n\tinput d,\n\tinput ar,\n\toutput logic q\n);\n\n\n\nlogic [1:0] dflipflop;\nlogic [1:0] arflipflop;\nlogic [1:0] arflipflop2;\nlogic [1:0] arflipflop3;\nlogic [1:0] arflipflop4;\nlogic [1:0] arflipflop5;\nlogic [1:0] arflipflop6;\nlogic [1:0] arflipflop7;\nlogic [1:0] arflipflop8;\nlogic [1:0] arflipflop9;\nlogic [1:0] arflipflop10;\nlogic [1:0] arflipflop11;\nlogic [1:0] arflipflop12;\nlogic [1:0] arflipflop13;\nlogic [1:0] arflipflop14;\nlogic [1:0] arflipflop15;\nlogic [1:0] arflipflop16;\nlogic [1:0] arflipflop17;\nlogic [1:0] arflipflop18;\nlogic [1:0] arflipflop19;\nlogic [1:0] arflipflop20;\nlogic [1:0] arflipflop21;\nlogic [1:0] arflipflop22;\nlogic [1:0] arflipflop23;\nlogic [1:0] arflipflop24;\nlogic [1:0] arflipflop25;\nlogic [1:0] arflipflop26;\nlogic [1:0] arflipflop27;\nlogic [1:0] arflipflop28;\nlogic [1:0] arflipflop29;\nlogic [1:0] arflipflop30;\nlogic [1:0] arflipflop31;\nlogic [1:0] arflipflop32;\nlogic [1:0] arflipflop33;\nlogic [1:0] arflipflop34;\nlogic [1:0] arflipflop35;\nlogic [1:0] arflipflop36;\nlogic [1:0] arflipflop37;\nlogic [1:0] arflipflop38;\nlogic [1:0] arflipflop39;\nlogic [1:0] arflipflop40;\nlogic [1:0] arflipflop41;\nlogic [1:0] arflipflop42;\nlogic [1:0] arflipflop43;\nlogic [1:0] arflipflop44;\nlogic [1:0] arflipflop45;\nlogic [1:0] arflipflop46;\nlogic [1:0] arflipflop47;\nlogic [1:0] arflipflop48;\nlogic [1:0] arflipflop49;\nlogic [1:0] arflipflop50;\nlogic [1:0] arflipflop51;\nlogic [1:0] arflipflop52;\nlogic [1:0] arflipflop53;\nlogic [1:0] arflipflop54;\nlogic [1:0] arflipflop55;\nlogic [1:0] arflipflop56;\nlogic [1:0] arflipflop57;\nlogic [1:0] arflipflop58;\nlogic [1:0] arflipflop59;\nlogic [1:0] arflipflop60;\nlogic [1:0] arflipflop61;\nlogic [1:0] arflipflop62;\nlogic [1:0] arflipflop63;\nlogic [1:0] arflipflop64;\nlogic [1:0] arflipflop65;\nlogic [1:0] arflipflop66;\nlogic [1:0] arflipflop67;\nlogic [1:0] arflipflop68;\nlogic [1:0] arflipflop69;\nlogic [1:0] arflipflop70;\nlogic [1:0] arflipflop71;\nlogic [1:0] arflipflop72;\nlogic [1:0] arflipflop73;\nlogic [1:0] arflipflop74;\nlogic [1:0] arflipflop75;\nlogic [1:0] arflipflop76;\nlogic [1:0] arflipflop77;\nlogic [1:0] arflipflop78;\nlogic [1:0] arflipflop79;\nlogic [1:0] arflipflop80;\nlogic [1:0] arflipflop81;\nlogic [1:0] arflipflop82;\nlogic [1:0] arflipflop83;\nlogic [1:0] arflipflop84;\nlogic [1:0] arflipflop85;\nlogic [1:0] arflipflop86;\nlogic [1:0] arflipflop87;\nlogic [1:0] arflipflop88;\nlogic [1:0] arflipflop89;\nlogic [1:0] arflipflop90;\nlogic [1:0] arflipflop91;\nlogic [1:0] arflipflop92;\nlogic [1:0] arflipflop93;\nlogic [1:0] arflipflop94;\nlogic [1:0] arflipflop95;\nlogic [1:0] arflipflop96;\nlogic [1:0] arflipflop97;\nlogic [1:0] arflipflop98;\nlogic [1:0] arflipflop99;\nlogic [1:0] arflipflop100;\nlogic [1:0] arflipflop101;\nlogic [1:0] arflipflop102;\nlogic [1:0] arflipflop103;\nlogic [1:0] arflipflop104;\nlogic [1:0] arflipflop105;\nlogic [1:0] arflipflop106;\nlogic [1:0] arflipflop107;\nlogic [1:0] arflipflop108;\nlogic [1:0] arflipflop109;\nlogic [1:0] arflipflop110;\nlogic [1:0] arflipflop111;\nlogic [1:0] arflipflop112;\nlogic [1:0] arflipflop113;\nlogic [1:0] arflipflop114;\nlogic [1:0] arflipflop115;\nlogic [1:0] arflipflop116;\nlogic [1:0] arflipflop117;\nlogic [1:0] arflipflop118;\nlogic [1:0] arflipflop119;\nlogic [1:0] arflipflop120;\nlogic [1:0] arflipflop121;\nlogic [1:0] arflipflop122;\nlogic [1:0] arflipflop123;\nlogic [1:0] arflipflop124;\nlogic [1:0] arflipflop125;\nlogic [1:0] arflipflop126;\nlogic [1:0] arflipflop127;\nlogic [1:0] arflipflop128;\nlogic [1:0] arflipflop129;\nlogic [1:0] arflipflop130;\nlogic [1:0] arflipflop131;\n"}
{"task_id": "always_case", "completion": "Task: Write Verilog program for the given description.\nDescription: Create a 6-to-1 multiplexer. When sel is between 0 and 5, choose the corresponding data input. Otherwise, output 0. The data inputs and outputs are all 4 bits wide..\nGenerated Code: module top_module (\n\tinput [2:0] sel,\n\tinput [3:0] data0,\n\tinput [3:0] data1,\n\tinput [3:0] data2,\n\tinput [3:0] data3,\n\tinput [3:0] data4,\n\tinput [3:0] data5,\n\toutput reg [3:0] out\n);\n\n\nalways @(sel)\ncase (sel)\n0:out = data0;\n1:out = data1;\n2:out = data2;\n3:out = data3;\n4:out = data4;\n5:out = data5;\n6:out = data6;\n7:out = data7;\n8:out = data8;\n9:out = data9;\n10:out = data10;\n11:out = data11;\n12:out = data12;\n13:out = data13;\n14:out = data14;\n15:out = data15;\n16:out = data16;\n17:out = data17;\n18:out = data18;\n19:out = data19;\n20:out = data20;\n21:out = data21;\n22:out = data22;\n23:out = data23;\n24:out = data24;\n25:out = data25;\n26:out = data26;\n27:out = data27;\n28:out = data28;\n29:out = data29;\n30:out = data30;\n31:out = data31;\n32:out = data32;\n33:out = data33;\n34:out = data34;\n35:out = data35;\n36:out = data36;\n37:out = data37;\n38:out = data38;\n39:out = data39;\n40:out = data40;\n41:out = data41;\n42:out = data42;\n43:out = data43;\n44:out = data44;\n45:out = data45;\n46:out = data46;\n47:out = data47;\n48:out = data48;\n49:out = data49;\n50:out = data50;\n51:out = data51;\n52:out = data52;\n53:out = data53;\n54:out = data54;\n55:out = data55;\n56:out = data56;\n57:out = data57;\n58:out = data58;\n59:out = data59;\n60:out = data60;\n61:out = data61;\n62:out = data62;\n63:out = data63;\n64:out = data64;\n65:out = data65;\n66:out = data66;\n67:out = data67;\n68:out = data68;\n69:out = data69;\n70:out = data70;\n71:out = data71;\n72:out = data72;\n73:out = data73;\n74:out = data74;\n75:out = data75;\n76:out = data76;\n77:out = data77;\n78:out = data78;\n79:out = data79;\n80:out = data80;\n81:out = data81;\n82:out = data82;\n83:out = data83;\n84:out = data84;\n85:out = data85;\n86:out = data86;\n87:out = data87;\n88:out = data88;\n89:out = data89;\n90:out = data90;\n91:out = data91;\n92:out = data92;\n93:out = data93;\n94:out = data94;\n95:out = data95;\n96:out = data96;\n97:out = data97;\n98:out = data98;\n99:out = data99;\n100:out = data100;\n101:out = data101;\n102:out = data102;\n103:out = data103;\n104:out = data104;\n105:out = data105;\n106:out = data106;\n107:out = data107;\n108:out = data108;\n109:out = data109;\n110:out = data110;\n111:out = data111;\n112:out = data112;\n113:out = data113;\n114:out = data114;\n115:out = data115;\n116:out = data116;\n117:out = data117;\n118:out = data118;\n119:out = data119;\n120:out = data120;\n121:out = data121;\n122:out = data122;\n123:out = data123;\n124:out = data124;\n125:out = data125;\n126:out = data126;\n127:out = data127;\n128:out = data128;\n129:out = data129;\n130:out = data130;\n131:out = data131;\n132:out = data132;\n133:out = data133;\n134:out = data134;\n135:out = data135;\n136:out = data136;\n137:out = data137;\n138:out = data138;\n139:out = data139;\n140:out = data140;\n141:out = data141;\n142:out = data142;\n143:out = data143;\n144:out = data144;\n145:out = data145;\n146:out = data146;\n147:out = data147;\n148:out = data148;\n149:out = data149;\n150:out = data150;\n151:out = data151;\n152:out = data152;\n153:out = data153;\n154:out = data154;\n155:out = data155;\n156:out = data156;\n157:out = data157;\n158:out = data158;\n159:out = data159;\n160:out = data160;\n161:out = data161;\n162:out = data162;\n163:out = data163;\n164:out = data164;\n165:out = data165;\n166:out = data166;\n167:out = data167;\n168:out = data168;\n169:out = data169;\n170:out = data170;\n171:out = data171;\n172:out = data172;\n173:out = data173;\n174:out = data174;\n175:out = data175;\n176:out = data176;\n177:out = data177;\n178:out = data178;\n179:out = data179;\n180:out = data180;\n181:out = data181;\n182:out = data182;\n183:out = data183;\n184:out = data184;\n185:out = data185;\n186:out = data186;\n187:out = data187;\n188:out = data188;\n189:out = data189;\n190:out = data190;\n191:out = data191;\n192:out = data192;\n193:out = data193;\n194:out = data194;\n195:out = data195;\n196:out = data196;\n197:out = data197;\n198:out = data198;\n199:out = data199;\n200:out = data200;\n201:out = data201;\n202:out = data202;\n203:out = data203;\n204:out = data204;\n205:out = data205;\n206:out = data206;\n207:out = data207;\n208:out = data208;\n209:out = data209;\n210:out = data210;\n211:out = data211;\n212:out = data212;\n213:out = data213;\n214:out = data214;\n215:out = data215;\n216:out = data216;\n217:out = data217;\n218:out = data218;\n219:out = data219;\n220:out = data220;\n221:out = data221;\n222:out = data222;\n223:out = data223;\n224:out = data224;\n225:out = data225;\n226:out = data226;\n227:out = data227;\n228:out = data228;\n229:out = data229;\n230:out = data230;\n231:out = data231;\n232:out = data232;\n233:out = data233;\n234:out = data234;"}
{"task_id": "timer", "completion": "Task: Write Verilog program for the given description.\nDescription: Implement a timer that counts down for a given number of clock cycles, then asserts a signal to indicate that the given duration has elapsed. A good way to implement this is with a down-counter that asserts an output signal when the count becomes 0. At each clock cycle: \n// (1) If load = 1, load the internal counter with the 10-bit data, the number of clock cycles the timer should count before timing out. The counter can be loaded at any time, including when it is still counting and has not yet reached 0. \n// (2) If load = 0, the internal counter should decrement by 1. The output signal tc (\"terminal count\") indicates whether the internal counter has reached 0. Once the internal counter has reached 0, it should stay 0 (stop counting) until the counter is loaded again.\n\n.\nGenerated Code: module top_module(\n\tinput clk, \n\tinput load, \n\tinput [9:0] data, \n\toutput tc\n);\n\n\nassign tc = {clk, load, data[9:0]};\n\nendmodule"}
{"task_id": "review2015_fsmseq", "completion": "Task: Write Verilog program for the given description.\nDescription: Build a finite-state machine that searches for the sequence 1101 in an input bit stream. When the sequence is found, it should set start_shifting to 1, forever, until reset. Reset is active high synchronous..\nGenerated Code: module top_module(\n\tinput clk,\n\tinput reset,\n\tinput data,\n\toutput start_shifting);\n\n\nassign start_shifting = 1'b0;\n\nbegin\nclk = 1'b0;\nreset = 1'b0;\ndata = 1'b0;\nstart_shifting = 1'b1;\nend\nend\n\nendmodule"}
{"task_id": "dff8r", "completion": "Task: Write Verilog program for the given description.\nDescription: Create 8 D flip-flops with active high synchronous reset setting the output to zero. All DFFs should be triggered by the positive edge of clk..\nGenerated Code: module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput reset,\n\toutput reg [7:0] q);\n\n\nalways @(posedge clk)\nif(reset)\nq <= 8'h00;\nelse if(d == 8'h00)\nq <= 8'h01;\nelse if(d == 8'h01)\nq <= 8'h02;\nelse if(d == 8'h02)\nq <= 8'h03;\nelse if(d == 8'h03)\nq <= 8'h04;\nelse if(d == 8'h04)\nq <= 8'h05;\nelse if(d == 8'h05)\nq <= 8'h06;\nelse if(d == 8'h06)\nq <= 8'h07;\nelse if(d == 8'h07)\nq <= 8'h08;\nelse if(d == 8'h08)\nq <= 8'h09;\nelse if(d == 8'h09)\nq <= 8'h0a;\nelse if(d == 8'h0a)\nq <= 8'h0b;\nelse if(d == 8'h0b)\nq <= 8'h0c;\nelse if(d == 8'h0c)\nq <= 8'h0d;\nelse if(d == 8'h0d)\nq <= 8'h0e;\nelse if(d == 8'h0e)\nq <= 8'h0f;\nelse if(d == 8'h0f)\nq <= 8'h10;\nelse if(d == 8'h10)\nq <= 8'h11;\nelse if(d == 8'h11)\nq <= 8'h12;\nelse if(d == 8'h12)\nq <= 8'h13;\nelse if(d == 8'h13)\nq <= 8'h14;\nelse if(d == 8'h14)\nq <= 8'h15;\nelse if(d == 8'h15)\nq <= 8'h16;\nelse if(d == 8'h16)\nq <= 8'h17;\nelse if(d == 8'h17)\nq <= 8'h18;\nelse if(d == 8'h18)\nq <= 8'h19;\nelse if(d == 8'h19)\nq <= 8'h1a;\nelse if(d == 8'h1a)\nq <= 8'h1b;\nelse if(d == 8'h1b)\nq <= 8'h1c;\nelse if(d == 8'h1c)\nq <= 8'h1d;\nelse if(d == 8'h1d)\nq <= 8'h1e;\nelse if(d == 8'h1e)\nq <= 8'h1f;\nelse if(d == 8'h1f)\nq <= 8'h20;\nelse if(d == 8'h20)\nq <= 8'h21;\nelse if(d == 8'h21)\nq <= 8'h22;\nelse if(d == 8'h22)\nq <= 8'h23;\nelse if(d == 8'h23)\nq <= 8'h24;\nelse if(d == 8'h24)\nq <= 8'h25;\nelse if(d == 8'h25)\nq <= 8'h26;\nelse if(d == 8'h26)\nq <= 8'h27;\nelse if(d == 8'h27)\nq <= 8'h28;\nelse if(d == 8'h28)\nq <= 8'h29;\nelse if(d == 8'h29)\nq <= 8'h2a;\nelse if(d == 8'h2a)\nq <= 8'h2b;\nelse if(d == 8'h2b)\nq <= 8'h2c;\nelse if(d == 8'h2c)\nq <= 8'h2d;\nelse if(d == 8'h2d)\nq <= 8'h2e;\nelse if(d == 8'h2e)\nq <= 8'h2f;\nelse if(d == 8'h2f)\nq <= 8'h30;\nelse if(d == 8'h30)\nq <= 8'h31;\nelse if(d == 8'h31)\nq <= 8'h32;\nelse if(d == 8'h32)\nq <= 8'h33;\nelse if(d == 8'h33)\nq <= 8'h34;\nelse if(d == 8'h34)\nq <= 8'h35;\nelse if(d == 8'h35)\nq <= 8'h36;\nelse if(d == 8'h36)\nq <= 8'h37;\nelse if(d == 8'h37)\nq <= 8'h38;\nelse if(d == 8'h38)\nq <= 8'h39;\nelse if(d == 8'h39)\nq <= 8'h3a;\nelse if(d == 8'h3a)\nq <= 8'h3b;\nelse if(d == 8'h3b)\nq <= 8'h3c;\nelse if(d == 8'h3c)\nq <= 8'h3d;\nelse if(d == 8'h3d)\nq <= 8'h3e;\nelse if(d == 8'h3e)\nq <= 8'h3f;\nelse if(d == 8'h3f)\nq <= 8'h40;\nelse if(d == 8'h40)\nq <= 8'h41;\nelse if(d == 8'h41)\nq <= 8'h42;\nelse if(d == 8'h42)\nq <= 8'h43;\nelse if(d == 8'h43)\nq <= 8'h44;\nelse if(d == 8'h44)\nq <= 8'h45;\nelse if(d == 8'h45)\nq <= 8'h46;\nelse if(d == 8'h46)\nq <= 8'h47;\nelse if(d == 8'h47)\nq <= 8'h48;\nelse if(d == 8'h48)\nq <= 8'h49;\nelse if(d == 8'h49)\nq <= 8'h4a;\nelse if(d == 8'h4a)\nq <= 8'h4b;\nelse if(d == 8'h4b)\nq <= 8'h4c;\nelse if(d == 8'h4c)\nq <= 8'h4d;\nelse if(d == 8'h4d)\nq <= 8'h4e;\nelse if(d == 8'h4e)\nq <= 8'h4f;\nelse if(d == 8'h4f)\nq <= 8'h50;\nelse if(d == 8'h50)\nq <= 8'h51;\nelse if(d == 8'h51)\nq <= 8'h52;\nelse if(d == 8'h52)\nq <= 8'h53;\nelse if(d == 8'h53)\nq <= 8'h54;\nelse if(d == 8'h54)\nq <= 8'h55;\nelse if(d == 8'h55)\nq <= 8'h56;\nelse if(d == 8'h56)\nq <= 8'h57;\nelse if(d == 8'h57)\nq <= 8'h58;\nelse if(d == 8'h58)\nq <= 8'h59;\nelse if(d == 8'h59)\nq <= 8'h5a;\nelse if(d == 8'h5a)\nq <= 8'h5b;\nelse if(d == 8'h5b)\nq <= 8'h5c;\nelse if(d == 8'h5c)\nq <= 8'h5d;\nelse if(d == 8'h5d)\nq <= 8'h5e;\nelse if(d == 8'h5e)\nq <= 8'h5f;\nelse if(d == 8'h5f)\nq <= 8'h60;\nelse if(d == 8'h60)\nq <= 8'h61;\nelse if(d == 8'h61)\nq <= 8'h62;"}
{"task_id": "edgedetect2", "completion": "Task: Write Verilog program for the given description.\nDescription: For each bit in an 8-bit vector, detect when the input signal changes from one clock cycle to the next (detect any edge). The output bit should be set the cycle after a 0 to 1 transition occurs..\nGenerated Code: module top_module(\n\tinput clk,\n\tinput [7:0] in,\n\toutput reg [7:0] anyedge);\n\n\nalways @(posedge clk) begin\nanyedge <= in;\nend\n\nendmodule"}
{"task_id": "count1to10", "completion": "Task: Write Verilog program for the given description.\nDescription: Make a decade counter that counts 1 through 10, inclusive. The reset input is active high synchronous, and should reset the counter to 1..\nGenerated Code: module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n\n\nalways @(posedge clk)\nif(reset)\nq <= 4'd0;\nelse if(q == 4'd0)\nq <= 4'd1;\nelse if(q == 4'd1)\nq <= 4'd2;\nelse if(q == 4'd2)\nq <= 4'd3;\nelse if(q == 4'd3)\nq <= 4'd4;\nelse if(q == 4'd4)\nq <= 4'd5;\nelse if(q == 4'd5)\nq <= 4'd6;\nelse if(q == 4'd6)\nq <= 4'd7;\nelse if(q == 4'd7)\nq <= 4'd8;\nelse if(q == 4'd8)\nq <= 4'd9;\nelse if(q == 4'd9)\nq <= 4'd10;\nelse if(q == 4'd10)\nq <= 4'd11;\nelse if(q == 4'd11)\nq <= 4'd12;\nelse if(q == 4'd12)\nq <= 4'd13;\nelse if(q == 4'd13)\nq <= 4'd14;\nelse if(q == 4'd14)\nq <= 4'd15;\nelse if(q == 4'd15)\nq <= 4'd16;\nelse if(q == 4'd16)\nq <= 4'd17;\nelse if(q == 4'd17)\nq <= 4'd18;\nelse if(q == 4'd18)\nq <= 4'd19;\nelse if(q == 4'd19)\nq <= 4'd20;\nelse if(q == 4'd20)\nq <= 4'd21;\nelse if(q == 4'd21)\nq <= 4'd22;\nelse if(q == 4'd22)\nq <= 4'd23;\nelse if(q == 4'd23)\nq <= 4'd24;\nelse if(q == 4'd24)\nq <= 4'd25;\nelse if(q == 4'd25)\nq <= 4'd26;\nelse if(q == 4'd26)\nq <= 4'd27;\nelse if(q == 4'd27)\nq <= 4'd28;\nelse if(q == 4'd28)\nq <= 4'd29;\nelse if(q == 4'd29)\nq <= 4'd30;\nelse if(q == 4'd30)\nq <= 4'd31;\nelse if(q == 4'd31)\nq <= 4'd32;\nelse if(q == 4'd32)\nq <= 4'd33;\nelse if(q == 4'd33)\nq <= 4'd34;\nelse if(q == 4'd34)\nq <= 4'd35;\nelse if(q == 4'd35)\nq <= 4'd36;\nelse if(q == 4'd36)\nq <= 4'd37;\nelse if(q == 4'd37)\nq <= 4'd38;\nelse if(q == 4'd38)\nq <= 4'd39;\nelse if(q == 4'd39)\nq <= 4'd40;\nelse if(q == 4'd40)\nq <= 4'd41;\nelse if(q == 4'd41)\nq <= 4'd42;\nelse if(q == 4'd42)\nq <= 4'd43;\nelse if(q == 4'd43)\nq <= 4'd44;\nelse if(q == 4'd44)\nq <= 4'd45;\nelse if(q == 4'd45)\nq <= 4'd46;\nelse if(q == 4'd46)\nq <= 4'd47;\nelse if(q == 4'd47)\nq <= 4'd48;\nelse if(q == 4'd48)\nq <= 4'd49;\nelse if(q == 4'd49)\nq <= 4'd50;\nelse if(q == 4'd50)\nq <= 4'd51;\nelse if(q == 4'd51)\nq <= 4'd52;\nelse if(q == 4'd52)\nq <= 4'd53;\nelse if(q == 4'd53)\nq <= 4'd54;\nelse if(q == 4'd54)\nq <= 4'd55;\nelse if(q == 4'd55)\nq <= 4'd56;\nelse if(q == 4'd56)\nq <= 4'd57;\nelse if(q == 4'd57)\nq <= 4'd58;\nelse if(q == 4'd58)\nq <= 4'd59;\nelse if(q == 4'd59)\nq <= 4'd60;\nelse if(q == 4'd60)\nq <= 4'd61;\nelse if(q == 4'd61)\nq <= 4'd62;\nelse if(q == 4'd62)\nq <= 4'd63;\nelse if(q == 4'd63)\nq <= 4'd64;\nelse if(q == 4'd64)\nq <= 4'd65;\nelse if(q == 4'd65)\nq <= 4'd66;\nelse if(q == 4'd66)\nq <= 4'd67;\nelse if(q == 4'd67)\nq <= 4'd68;\nelse if(q == 4'd68)\nq <= 4'd69;\nelse if(q == 4'd69)\nq <= 4'd70;\nelse if(q == 4'd70)\nq <= 4'd71;\nelse if(q == 4'd71)\nq <= 4'd72;\nelse if(q == 4'd72)\nq <= 4'd73;\nelse if(q == 4'd73)\nq <= 4'd74;\nelse if(q == 4'd74)\nq <= 4'd75;\nelse if(q == 4'd75)\nq <= 4'd76;\nelse if(q == 4'd76)\nq <= 4'd77;\nelse if(q == 4'd77)\nq <= 4'd78;\nelse if(q == 4'd78)\nq <= 4'd79;\nelse if(q == 4'd79)\nq <= 4'd80;\nelse if(q == 4'd80)\nq <= 4'd81;\nelse if(q == 4'd81)\nq <= 4'd82;\nelse if(q == 4'd82)\nq <= 4'd83;\nelse if(q == 4'd83)\nq <= 4'd84;\nelse if(q == 4'd84)\nq <= 4'd85;\nelse if(q == 4'd85)\nq <= 4'd86;\nelse if(q == 4'd86)\nq <= 4'd87;\nelse if(q == 4'd87)\nq <= 4'd88;\nelse if(q == 4'd88)\nq <= 4'd89;\nelse if(q == 4'd89)\nq <= 4'd90;\nelse if(q == 4'd90)\nq <= 4'd91;\nelse if(q == 4'd91)\nq <= 4'd92;\nelse if(q == 4'd92)\nq <= 4'd93;\nelse if(q == 4'd93)\nq <= 4'd94;\nelse if(q == 4'd94)\nq <= 4'd95;\nelse if(q == 4'd95)\nq <= 4'd96;\nelse if(q == 4'd96)\nq <= 4'd97;\nelse if(q == 4'd97)\nq <= 4'd98;\nelse if(q == 4'd98)\nq <= 4'd99;\nelse if(q == 4'd99)\nq <= 4'd100;\nelse if(q == 4'd100)\nq <= 4'd101;\nelse if(q == 4'd101)\nq <= 4'd102;\nelse if(q == 4'd102)\nq <= 4'd103;\nelse if(q == 4'd103)\nq <= 4'd104;\nelse if(q == 4'd104)\nq <= 4'd105;\nelse if(q == 4'd105)\nq <= 4'd106;\nelse if(q == 4'd106)\nq <= 4'd107;\nelse if(q == 4'd107)\nq <= 4'd108;\nelse if(q == 4'd108)\nq <= 4'd109;\nelse if(q == 4'd109)\nq <= 4'd110;\nelse if(q == 4'd110)\nq <= 4'd111;\nelse if(q == 4'd111)\nq <= 4'd112;\nelse if(q == 4'd112)\nq <= 4'd113;\nelse if(q == 4'd113)\nq <= 4'd114;\nelse if(q == 4'd114)\nq"}
{"task_id": "circuit9", "completion": "Task: Write Verilog program for the given description.\nDescription: This is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               q               \n// 0ns             0               1               x               \n// 5ns             1               1               4               \n// 10ns            0               1               4               \n// 15ns            1               1               4               \n// 20ns            0               1               4               \n// 25ns            1               1               4               \n// 30ns            0               1               4               \n// 35ns            1               1               4               \n// 40ns            0               1               4               \n// 45ns            1               0               4               \n// 50ns            0               0               4               \n// 55ns            1               0               5               \n// 60ns            0               0               5               \n// 65ns            1               0               6               \n// 70ns            0               0               6               \n// 75ns            1               0               0               \n// 80ns            0               0               0               \n// 85ns            1               0               1               \n// 90ns            0               0               1               .\nGenerated Code: module top_module (\n\tinput clk,\n\tinput a, \n\toutput reg [2:0] q\n);\n\n\nreg [2:0] counter;\n\ninitial begin\ncounter = 0;\nend\n\nalways @(posedge clk) begin\nif (a) begin\ncounter = counter + 1;\nend else begin\ncounter = counter + 2;\nend\nend\n\nalways @(posedge clk) begin\nif (a) begin\ncounter = counter + 1;\nend else begin\ncounter = counter + 2;\nend\nend\n\nalways @(posedge clk) begin\nif (a) begin\ncounter = counter + 1;\nend else begin\ncounter = counter + 2;\nend\nend\n\nalways @(posedge clk) begin\nif (a) begin\ncounter = counter + 1;\nend else begin\ncounter = counter + 2;\nend\nend\n\nalways @(posedge clk) begin\nif (a) begin\ncounter = counter + 1;\nend else begin\ncounter = counter + 2;\nend\nend\n\nalways @(posedge clk) begin\nif (a) begin\ncounter = counter + 1;\nend else begin\ncounter = counter + 2;\nend\nend\n\nalways @(posedge clk) begin\nif (a) begin\ncounter = counter + 1;\nend else begin\ncounter = counter + 2;\nend\nend\n\nalways @(posedge clk) begin\nif (a) begin\ncounter = counter + 1;\nend else begin\ncounter = counter + 2;\nend\nend\n\nalways @(posedge clk) begin\nif (a) begin\ncounter = counter + 1;\nend else begin\ncounter = counter + 2;\nend\nend\n\nalways @(posedge clk) begin\nif (a) begin\ncounter = counter + 1;\nend else begin\ncounter = counter + 2;\nend\nend\n\nalways @(posedge clk) begin\nif (a) begin\ncounter = counter + 1;\nend else begin\ncounter = counter + 2;\nend\nend\n\nalways @(posedge clk) begin\nif (a) begin\ncounter = counter + 1;\nend else begin\ncounter = counter + 2;\nend\nend\n\nalways @(posedge clk) begin\nif (a) begin\ncounter = counter + 1;\nend else begin\ncounter = counter + 2;\nend\nend\n\nalways @(posedge clk) begin\nif (a) begin\ncounter = counter + 1;\nend else begin\ncounter = counter + 2;\nend\nend\n\nalways @(posedge clk) begin\nif (a) begin\ncounter = counter + 1;\nend else begin\ncounter = counter + 2;\nend\nend\n\nalways @(posedge clk) begin\nif (a) begin\ncounter = counter + 1;\nend else begin\ncounter = counter + 2;\nend\nend\n\nalways @(posedge clk) begin\nif (a) begin\ncounter = counter + 1;\nend else begin\ncounter = counter + 2;\nend\nend\n\nalways @(posedge clk) begin\nif (a) begin\ncounter = counter + 1;\nend else begin\ncounter = counter + 2;\nend\nend\n\nalways @(posedge clk) begin\nif (a) begin\ncounter = counter + 1;\nend else begin\ncounter = counter + 2;\nend\nend\n\nalways @(posedge clk) begin\nif (a) begin\ncounter = counter + 1;\nend else begin\ncounter = counter + 2;\nend\nend\n\nalways @(posedge clk) begin\nif (a) begin\ncounter = counter + 1;\nend else begin\ncounter = counter + 2;\nend\nend\n\nalways @(posedge clk) begin\nif (a) begin\ncounter = counter + 1;\nend else begin\ncounter = counter + 2;\nend\nend\n\nalways @(posedge clk) begin\nif (a) begin\ncounter = counter + 1;\nend else begin\ncounter = counter + 2;\nend\nend\n\nalways @(posedge clk) begin\nif (a) begin\ncounter = counter + 1;\nend else begin\ncounter = counter + 2;\nend\nend\n\nalways @(posedge clk) begin\nif (a) begin\ncounter = counter + 1;\nend else begin\ncounter = counter + 2;\nend\nend\n\nalways @(posedge clk) begin\nif (a) begin\ncounter = counter + 1;\nend else begin\ncounter = counter + 2;\nend\nend\n\nalways @(posedge clk) begin\nif (a) begin\ncounter = counter + 1;\nend else begin\ncounter = counter + 2;\nend\nend\n\nalways @(posedge clk) begin\nif (a) begin\ncounter = counter + 1;\nend else begin\ncounter = counter + 2;\nend\nend\n\nalways @(posedge clk) begin\nif (a) begin\ncounter = counter + 1;\nend else begin\ncounter = counter + 2;\nend\nend\n\nalways @(posedge clk) begin\nif (a) begin\ncounter = counter + 1;\nend else begin\ncounter = counter + 2;\nend\nend\n\nalways @(posedge clk) begin\nif (a) begin\ncounter = counter + 1;\nend else begin\ncounter = counter + 2;\nend\nend\n\nalways @(posedge clk) begin\nif (a) begin\ncounter = counter + 1;\nend else begin\ncounter = counter + 2;\nend\nend\n\nalways @(posedge clk) begin\nif (a) begin\ncounter = counter + 1;\nend else begin\ncounter = counter + 2;\nend\nend\n\nalways @(posedge clk) begin\nif (a) begin\ncounter = counter + 1;\nend else begin\ncounter = counter + 2;\nend\nend\n\nalways @(posedge clk) begin\nif (a) begin\ncounter = counter + 1;\nend else begin\ncounter = counter + 2;\nend\nend\n\nalways @(posedge clk) begin\nif (a) begin\ncounter = counter + 1;\nend else begin\ncounter = counter + 2;\nend\nend\n\nalways @(posedge clk) begin\nif (a) begin\ncounter = counter + 1;\nend else begin\ncounter = counter + 2;\nend\nend\n\nalways @(posedge clk) begin\nif (a) begin\ncounter = counter + 1;\nend else begin\ncounter = counter + 2;\nend\nend\n\nalways @(posedge clk) begin\nif (a) begin\ncounter = counter + 1;\nend else begin\ncounter = counter + 2;\nend\nend\n\nalways @(posedge clk) begin\nif (a) begin\ncounter = counter + 1;\nend else begin\ncounter = counter + 2;\nend\nend\n\nalways @(posedge clk) begin\nif (a) begin\ncounter = counter + 1;\nend else begin\ncounter = counter + 2;\nend\nend\n\nalways @(posedge clk) begin\nif (a) begin\ncounter = counter + 1;\nend else begin\ncounter = counter + 2;\nend\nend\n\nalways @(posedge clk) begin\nif (a) begin\ncounter = counter + 1;\nend else begin\ncounter = counter + 2;\nend\nend\n\nalways @(posedge clk) begin\nif (a) begin\ncounter = counter + 1;\nend else begin\ncounter = counter + 2;\nend\nend\n\nalways @(posedge clk) begin\nif (a) begin\n"}
{"task_id": "lfsr5", "completion": "Task: Write Verilog program for the given description.\nDescription: A linear feedback shift register is a shift register usually with a few XOR gates to produce the next state of the shift register. A Galois LFSR is one particular arrangement where bit positions with a \"tap\" are XORed with the output bit to produce its next value, while bit positions without a tap shift. If the taps positions are carefully chosen, the LFSR can be made to be \"maximum-length\". A maximum-length LFSR of n bits cycles through 2**n-1 states before repeating (the all-zero state is never reached). Build a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3. The active-high synchronous reset should reset the LFSR output to 1..\nGenerated Code: module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [4:0] q);\n\n\nalways @(posedge clk or negedge reset)\nif (~reset)\nq <= 0;\nelse if (reset)\nq <= {4{1'b0}};\nelse\nq <= {4{1'b1}};\nendmodule"}
{"task_id": "bugs_addsubz", "completion": "Task: Write Verilog program for the given description.\nDescription: The following adder-subtractor with zero flag doesn't work. Fix the bug(s).\n\n// synthesis verilog_input_version verilog_2001\n// module top_module ( \n//     input do_sub,\n//     input [7:0] a,\n//     input [7:0] b,\n//     output reg [7:0] out,\n//     output reg result_is_zero\n// );//\n\n//     always @(*) begin\n//         case (do_sub)\n//           0: out = a+b;\n//           1: out = a-b;\n//         endcase\n\n//         if (~out)\n//             result_is_zero = 1;\n//     end\n\n// endmodule.\nGenerated Code: module top_module (\n\tinput do_sub,\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput reg [7:0] out,\n\toutput reg result_is_zero\n);\n\n\nassign result_is_zero = 0;\n\nendmodule"}
{"task_id": "m2014_q3", "completion": "Task: Write Verilog program for the given description.\nDescription: Consider the function f shown in the Karnaugh map below. d is don't-care, which means you may choose to output whatever value is convenient. Implement this function. \n//        x[1]x[2]\n// x[3]x[4]   00 01 11 10\n//  00 | d | 0 | d | d |\n//  01 | 0 | d | 1 | 0 |\n//  11 | 1 | 1 | d | d |\n//  10 | 1 | 1 | 0 | d |.\nGenerated Code: module top_module (\n\tinput [4:1] x,\n\toutput logic f\n);\n\n\nassign f = x[1];\nassign f = x[2];\nassign f = x[3];\nassign f = x[4];\nassign f = x[5];\nassign f = x[6];\nassign f = x[7];\nassign f = x[8];\nassign f = x[9];\nassign f = x[10];\nassign f = x[11];\nassign f = x[12];\nassign f = x[13];\nassign f = x[14];\nassign f = x[15];\nassign f = x[16];\nassign f = x[17];\nassign f = x[18];\nassign f = x[19];\nassign f = x[20];\nassign f = x[21];\nassign f = x[22];\nassign f = x[23];\nassign f = x[24];\nassign f = x[25];\nassign f = x[26];\nassign f = x[27];\nassign f = x[28];\nassign f = x[29];\nassign f = x[30];\nassign f = x[31];\nassign f = x[32];\nassign f = x[33];\nassign f = x[34];\nassign f = x[35];\nassign f = x[36];\nassign f = x[37];\nassign f = x[38];\nassign f = x[39];\nassign f = x[40];\nassign f = x[41];\nassign f = x[42];\nassign f = x[43];\nassign f = x[44];\nassign f = x[45];\nassign f = x[46];\nassign f = x[47];\nassign f = x[48];\nassign f = x[49];\nassign f = x[50];\nassign f = x[51];\nassign f = x[52];\nassign f = x[53];\nassign f = x[54];\nassign f = x[55];\nassign f = x[56];\nassign f = x[57];\nassign f = x[58];\nassign f = x[59];\nassign f = x[60];\nassign f = x[61];\nassign f = x[62];\nassign f = x[63];\nassign f = x[64];\nassign f = x[65];\nassign f = x[66];\nassign f = x[67];\nassign f = x[68];\nassign f = x[69];\nassign f = x[70];\nassign f = x[71];\nassign f = x[72];\nassign f = x[73];\nassign f = x[74];\nassign f = x[75];\nassign f = x[76];\nassign f = x[77];\nassign f = x[78];\nassign f = x[79];\nassign f = x[80];\nassign f = x[81];\nassign f = x[82];\nassign f = x[83];\nassign f = x[84];\nassign f = x[85];\nassign f = x[86];\nassign f = x[87];\nassign f = x[88];\nassign f = x[89];\nassign f = x[90];\nassign f = x[91];\nassign f = x[92];\nassign f = x[93];\nassign f = x[94];\nassign f = x[95];\nassign f = x[96];\nassign f = x[97];\nassign f = x[98];\nassign f = x[99];\nassign f = x[100];\nassign f = x[101];\nassign f = x[102];\nassign f = x[103];\nassign f = x[104];\nassign f = x[105];\nassign f = x[106];\nassign f = x[107];\nassign f = x[108];\nassign f = x[109];\nassign f = x[110];\nassign f = x[111];\nassign f = x[112];\nassign f = x[113];\nassign f = x[114];\nassign f = x[115];\nassign f = x[116];\nassign f = x[117];\nassign f = x[118];\nassign f = x[119];\nassign f = x[120];\nassign f = x[121];\nassign f = x[122];\nassign f = x[123];\nassign f = x[124];\nassign f = x[125];\nassign f = x[126];\nassign f = x[127];\nassign f = x[128];\nassign f = x[129];\nassign f = x[130];\nassign f = x[131];\nassign f = x[132];\nassign f = x[133];\nassign f = x[134];\nassign f = x[135];\nassign f = x[136];\nassign f = x[137];\nassign f = x[138];\nassign f = x[139];\nassign f = x[140];\nassign f = x[141];\nassign f = x[142];\nassign f = x[143];\nassign f = x[144];\nassign f = x[145];\nassign f = x[146];\nassign f = x[147];\nassign f = x[148];\nassign f = x[149];\nassign f = x[150];\nassign f = x[151];\nassign f = x[152];\nassign f = x[153];\nassign f = x[154];\nassign f = x[155];\nassign f = x[156];\nassign f = x[157];\nassign f = x[158];\nassign f = x[159];\nassign f = x[160];\nassign f = x[161];\nassign f = x[162];\nassign f = x[163];\nassign f = x[164];\nassign f = x[165];\nassign f = x[166];\nassign f = x[167];\nassign f = x[168];\nassign f = x[169];\nassign f = x[170];\nassign f = x[171];\nassign f = x[172];\nassign f = x[173];\nassign f = x[174];\nassign f = x[175];\nassign f = x[176];\nassign f = x[177];\nassign f = x[178];\nassign f = x[179];\nassign f = x[180];\nassign f = x[181];\nassign f = x[182];\nassign f = x[183];\nassign f = x[184];\nassign f = x[185];\nassign f = x[186];\nassign f = x[187];\nassign f = x[188];\nassign f = x[189];\nassign f = x[190];\nassign f = x[191];\nassign f = x[192];\nassign f = x[193];\nassign f = x[194];\nassign f = x[195];\nassign f = x[196];\nassign f = x[197];\nassign f = x[198];\nassign f = x[199];\nassign f = x[200];\nassign f = x[201];\nassign f = x[202];\nassign f = x[203];\nassign f = x[204];\nassign f = x[205];\nassign f = x[206];\nassign f = x[207];\nassign f = x[208];\nassign f = x[209];\nassign f = x[210];"}
{"task_id": "bugs_case", "completion": "Task: Write Verilog program for the given description.\nDescription: This combinational circuit is supposed to recognize 8-bit keyboard scancodes for keys 0 through 9. It should indicate whether one of the 10 cases were recognized (valid), and if so, which key was detected. If the 8-bit input is 8'h45, 8'h16, 8'h1e, 8'h26, 8'h25, 8'h2e, 8'h36, 8'h3d, 8'h3e, or 8'h46, the 4-bit output will be set to 0, 1, 2, 3, 4, 5, 6, 7, 8, or 9 respectively, the 1-bit valid would be set to 1. If the input does not match any of the cases, both output signals would be set to 0..\nGenerated Code: module top_module (\n\tinput [7:0] code,\n\toutput reg [3:0] out,\n\toutput reg valid\n);\n\n\nalways @(code)\ncase (code[7:0])\n8'h00: valid = 1;\n8'h01: valid = 1;\n8'h02: valid = 1;\n8'h03: valid = 1;\n8'h04: valid = 1;\n8'h05: valid = 1;\n8'h06: valid = 1;\n8'h07: valid = 1;\n8'h08: valid = 1;\n8'h09: valid = 1;\n8'h0A: valid = 1;\n8'h0B: valid = 1;\n8'h0C: valid = 1;\n8'h0D: valid = 1;\n8'h0E: valid = 1;\n8'h0F: valid = 1;\n8'h10: valid = 1;\n8'h11: valid = 1;\n8'h12: valid = 1;\n8'h13: valid = 1;\n8'h14: valid = 1;\n8'h15: valid = 1;\n8'h16: valid = 1;\n8'h17: valid = 1;\n8'h18: valid = 1;\n8'h19: valid = 1;\n8'h1A: valid = 1;\n8'h1B: valid = 1;\n8'h1C: valid = 1;\n8'h1D: valid = 1;\n8'h1E: valid = 1;\n8'h1F: valid = 1;\n8'h20: valid = 1;\n8'h21: valid = 1;\n8'h22: valid = 1;\n8'h23: valid = 1;\n8'h24: valid = 1;\n8'h25: valid = 1;\n8'h26: valid = 1;\n8'h27: valid = 1;\n8'h28: valid = 1;\n8'h29: valid = 1;\n8'h2A: valid = 1;\n8'h2B: valid = 1;\n8'h2C: valid = 1;\n8'h2D: valid = 1;\n8'h2E: valid = 1;\n8'h2F: valid = 1;\n8'h30: valid = 1;\n8'h31: valid = 1;\n8'h32: valid = 1;\n8'h33: valid = 1;\n8'h34: valid = 1;\n8'h35: valid = 1;\n8'h36: valid = 1;\n8'h37: valid = 1;\n8'h38: valid = 1;\n8'h39: valid = 1;\n8'h3A: valid = 1;\n8'h3B: valid = 1;\n8'h3C: valid = 1;\n8'h3D: valid = 1;\n8'h3E: valid = 1;\n8'h3F: valid = 1;\n8'h40: valid = 1;\n8'h41: valid = 1;\n8'h42: valid = 1;\n8'h43: valid = 1;\n8'h44: valid = 1;\n8'h45: valid = 1;\n8'h46: valid = 1;\n8'h47: valid = 1;\n8'h48: valid = 1;\n8'h49: valid = 1;\n8'h4A: valid = 1;\n8'h4B: valid = 1;\n8'h4C: valid = 1;\n8'h4D: valid = 1;\n8'h4E: valid = 1;\n8'h4F: valid = 1;\n8'h50: valid = 1;\n8'h51: valid = 1;\n8'h52: valid = 1;\n8'h53: valid = 1;\n8'h54: valid = 1;\n8'h55: valid = 1;\n8'h56: valid = 1;\n8'h57: valid = 1;\n8'h58: valid = 1;\n8'h59: valid = 1;\n8'h5A: valid = 1;\n8'h5B: valid = 1;\n8'h5C: valid = 1;\n8'h5D: valid = 1;\n8'h5E: valid = 1;\n8'h5F: valid = 1;\n8'h60: valid = 1;\n8'h61: valid = 1;\n8'h62: valid = 1;\n8'h63: valid = 1;\n8'h64: valid = 1;\n8'h65: valid = 1;\n8'h66: valid = 1;\n8'h67: valid = 1;\n8'h68: valid = 1;\n8'h69: valid = 1;\n8'h6A: valid = 1;\n8'h6B: valid = 1;\n8'h6C: valid = 1;\n8'h6D: valid = 1;\n8'h6E: valid = 1;\n8'h6F: valid = 1;\n8'h70: valid = 1;\n8'h71: valid = 1;\n8'h72: valid = 1;\n8'h73: valid = 1;\n8'h74: valid = 1;\n8'h75: valid = 1;\n8'h76: valid = 1;\n8'h77: valid = 1;\n8'h78: valid = 1;\n8'h79: valid = 1;\n8'h7A: valid = 1;\n8'h7B: valid = 1;\n8'h7C: valid = 1;\n8'h7D: valid = 1;\n8'h7E: valid = 1;\n8'h7F: valid = 1;\n8'h80: valid = 1;\n8'h81: valid = 1;\n8'h82: valid = 1;\n8'h83: valid = 1;\n8'h84: valid = 1;\n8'h85: valid = 1;\n8'h86: valid = 1;\n8'h87: valid = 1;\n8'h88: valid = 1;\n8'h89: valid = 1;\n8'h8A: valid = 1;\n8'h8B: valid = 1;\n8'h8C: valid = 1;\n8'h8D: valid = 1;\n8'h8E: valid = 1;\n8'h8F: valid = 1;\n8'h90: valid = 1;\n8'h91: valid = 1;\n8'h92: valid = 1;\n8'h93: valid = 1;\n8'h94: valid = 1;\n8'h95: valid = 1;\n8'h96: valid = 1;\n8'h97: valid = 1;\n8'h98: valid = 1;\n8'h99: valid = 1;\n8'h9A: valid = 1;\n8'h9B: valid = 1;\n8'h9C: valid = 1;\n8'h9D: valid = 1;\n8'h9E: valid = 1;\n8'h9F: valid = 1;\n8'hA0: valid = 1;\n8'hA1: valid = 1;\n8'hA2: valid = 1;\n8'hA3: valid = 1;\n8'hA4: valid = 1;\n8'hA5: valid = 1;\n8'hA6: valid = 1;\n8'hA7: valid = 1;\n8'hA8: valid = 1;\n8'hA9: valid = 1;\n8'hAA: valid = 1;\n8'hAB: valid = 1;\n8'hAC: valid = 1;\n8'hAD: valid = 1;\n"}
{"task_id": "vectorr", "completion": "Task: Write Verilog program for the given description.\nDescription: Given an 8-bit input vector [7:0], reverse its bit ordering..\nGenerated Code: module top_module (\n\tinput [7:0] in,\n\toutput [7:0] out\n);\n\n\nalways @(in)\nbegin\nout[7:0] = in[7:0];\nout[8:0] = in[8:1];\nout[9:0] = in[8:2];\nout[10:0] = in[8:3];\nout[11:0] = in[8:4];\nout[12:0] = in[8:5];\nout[13:0] = in[8:6];\nout[14:0] = in[8:7];\nout[15:0] = in[8:8];\nout[16:0] = in[8:9];\nout[17:0] = in[8:10];\nout[18:0] = in[8:11];\nout[19:0] = in[8:12];\nout[20:0] = in[8:13];\nout[21:0] = in[8:14];\nout[22:0] = in[8:15];\nout[23:0] = in[8:16];\nout[24:0] = in[8:17];\nout[25:0] = in[8:18];\nout[26:0] = in[8:19];\nout[27:0] = in[8:20];\nout[28:0] = in[8:21];\nout[29:0] = in[8:22];\nout[30:0] = in[8:23];\nout[31:0] = in[8:24];\nout[32:0] = in[8:25];\nout[33:0] = in[8:26];\nout[34:0] = in[8:27];\nout[35:0] = in[8:28];\nout[36:0] = in[8:29];\nout[37:0] = in[8:30];\nout[38:0] = in[8:31];\nout[39:0] = in[8:32];\nout[40:0] = in[8:33];\nout[41:0] = in[8:34];\nout[42:0] = in[8:35];\nout[43:0] = in[8:36];\nout[44:0] = in[8:37];\nout[45:0] = in[8:38];\nout[46:0] = in[8:39];\nout[47:0] = in[8:40];\nout[48:0] = in[8:41];\nout[49:0] = in[8:42];\nout[50:0] = in[8:43];\nout[51:0] = in[8:44];\nout[52:0] = in[8:45];\nout[53:0] = in[8:46];\nout[54:0] = in[8:47];\nout[55:0] = in[8:48];\nout[56:0] = in[8:49];\nout[57:0] = in[8:50];\nout[58:0] = in[8:51];\nout[59:0] = in[8:52];\nout[60:0] = in[8:53];\nout[61:0] = in[8:54];\nout[62:0] = in[8:55];\nout[63:0] = in[8:56];\nout[64:0] = in[8:57];\nout[65:0] = in[8:58];\nout[66:0] = in[8:59];\nout[67:0] = in[8:60];\nout[68:0] = in[8:61];\nout[69:0] = in[8:62];\nout[70:0] = in[8:63];\nout[71:0] = in[8:64];\nout[72:0] = in[8:65];\nout[73:0] = in[8:66];\nout[74:0] = in[8:67];\nout[75:0] = in[8:68];\nout[76:0] = in[8:69];\nout[77:0] = in[8:70];\nout[78:0] = in[8:71];\nout[79:0] = in[8:72];\nout[80:0] = in[8:73];\nout[81:0] = in[8:74];\nout[82:0] = in[8:75];\nout[83:0] = in[8:76];\nout[84:0] = in[8:77];\nout[85:0] = in[8:78];\nout[86:0] = in[8:79];\nout[87:0] = in[8:80];\nout[88:0] = in[8:81];\nout[89:0] = in[8:82];\nout[90:0] = in[8:83];\nout[91:0] = in[8:84];\nout[92:0] = in[8:85];\nout[93:0] = in[8:86];\nout[94:0] = in[8:87];\nout[95:0] = in[8:88];\nout[96:0] = in[8:89];\nout[97:0] = in[8:90];\nout[98:0] = in[8:91];\nout[99:0] = in[8:92];\nout[100:0] = in[8:93];\nout[101:0] = in[8:94];\nout[102:0] = in[8:95];\nout[103:0] = in[8:96];\nout[104:0] = in[8:97];\nout[105:0] = in[8:98];\nout[106:0] = in[8:99];\nout[107:0] = in[9:100];\nout[108:0] = in[9:101];\nout[109:0] = in[9:102];\nout[110:0] = in[9:103];\nout[111:0] = in[9:104];\nout[112:0] = in[9:105];\nout[113:0] = in[9:106];\nout[114:0] = in[9:107];\nout[115:0] = in[9:108];\nout[116:0] = in[9:109];\nout[117:0] = in[9:110];\nout[118:0] = in[9:111];\nout[119:0] = in[9:112];\nout[120:0] = in[9:113];\nout[121:0] = in[9:114];\nout[122:0] = in[9:115];\nout[123:0] = in[9:116];\nout[124:0] = in[9:117];\nout[125:0] = in[9:118];\nout[126:0] = in[9:119];\nout[127:0] = in[9:120];\nout[128:0] = in[9:121];\nout[129:0] = in[9:122];\nout[130:0] = in[9:123];\nout[131:0] = in[9:124];\nout[132:0] = in[9:125];\nout[133:0] = in[9:126];\nout[134:0] = in[9:127];\nout[135:0] = in[9:128];\nout[136:0] = in[9:129];\nout[137:0] = in[9:130];\nout[138:0] = in[9:131];\nout[139:0] = in[9:132];\nout[140:0] = in[9:133];\nout[141:0] = in[9:134];\nout[142:0] = in[9:135];\nout[143:0] = in[9:136];\nout[144:0] = in[9:137];\nout[145:0] = in[9:138];\nout[146:0] = in[9:139];\nout[147:0] = in[9:140];\nout"}
{"task_id": "kmap3", "completion": "Task: Write Verilog program for the given description.\nDescription: Implement the circuit described by the Karnaugh map below. d is don't-care, which means you may choose to output whatever value is convenient.\n\n//        ab\n// cd   01 00 10 11\n//  00 | d | 0 | 1 | 1 |\n//  01 | 0 | 0 | d | d |\n//  11 | 0 | 1 | 1 | 1 |\n//  10 | 0 | 1 | 1 | 1 |.\nGenerated Code: module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput reg out\n);\n\n\nalways @(a,b,c,d) begin\nout = a + b + c + d;\nend\nendmodule"}
{"task_id": "review2015_shiftcount", "completion": "Task: Write Verilog program for the given description.\nDescription: Build a four-bit shift register that also acts as a down counter. Data is shifted in most-significant-bit first when shift_ena is 1. The number currently in the shift register is decremented when count_ena is 1. Since the full system doesn't ever use shift_ena and count_ena together, it does not matter what your circuit does if both control inputs are 1 (This mainly means that it doesn't matter which case gets higher priority)..\nGenerated Code: module top_module(\n\tinput clk,\n\tinput shift_ena,\n\tinput count_ena,\n\tinput data,\n\toutput reg [3:0] q);\n\n\nalways @(posedge clk)\nif(count_ena)\nq <= 4'b0000;\nelse if(shift_ena)\nq <= 4'b0001;\nelse if(data)\nq <= 4'b0010;\nelse\nq <= 4'b0011;\nendmodule"}
{"task_id": "wire", "completion": "Task: Write Verilog program for the given description.\nDescription: Create a module with one input and one output that behaves like a wire..\nGenerated Code: module top_module(\n\tinput in,\n\toutput out);\n\n\nassign out = in;\nendmodule"}
{"task_id": "review2015_fsmshift", "completion": "Task: Write Verilog program for the given description.\nDescription: This module is a part of the FSM for controlling the shift register, we want the ability to enable the shift register for exactly 4 clock cycles whenever the proper bit pattern is detected. Whenever the FSM is reset, assert shift_ena for 4 cycles, then 0 forever (until reset). Reset should be active high synchronous..\nGenerated Code: module top_module(\n\tinput clk,\n\tinput reset,\n\toutput shift_ena);\n\n\nassign shift_ena = 1'b0;\nassign reset = 1'b1;\nendmodule"}
{"task_id": "count15", "completion": "Task: Write Verilog program for the given description.\nDescription: Build a 4-bit binary counter that counts from 0 through 15, inclusive, with a period of 16. The reset input is active high synchronous, and should reset the counter to 0..\nGenerated Code: module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n\n\nalways @(posedge clk)\nif (reset)\nq <= 4'b00;\nelse if (q == 4'b00)\nq <= 4'b01;\nelse if (q == 4'b01)\nq <= 4'b02;\nelse if (q == 4'b02)\nq <= 4'b03;\nelse if (q == 4'b03)\nq <= 4'b04;\nelse if (q == 4'b04)\nq <= 4'b05;\nelse if (q == 4'b05)\nq <= 4'b06;\nelse if (q == 4'b06)\nq <= 4'b07;\nelse if (q == 4'b07)\nq <= 4'b08;\nelse if (q == 4'b08)\nq <= 4'b09;\nelse if (q == 4'b09)\nq <= 4'b0a;\nelse if (q == 4'b0a)\nq <= 4'b0b;\nelse if (q == 4'b0b)\nq <= 4'b0c;\nelse if (q == 4'b0c)\nq <= 4'b0d;\nelse if (q == 4'b0d)\nq <= 4'b0e;\nelse if (q == 4'b0e)\nq <= 4'b0f;\nelse if (q == 4'b0f)\nq <= 4'b10;\nelse if (q == 4'b10)\nq <= 4'b11;\nelse if (q == 4'b11)\nq <= 4'b12;\nelse if (q == 4'b12)\nq <= 4'b13;\nelse if (q == 4'b13)\nq <= 4'b14;\nelse if (q == 4'b14)\nq <= 4'b15;\nelse if (q == 4'b15)\nq <= 4'b16;\nelse if (q == 4'b16)\nq <= 4'b17;\nelse if (q == 4'b17)\nq <= 4'b18;\nelse if (q == 4'b18)\nq <= 4'b19;\nelse if (q == 4'b19)\nq <= 4'b1a;\nelse if (q == 4'b1a)\nq <= 4'b1b;\nelse if (q == 4'b1b)\nq <= 4'b1c;\nelse if (q == 4'b1c)\nq <= 4'b1d;\nelse if (q == 4'b1d)\nq <= 4'b1e;\nelse if (q == 4'b1e)\nq <= 4'b1f;\nelse if (q == 4'b1f)\nq <= 4'b20;\nelse if (q == 4'b20)\nq <= 4'b21;\nelse if (q == 4'b21)\nq <= 4'b22;\nelse if (q == 4'b22)\nq <= 4'b23;\nelse if (q == 4'b23)\nq <= 4'b24;\nelse if (q == 4'b24)\nq <= 4'b25;\nelse if (q == 4'b25)\nq <= 4'b26;\nelse if (q == 4'b26)\nq <= 4'b27;\nelse if (q == 4'b27)\nq <= 4'b28;\nelse if (q == 4'b28)\nq <= 4'b29;\nelse if (q == 4'b29)\nq <= 4'b2a;\nelse if (q == 4'b2a)\nq <= 4'b2b;\nelse if (q == 4'b2b)\nq <= 4'b2c;\nelse if (q == 4'b2c)\nq <= 4'b2d;\nelse if (q == 4'b2d)\nq <= 4'b2e;\nelse if (q == 4'b2e)\nq <= 4'b2f;\nelse if (q == 4'b2f)\nq <= 4'b30;\nelse if (q == 4'b30)\nq <= 4'b31;\nelse if (q == 4'b31)\nq <= 4'b32;\nelse if (q == 4'b32)\nq <= 4'b33;\nelse if (q == 4'b33)\nq <= 4'b34;\nelse if (q == 4'b34)\nq <= 4'b35;\nelse if (q == 4'b35)\nq <= 4'b36;\nelse if (q == 4'b36)\nq <= 4'b37;\nelse if (q == 4'b37)\nq <= 4'b38;\nelse if (q == 4'b38)\nq <= 4'b39;\nelse if (q == 4'b39)\nq <= 4'b3a;\nelse if (q == 4'b3a)\nq <= 4'b3b;\nelse if (q == 4'b3b)\nq <= 4'b3c;\nelse if (q == 4'b3c)\nq <= 4'b3d;\nelse if (q == 4'b3d)\nq <= 4'b3e;\nelse if (q == 4'b3e)\nq <= 4'b3f;\nelse if (q == 4'b3f)\nq <= 4'b40;\nelse if (q == 4'b40)\nq <= 4'b41;\nelse if (q == 4'b41)\nq <= 4'b42;\nelse if (q == 4'b42)\nq <= 4'b43;\nelse if (q == 4'b43)\nq <= 4'b44;\nelse if (q == 4'b44)\nq <= 4'b45;\nelse if (q == 4'b45)\nq <= 4'b46;\nelse if (q == 4'b46)\nq <= 4'b47;\nelse if (q == 4'b47)\nq <= 4'b48;\nelse if (q == 4'b48)\nq <= 4'b49;\nelse if (q == 4'b49)\nq <= 4'b4a;\nelse if (q == 4'b4a)\nq <= 4'b4b;\nelse if (q == 4'b4b)\nq <= 4'b4c;\nelse if (q == 4'b4c)\nq <= 4'b4d;\nelse if (q == 4'b4d)\nq <= 4'b4e;\nelse if (q == 4'b4e)\nq <= 4'b4f;\nelse if (q == 4'b4f)\nq <= 4'b50;\nelse if (q == 4'b50)\nq <= 4'b51;\nelse if (q == 4'b51)\nq <= 4'b52;\nelse if (q == 4'b52)\nq <= 4'b53;\nelse if (q == 4'b53)\nq <= 4'b54;\nelse if (q == 4'b54)\nq <= 4'b55;\nelse if (q == 4'b55)\nq <= 4'b56;\nelse if (q == 4'b56)\nq <= 4'b57;\nelse if (q == 4'b57)\nq <= 4'b58;\nelse if (q == 4'b58)\nq <= 4'b59;\nelse if (q == 4'b59)\nq <= 4'b5a;\nelse if (q == 4'b5a)\nq <= 4'b5b;\nelse if (q == 4'b5b)\nq <= 4'b5c;\nelse if (q == 4'b5c)\nq <= 4'b5d;\nelse if (q == 4'b5d)\nq <= 4'b5e;\nelse if (q == 4'b5e)\nq <= 4'b5f;\nelse if (q == 4'b5f)\nq <= 4'b60;\nelse if (q == 4'b60)\nq <= 4'b61;\nelse if (q == 4'b61)\nq <= 4'b62;\nelse if (q"}
{"task_id": "always_if", "completion": "Task: Write Verilog program for the given description.\nDescription: Build a 2-to-1 mux that chooses between a and b. Choose b if both sel_b1 and sel_b2 are true. Otherwise, choose a. Do the same twice, once using assign statements and once using a procedural if statement..\nGenerated Code: module top_module (\n\tinput a,\n\tinput b,\n\tinput sel_b1,\n\tinput sel_b2,\n\toutput out_assign,\n\toutput reg out_always\n);\n\n\n\n//------------------------------------------------------------------------------\n// Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Local Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Global Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Instance Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Constructors\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Functions\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Outputs\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Internal Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Return type definitions\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Constant declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Types\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Constants\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Outputs\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Inputs\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Register declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Dynamic Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Instantiation\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Static Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Instance Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Constructors\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Functions\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Outputs\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Outputs\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Dynamic Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Instance Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Constructors\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Static Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Dynamic Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Instance Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Dynamic Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Outputs\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Outputs\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Static Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Instance Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Dynamic Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Constructors\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Outputs\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Instance Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Dynamic Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Outputs\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Static Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Instance Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Dynamic Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Outputs\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Outputs\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Static Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Instance Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Dynamic Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Outputs\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Static Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Instance Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Dynamic Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Outputs\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Outputs\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Instance Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Dynamic Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Outputs\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Static Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Instance Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Dynamic Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Outputs\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Outputs\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Instance Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Dynamic Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Outputs\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Static Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Instance Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Dynamic Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Outputs\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Outputs\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Static Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Instance Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Dynamic Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Outputs\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Static Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Instance Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Outputs\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Outputs\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Static Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Instance Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Dynamic Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Outputs\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Static Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Instance Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Outputs\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Outputs\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Static Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Instance Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Dynamic Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Outputs\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Outputs\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Static Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Instance Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Outputs\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Outputs\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Static Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Instance Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Dynamic Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Outputs\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Outputs\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Static Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Instance Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Outputs\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Outputs\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Static Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Instance Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Outputs\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Outputs\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Static Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Instance Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Outputs\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Outputs\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Static Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Instance Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Outputs\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Outputs\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Static Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Outputs\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Outputs\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Static Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Outputs\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Outputs\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Instance Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Outputs\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Outputs\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Static Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Outputs\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Outputs\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Static Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Instance Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Outputs\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Outputs\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Static Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Outputs\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Outputs\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Instance Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Outputs\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Outputs\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Static Declarations\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Outputs\n//------------------------------------------------------------------------------\n\n//----------------------------------------------------------------"}
{"task_id": "kmap1", "completion": "Task: Write Verilog program for the given description.\nDescription: Implement the circuit described by the Karnaugh map below.\n//        a\n// bc   0 1 \n//  00 | 0 | 1 |\n//  01 | 1 | 1 | \n//  11 | 1 | 1 | \n//  10 | 1 | 1 | \n.\nGenerated Code: module top_module(\n\tinput a, \n\tinput b,\n\tinput c,\n\toutput out\n);\n\n\nassign out = a + b + c;\nendmodule"}
{"task_id": "2013_q2afsm", "completion": "Task: Write Verilog program for the given description.\nDescription: Consider the FSM described by the state diagram shown below:\n\n// A --r1=0,r2=0,r3=0--> A\n// A --r1=1--> B\n// A --r1=0,r2=1--> C\n// A --r1=0,r2=0,r3=0--> D\n// B (g1=1) --r1=1--> B\n// B (g1=1) --r1=0--> A\n// C (g2=1) --r2=1--> C\n// C (g2=1) --r2=0--> A\n\n// Resetn is an active-low synchronous reset that resets into state A. This FSM acts as an arbiter circuit, which controls access to some type of resource by three requesting devices. Each device makes its request for the resource by setting a signal _r[i]_ = 1, where _r[i]_ is either _r[1]_, _r[2]_, or _r[3]_. Each r[i] is an input signal to the FSM, and represents one of the three devices. The FSM stays in state _A_ as long as there are no requests. When one or more request occurs, then the FSM decides which device receives a grant to use the resource and changes to a state that sets that device's _g[i]_ signal to 1. Each _g[i]_ is an output from the FSM. There is a priority system, in that device 1 has a higher priority than device 2, and device 3 has the lowest priority. Hence, for example, device 3 will only receive a grant if it is the only device making a request when the FSM is in state _A_. Once a device, _i_, is given a grant by the FSM, that device continues to receive the grant as long as its request, _r[i]_ = 1.\n\n// Write complete Verilog code that represents this FSM. Use separate always blocks for the state table and the state flip-flops, as done in lectures. Describe the FSM outputs, _g[i]_, using either continuous assignment statement(s) or an always block (at your discretion). Assign any state codes that you wish to use..\nGenerated Code: module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput [3:1] r,\n\toutput [3:1] g\n);\n\n\nalways @(posedge clk) begin\nif(resetn) begin\ng <= 0;\nend else begin\ng <= r;\nend\nend\nendmodule // top_module"}
{"task_id": "count10", "completion": "Task: Write Verilog program for the given description.\nDescription: Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is active high synchronous, and should reset the counter to 0..\nGenerated Code: module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n\n\nalways @(posedge clk)\nif(reset)\nq <= 4'd0;\nelse if(q == 4'd0)\nq <= 4'd1;\nelse if(q == 4'd1)\nq <= 4'd2;\nelse if(q == 4'd2)\nq <= 4'd3;\nelse if(q == 4'd3)\nq <= 4'd4;\nelse if(q == 4'd4)\nq <= 4'd5;\nelse if(q == 4'd5)\nq <= 4'd6;\nelse if(q == 4'd6)\nq <= 4'd7;\nelse if(q == 4'd7)\nq <= 4'd8;\nelse if(q == 4'd8)\nq <= 4'd9;\nelse if(q == 4'd9)\nq <= 4'd10;\nelse if(q == 4'd10)\nq <= 4'd11;\nelse if(q == 4'd11)\nq <= 4'd12;\nelse if(q == 4'd12)\nq <= 4'd13;\nelse if(q == 4'd13)\nq <= 4'd14;\nelse if(q == 4'd14)\nq <= 4'd15;\nelse if(q == 4'd15)\nq <= 4'd16;\nelse if(q == 4'd16)\nq <= 4'd17;\nelse if(q == 4'd17)\nq <= 4'd18;\nelse if(q == 4'd18)\nq <= 4'd19;\nelse if(q == 4'd19)\nq <= 4'd20;\nelse if(q == 4'd20)\nq <= 4'd21;\nelse if(q == 4'd21)\nq <= 4'd22;\nelse if(q == 4'd22)\nq <= 4'd23;\nelse if(q == 4'd23)\nq <= 4'd24;\nelse if(q == 4'd24)\nq <= 4'd25;\nelse if(q == 4'd25)\nq <= 4'd26;\nelse if(q == 4'd26)\nq <= 4'd27;\nelse if(q == 4'd27)\nq <= 4'd28;\nelse if(q == 4'd28)\nq <= 4'd29;\nelse if(q == 4'd29)\nq <= 4'd30;\nelse if(q == 4'd30)\nq <= 4'd31;\nelse if(q == 4'd31)\nq <= 4'd32;\nelse if(q == 4'd32)\nq <= 4'd33;\nelse if(q == 4'd33)\nq <= 4'd34;\nelse if(q == 4'd34)\nq <= 4'd35;\nelse if(q == 4'd35)\nq <= 4'd36;\nelse if(q == 4'd36)\nq <= 4'd37;\nelse if(q == 4'd37)\nq <= 4'd38;\nelse if(q == 4'd38)\nq <= 4'd39;\nelse if(q == 4'd39)\nq <= 4'd40;\nelse if(q == 4'd40)\nq <= 4'd41;\nelse if(q == 4'd41)\nq <= 4'd42;\nelse if(q == 4'd42)\nq <= 4'd43;\nelse if(q == 4'd43)\nq <= 4'd44;\nelse if(q == 4'd44)\nq <= 4'd45;\nelse if(q == 4'd45)\nq <= 4'd46;\nelse if(q == 4'd46)\nq <= 4'd47;\nelse if(q == 4'd47)\nq <= 4'd48;\nelse if(q == 4'd48)\nq <= 4'd49;\nelse if(q == 4'd49)\nq <= 4'd50;\nelse if(q == 4'd50)\nq <= 4'd51;\nelse if(q == 4'd51)\nq <= 4'd52;\nelse if(q == 4'd52)\nq <= 4'd53;\nelse if(q == 4'd53)\nq <= 4'd54;\nelse if(q == 4'd54)\nq <= 4'd55;\nelse if(q == 4'd55)\nq <= 4'd56;\nelse if(q == 4'd56)\nq <= 4'd57;\nelse if(q == 4'd57)\nq <= 4'd58;\nelse if(q == 4'd58)\nq <= 4'd59;\nelse if(q == 4'd59)\nq <= 4'd60;\nelse if(q == 4'd60)\nq <= 4'd61;\nelse if(q == 4'd61)\nq <= 4'd62;\nelse if(q == 4'd62)\nq <= 4'd63;\nelse if(q == 4'd63)\nq <= 4'd64;\nelse if(q == 4'd64)\nq <= 4'd65;\nelse if(q == 4'd65)\nq <= 4'd66;\nelse if(q == 4'd66)\nq <= 4'd67;\nelse if(q == 4'd67)\nq <= 4'd68;\nelse if(q == 4'd68)\nq <= 4'd69;\nelse if(q == 4'd69)\nq <= 4'd70;\nelse if(q == 4'd70)\nq <= 4'd71;\nelse if(q == 4'd71)\nq <= 4'd72;\nelse if(q == 4'd72)\nq <= 4'd73;\nelse if(q == 4'd73)\nq <= 4'd74;\nelse if(q == 4'd74)\nq <= 4'd75;\nelse if(q == 4'd75)\nq <= 4'd76;\nelse if(q == 4'd76)\nq <= 4'd77;\nelse if(q == 4'd77)\nq <= 4'd78;\nelse if(q == 4'd78)\nq <= 4'd79;\nelse if(q == 4'd79)\nq <= 4'd80;\nelse if(q == 4'd80)\nq <= 4'd81;\nelse if(q == 4'd81)\nq <= 4'd82;\nelse if(q == 4'd82)\nq <= 4'd83;\nelse if(q == 4'd83)\nq <= 4'd84;\nelse if(q == 4'd84)\nq <= 4'd85;\nelse if(q == 4'd85)\nq <= 4'd86;\nelse if(q == 4'd86)\nq <= 4'd87;\nelse if(q == 4'd87)\nq <= 4'd88;\nelse if(q == 4'd88)\nq <= 4'd89;\nelse if(q == 4'd89)\nq <= 4'd90;\nelse if(q == 4'd90)\nq <= 4'd91;\nelse if(q == 4'd91)\nq <= 4'd92;\nelse if(q == 4'd92)\nq <= 4'd93;\nelse if(q == 4'd93)\nq <= 4'd94;\nelse if(q == 4'd94)\nq <= 4'd95;\nelse if(q == 4'd95)\nq <= 4'd96;\nelse if(q == 4'd96)\nq <= 4'd97;\nelse if(q == 4'd97)\nq <= 4'd98;\nelse if(q == 4'd98)\nq <= 4'd99;\nelse if(q == 4'd99)\nq <= 4'd100;\nelse if(q == 4'd100)\nq <= 4'd101;\nelse if(q == 4'd101)\nq <= 4'd102;\nelse if(q == 4'd102)\nq <= 4'd103;\nelse if(q == 4'd103)\nq <= 4'd104;\nelse if(q == 4'd104)\nq <= 4'd105;\nelse if(q == 4'd105)\nq <= 4'd106;\nelse if(q == 4'd106)\nq <= 4'd107;\nelse if(q == 4'd107)\nq <= 4'd108;\nelse if(q == 4'd108)\nq <= 4'd109;\nelse if(q == 4'd109)\nq <= 4'd110;\nelse if(q == 4'd110)\nq <= 4'd111;\nelse if(q == 4'd111)\nq <= 4'd112;\nelse if(q == 4'd112)\nq <= 4'd113;\nelse if(q == 4'd113)\nq <= 4'd114;\nelse if(q"}
{"task_id": "fsm_ps2", "completion": "Task: Write Verilog program for the given description.\nDescription: The PS/2 mouse protocol sends messages that are three bytes long. However, within a continuous byte stream, it's not obvious where messages start and end. The only indication is that the first byte of each three byte message always has in[3]=1 (but in[3] of the other two bytes may be 1 or 0 depending on data). We want a finite state machine that will search for message boundaries when given an input byte stream. The algorithm we'll use is to discard bytes until we see one with in[3]=1. We then assume that this is byte 1 of a message, and signal the receipt of a message once all 3 bytes have been received (done). The FSM should signal done in the cycle immediately after the third byte of each message was successfully received. Reset should be active high synchronous..\nGenerated Code: module top_module (\n\tinput clk,\n\tinput [7:0] in,\n\tinput reset,\n\toutput done\n);\n\n\nparameter width = 8;\nparameter height = 16;\nparameter address_width = 4;\nparameter address_height = 2;\nparameter number_of_address_bits = address_width * address_height;\nparameter number_of_bytes_per_address = width * height / number_of_address_bits;\nparameter number_of_address_words = number_of_address_bits / width;\nparameter number_of_bytes_per_address_words = number_of_bytes_per_address / number_of_address_bits / width;\nparameter number_of_address_words_per_byte = number_of_address_words / width;\nparameter number_of_bytes_per_address_words_per_byte = number_of_bytes_per_address / width;\nparameter number_of_address_words_per_word = number_of_address_words / width;\nparameter number_of_bytes_per_address_words_per_word = number_of_bytes_per_address / width;\nparameter number_of_address_words_per_word_group = number_of_address_words / width;\nparameter number_of_bytes_per_address_words_per_word_group = number_of_bytes_per_address / width;\nparameter number_of_address_words_per_word_group_group = number_of_address_words / width;\nparameter number_of_bytes_per_address_words_per_word_group_group = number_of_bytes_per_address / width;\nparameter number_of_address_words_per_word_group_group_group = number_of_address_words / width;\nparameter number_of_bytes_per_address_words_per_word_group_group_group = number_of_bytes_per_address / width;\nparameter number_of_address_words_per_word_group_group_group_group = number_of_address_words / width;\nparameter number_of_bytes_per_address_words_per_word_group_group_group_group = number_of_bytes_per_address / width;\nparameter number_of_address_words_per_word_group_group_group_group_group = number_of_address_words / width;\nparameter number_of_bytes_per_address_words_per_word_group_group_group_group_group = number_of_bytes_per_address / width;\nparameter number_of_address_words_per_word_group_group_group_group_group_group = number_of_address_words / width;\nparameter number_of_bytes_per_address_words_per_word_group_group_group_group_group_group = number_of_bytes_per_address / width;\nparameter number_of_address_words_per_word_group_group_group_group_group_group_group_group_group = number_of_address_words / width;\nparameter number_of_bytes_per_address_words_per_word_group_group_group_group_group_group_group_group_group_group = number_of_bytes_per_address / width;\nparameter number_of_address_words_per_word_group_group_group_group_group_group_group_group_group_group_group_group_group = number_of_address_words / width;\nparameter number_of_bytes_per_address_words_per_word_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group = number_of_bytes_per_address / width;\nparameter number_of_address_words_per_word_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group_group"}
{"task_id": "mux2to1", "completion": "Task: Write Verilog program for the given description.\nDescription: Create a one-bit wide, 2-to-1 multiplexer. When sel=0, choose a. When sel=1, choose b..\nGenerated Code: module top_module (\n\tinput a,\n\tinput b,\n\tinput sel,\n\toutput out\n);\n\n\n\n//-----------------------------------------------------------------------------\n// Constants\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Declarations\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Local Declarations\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Global Declarations\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n// Instantiate Generators\n//-----------------------------------------------------------------------------\n\n//-----------------------------------------------------------------------------\n//"}
{"task_id": "gates4", "completion": "Task: Write Verilog program for the given description.\nDescription: Build a combinational circuit with four inputs, in[3:0]. There are 3 outputs: \n// (1) out_and: output of a 4-input AND gate. \n// (2) out_or: output of a 4-input OR gate. \n// (3) out_xor: output of a 4-input XOR gate.\n.\nGenerated Code: module top_module (\n\tinput [3:0] in,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor\n);\n\n\nassign out_and = in[3];\nassign out_or = in[2];\nassign out_xor = in[1];\nendmodule"}
{"task_id": "2014_q3bfsm", "completion": "Task: Write Verilog program for the given description.\nDescription: Given the state-assigned table shown below, implement the finite-state machine. Reset should synchronous active high reset the FSM to state 000.\n\n// Present state y[2:0] | Next state y[2:0] x=0, Next state y[2:0] x=1, Output z\n// 000 | 000, 001 | 0\n// 001 | 001, 100 | 0\n// 010 | 010, 001 | 0\n// 011 | 001, 010 | 1\n// 100 | 011, 100 | 1\n.\nGenerated Code: module top_module (\n\tinput clk,\n\tinput reset,\n\tinput x,\n\toutput reg z\n);\n\n\nalways @(posedge clk or negedge reset) begin\nif (~reset) begin\nz <= 1'b0;\nend else begin\nz <= x;\nend\nend\nendmodule"}
{"task_id": "2013_q2bfsm", "completion": "Task: Write Verilog program for the given description.\nDescription: Consider a finite state machine that is used to control some type of motor. The FSM has inputs x and y, which come from the motor, and produces outputs f and g, which control the motor. There is also a clock input called clk and a reset input (synchronous, active low) called resetn. The FSM has to work as follows. As long as the reset input is asserted, the FSM stays in a beginning state, called state A. When the reset signal is de-asserted, then after the next clock edge the FSM has to set the output f to 1 for one clock cycle. Then, the FSM has to monitor the x input. When x has produced the values 1, 0, 1 in three successive clock cycles, then g should be set to 1 on the following clock cycle. While maintaining g = 1 the FSM has to monitor the y input. If y has the value 1 within at most two clock cycles, then the FSM should maintain g = 1 permanently (that is, until reset). But if y does not become 1 within two clock cycles, then the FSM should set g = 0 permanently (until reset)..\nGenerated Code: module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput x,\n\tinput y,\n\toutput f,\n\toutput g\n);\n\n\n///////////////////////////////////////////////////////////////////////////////\n// Declarations\n///////////////////////////////////////////////////////////////////////////////\n\nparameter INPUT_CLK_PERIOD = 1;\nparameter OUTPUT_CLK_PERIOD = 1;\nparameter INPUT_RESETN_PERIOD = 1;\nparameter OUTPUT_RESETN_PERIOD = 1;\nparameter INPUT_X_PERIOD = 1;\nparameter OUTPUT_X_PERIOD = 1;\nparameter INPUT_Y_PERIOD = 1;\nparameter OUTPUT_Y_PERIOD = 1;\nparameter INPUT_F_PERIOD = 1;\nparameter OUTPUT_F_PERIOD = 1;\nparameter INPUT_G_PERIOD = 1;\nparameter OUTPUT_G_PERIOD = 1;\n\n///////////////////////////////////////////////////////////////////////////////\n// Global Variables\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Local Variables\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Instance Declarations\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Constructors\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Public Methods\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Public Functions\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Protected Function Implementations\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Private Function Implementations\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Internal functions\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Static Function Implementations\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Exported Functions\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Internals\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Outputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Inputs\n///////////////////////////////////////////////////////////////////////////////\n\ninput clk;\ninput resetn;\ninput x;\ninput y;\noutput f;\noutput g;\n\n///////////////////////////////////////////////////////////////////////////////\n// Constants\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Dynamic Functions\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Interfaces\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Inner Classes\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// static functions\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// internal functions\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// static functions\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Outputs\n///////////////////////////////////////////////////////////////////////////////\n\noutput f;\noutput g;\n\n///////////////////////////////////////////////////////////////////////////////\n// Constant declarations\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Static declarations\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Parameter declarations\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Internal declaration declarations\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Auxiliary declaration declarations\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Hidden declaration declarations\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Constructors\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Instantiation\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Destructor\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// End of Module\n///////////////////////////////////////////////////////////////////////////////\n"}
{"task_id": "dff8p", "completion": "Task: Write Verilog program for the given description.\nDescription: Create 8 D flip-flops with active high synchronous reset. The flip-flops must be reset to 0x34 rather than zero. All DFFs should be triggered by the negative edge of clk..\nGenerated Code: module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput reset,\n\toutput reg [7:0] q);\n\n\nalways @(posedge clk)\nif (reset)\nq <= 8'h00;\nelse if (d == 8'h00)\nq <= 8'h01;\nelse if (d == 8'h01)\nq <= 8'h02;\nelse if (d == 8'h02)\nq <= 8'h03;\nelse if (d == 8'h03)\nq <= 8'h04;\nelse if (d == 8'h04)\nq <= 8'h05;\nelse if (d == 8'h05)\nq <= 8'h06;\nelse if (d == 8'h06)\nq <= 8'h07;\nelse if (d == 8'h07)\nq <= 8'h08;\nelse if (d == 8'h08)\nq <= 8'h09;\nelse if (d == 8'h09)\nq <= 8'h0a;\nelse if (d == 8'h0a)\nq <= 8'h0b;\nelse if (d == 8'h0b)\nq <= 8'h0c;\nelse if (d == 8'h0c)\nq <= 8'h0d;\nelse if (d == 8'h0d)\nq <= 8'h0e;\nelse if (d == 8'h0e)\nq <= 8'h0f;\nelse if (d == 8'h0f)\nq <= 8'h10;\nelse if (d == 8'h10)\nq <= 8'h11;\nelse if (d == 8'h11)\nq <= 8'h12;\nelse if (d == 8'h12)\nq <= 8'h13;\nelse if (d == 8'h13)\nq <= 8'h14;\nelse if (d == 8'h14)\nq <= 8'h15;\nelse if (d == 8'h15)\nq <= 8'h16;\nelse if (d == 8'h16)\nq <= 8'h17;\nelse if (d == 8'h17)\nq <= 8'h18;\nelse if (d == 8'h18)\nq <= 8'h19;\nelse if (d == 8'h19)\nq <= 8'h1a;\nelse if (d == 8'h1a)\nq <= 8'h1b;\nelse if (d == 8'h1b)\nq <= 8'h1c;\nelse if (d == 8'h1c)\nq <= 8'h1d;\nelse if (d == 8'h1d)\nq <= 8'h1e;\nelse if (d == 8'h1e)\nq <= 8'h1f;\nelse if (d == 8'h1f)\nq <= 8'h20;\nelse if (d == 8'h20)\nq <= 8'h21;\nelse if (d == 8'h21)\nq <= 8'h22;\nelse if (d == 8'h22)\nq <= 8'h23;\nelse if (d == 8'h23)\nq <= 8'h24;\nelse if (d == 8'h24)\nq <= 8'h25;\nelse if (d == 8'h25)\nq <= 8'h26;\nelse if (d == 8'h26)\nq <= 8'h27;\nelse if (d == 8'h27)\nq <= 8'h28;\nelse if (d == 8'h28)\nq <= 8'h29;\nelse if (d == 8'h29)\nq <= 8'h2a;\nelse if (d == 8'h2a)\nq <= 8'h2b;\nelse if (d == 8'h2b)\nq <= 8'h2c;\nelse if (d == 8'h2c)\nq <= 8'h2d;\nelse if (d == 8'h2d)\nq <= 8'h2e;\nelse if (d == 8'h2e)\nq <= 8'h2f;\nelse if (d == 8'h2f)\nq <= 8'h30;\nelse if (d == 8'h30)\nq <= 8'h31;\nelse if (d == 8'h31)\nq <= 8'h32;\nelse if (d == 8'h32)\nq <= 8'h33;\nelse if (d == 8'h33)\nq <= 8'h34;\nelse if (d == 8'h34)\nq <= 8'h35;\nelse if (d == 8'h35)\nq <= 8'h36;\nelse if (d == 8'h36)\nq <= 8'h37;\nelse if (d == 8'h37)\nq <= 8'h38;\nelse if (d == 8'h38)\nq <= 8'h39;\nelse if (d == 8'h39)\nq <= 8'h3a;\nelse if (d == 8'h3a)\nq <= 8'h3b;\nelse if (d == 8'h3b)\nq <= 8'h3c;\nelse if (d == 8'h3c)\nq <= 8'h3d;\nelse if (d == 8'h3d)\nq <= 8'h3e;\nelse if (d == 8'h3e)\nq <= 8'h3f;\nelse if (d == 8'h3f)\nq <= 8'h40;\nelse if (d == 8'h40)\nq <= 8'h41;\nelse if (d == 8'h41)\nq <= 8'h42;\nelse if (d == 8'h42)\nq <= 8'h43;\nelse if (d == 8'h43)\nq <= 8'h44;\nelse if (d == 8'h44)\nq <= 8'h45;\nelse if (d == 8'h45)\nq <= 8'h46;\nelse if (d == 8'h46)\nq <= 8'h47;\nelse if (d == 8'h47)\nq <= 8'h48;\nelse if (d == 8'h48)\nq <= 8'h49;\nelse if (d == 8'h49)\nq <= 8'h4a;\nelse if (d == 8'h4a)\nq <= 8'h4b;\nelse if (d == 8'h4b)\nq <= 8'h4c;\nelse if (d == 8'h4c)\nq <= 8'h4d;\nelse if (d == 8'h4d)\nq <= 8'h4e;\nelse if (d == 8'h4e)\nq <= 8'h4f;\nelse if (d == 8'h4f)\nq <= 8'h50;\nelse if (d == 8'h50)\nq <= 8'h51;\nelse if (d == 8'h51)\nq <= 8'h52;\nelse if (d == 8'h52)\nq <= 8'h53;\nelse if (d == 8'h53)\nq <= 8'h54;\nelse if (d == 8'h54)\nq <= 8'h55;\nelse if (d == 8'h55)\nq <= 8'h56;\nelse if (d == 8'h56)\nq <= 8'h57;\nelse if (d == 8'h57)\nq <= 8'h58;\nelse if (d == 8'h58)\nq <= 8'h59;\nelse if (d == 8'h59)\nq <= 8'h5a;\nelse if (d == 8'h5a)\nq <= 8'h5b;\nelse if (d == 8'h5b)\nq <= 8'h5c;\nelse if (d == 8'h5c)\nq <= 8'h5d;\nelse if (d == 8'h5d)\nq <= 8'h5e;\nelse if (d == 8'h5e)\nq <= 8'h5f;\nelse if (d == 8'h5f)\nq <= 8'h60;\nelse if (d == 8'h60)\nq <= 8'h61;\nelse if (d == 8'"}
{"task_id": "reduction", "completion": "Task: Write Verilog program for the given description.\nDescription: Parity checking is often used as a simple method of detecting errors when transmitting data through an imperfect channel. Create a circuit that will compute a parity bit for a 8-bit byte (which will add a 9th bit to the byte). We will use \"even\" parity, where the parity bit is just the XOR of all 8 data bits..\nGenerated Code: module top_module (\n\tinput [7:0] in,\n\toutput parity\n);\n\n\nassign parity = in[7:0];\n\nendmodule"}
{"task_id": "fsm3comb", "completion": "Task: Write Verilog program for the given description.\nDescription: The following is the state transition table for a Moore state machine with one input, one output, and four states. Use the following state encoding: A=2'b00, B=2'b01, C=2'b10, D=2'b11.Implement only the state transition logic and output logic (the combinational logic portion) for this state machine. Given the current state (state), compute the next_state and output (out) based on the state transition table.\n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1.\nGenerated Code: module top_module (\n\tinput in,\n\tinput [1:0] state,\n\toutput reg [1:0] next_state,\n\toutput out\n);\n\n\nassign out = next_state[state];\nassign next_state[state] = state + 1;\nassign next_state[state] = state + 2;\nassign next_state[state] = state + 3;\nassign next_state[state] = state + 4;\nassign next_state[state] = state + 5;\nassign next_state[state] = state + 6;\nassign next_state[state] = state + 7;\nassign next_state[state] = state + 8;\nassign next_state[state] = state + 9;\nassign next_state[state] = state + 10;\nassign next_state[state] = state + 11;\nassign next_state[state] = state + 12;\nassign next_state[state] = state + 13;\nassign next_state[state] = state + 14;\nassign next_state[state] = state + 15;\nassign next_state[state] = state + 16;\nassign next_state[state] = state + 17;\nassign next_state[state] = state + 18;\nassign next_state[state] = state + 19;\nassign next_state[state] = state + 20;\nassign next_state[state] = state + 21;\nassign next_state[state] = state + 22;\nassign next_state[state] = state + 23;\nassign next_state[state] = state + 24;\nassign next_state[state] = state + 25;\nassign next_state[state] = state + 26;\nassign next_state[state] = state + 27;\nassign next_state[state] = state + 28;\nassign next_state[state] = state + 29;\nassign next_state[state] = state + 30;\nassign next_state[state] = state + 31;\nassign next_state[state] = state + 32;\nassign next_state[state] = state + 33;\nassign next_state[state] = state + 34;\nassign next_state[state] = state + 35;\nassign next_state[state] = state + 36;\nassign next_state[state] = state + 37;\nassign next_state[state] = state + 38;\nassign next_state[state] = state + 39;\nassign next_state[state] = state + 40;\nassign next_state[state] = state + 41;\nassign next_state[state] = state + 42;\nassign next_state[state] = state + 43;\nassign next_state[state] = state + 44;\nassign next_state[state] = state + 45;\nassign next_state[state] = state + 46;\nassign next_state[state] = state + 47;\nassign next_state[state] = state + 48;\nassign next_state[state] = state + 49;\nassign next_state[state] = state + 50;\nassign next_state[state] = state + 51;\nassign next_state[state] = state + 52;\nassign next_state[state] = state + 53;\nassign next_state[state] = state + 54;\nassign next_state[state] = state + 55;\nassign next_state[state] = state + 56;\nassign next_state[state] = state + 57;\nassign next_state[state] = state + 58;\nassign next_state[state] = state + 59;\nassign next_state[state] = state + 60;\nassign next_state[state] = state + 61;\nassign next_state[state] = state + 62;\nassign next_state[state] = state + 63;\nassign next_state[state] = state + 64;\nassign next_state[state] = state + 65;\nassign next_state[state] = state + 66;\nassign next_state[state] = state + 67;\nassign next_state[state] = state + 68;\nassign next_state[state] = state + 69;\nassign next_state[state] = state + 70;\nassign next_state[state] = state + 71;\nassign next_state[state] = state + 72;\nassign next_state[state] = state + 73;\nassign next_state[state] = state + 74;\nassign next_state[state] = state + 75;\nassign next_state[state] = state + 76;\nassign next_state[state] = state + 77;\nassign next_state[state] = state + 78;\nassign next_state[state] = state + 79;\nassign next_state[state] = state + 80;\nassign next_state[state] = state + 81;\nassign next_state[state] = state + 82;\nassign next_state[state] = state + 83;\nassign next_state[state] = state + 84;\nassign next_state[state] = state + 85;\nassign next_state[state] = state + 86;\nassign next_state[state] = state + 87;\nassign next_state[state] = state + 88;\nassign next_state[state] = state + 89;\nassign next_state[state] = state + 90;\nassign next_state[state] = state + 91;\nassign next_state[state] = state + 92;\nassign next_state[state] = state + 93;\nassign next_state[state] = state + 94;\nassign next_state[state] = state + 95;\nassign next_state[state] = state + 96;\nassign next_state[state] = state + 97;\nassign next_state[state] = state + 98;\nassign next_state[state] = state + 99;\nassign next_state[state] = state + 100;\nassign next_state[state] = state + 101;\nassign next_state[state] = state + 102;\nassign next_state[state] = state + 103;\nassign next_state[state] = state + 104;\nassign next_state[state] = state + 105;\nassign next_state[state] = state + 106;\nassign next_state[state] = state + 107;\nassign next_state[state] = state + 108;\nassign next_state[state] = state + 109;\nassign next_state[state] = state + 110;\nassign next_state[state] = state + 111;\nassign next_state[state] = state + 112;\nassign next_state[state] = state + 113;\nassign next_state[state] = state + 114;\nassign next_state[state] = state + 115;\nassign next_state[state] = state + 116;\nassign next_state[state] = state + 117;\nassign next_state[state] = state + 118;\nassign next_state[state] = state + 119;\nassign next_state[state] = state + 120;\nassign next_state[state] = state + 121;\nassign next_state[state] = state + 122;\nassign next_state[state] = state + 123;\nassign next_state[state] = state + 124;\nassign next_state[state] = state + 125;\nassign next_state[state] = state + 126;\nassign next_state[state] = state + 127;\nassign next_state[state] = state + 128;\nassign next_state[state] = state + 129;\nassign next_state[state] = state + 130;"}
{"task_id": "mt2015_q4b", "completion": "Task: Write Verilog program for the given description.\nDescription: The module can be described by the following simulation waveform: \n\n// time            x               y               z               \n// 0ns             0               0               1               \n// 5ns             0               0               1               \n// 10ns            0               0               1               \n// 15ns            0               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               0               \n// 30ns            1               0               0               \n// 35ns            0               1               0               \n// 40ns            0               1               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               1               \n// 60ns            0               1               0               \n// 65ns            0               1               0               \n// 70ns            1               1               1               \n// 75ns            0               1               0               \n// 80ns            0               1               0               \n// 85ns            0               1               0               \n// 90ns            1               0               0               .\nGenerated Code: module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n\n\nassign z = x + y;\nendmodule"}
{"task_id": "2012_q2fsm", "completion": "Task: Write Verilog program for the given description.\nDescription: Consider the state machine shown below:\n\n// A (0) --1--> B\n// A (0) --0--> A\n// B (0) --1--> C\n// B (0) --0--> D\n// C (0) --1--> E\n// C (0) --0--> D\n// D (0) --1--> F\n// D (0) --0--> A\n// E (1) --1--> E\n// E (1) --0--> D\n// F (1) --1--> C\n// F (1) --0--> D\n\n// Reset resets into state A and is synchronous active-high. \n\n// Write complete Verilog code that represents this FSM. Use separate **always** blocks for the state table and the state flip-flops. Describe the FSM output, which is called _z_, using either continuous assignment statement(s) or an **always** block (at your discretion). Assign any state codes that you wish to use..\nGenerated Code: module top_module (\n\tinput clk,\n\tinput reset,\n\tinput w,\n\toutput z\n);\n\n\nassign z = 1'b0;\nassign z = 1'b1;\nassign z = 1'b2;\nassign z = 1'b3;\nassign z = 1'b4;\nassign z = 1'b5;\nassign z = 1'b6;\nassign z = 1'b7;\nassign z = 1'b8;\nassign z = 1'b9;\nassign z = 1'b10;\nassign z = 1'b11;\nassign z = 1'b12;\nassign z = 1'b13;\nassign z = 1'b14;\nassign z = 1'b15;\nassign z = 1'b16;\nassign z = 1'b17;\nassign z = 1'b18;\nassign z = 1'b19;\nassign z = 1'b20;\nassign z = 1'b21;\nassign z = 1'b22;\nassign z = 1'b23;\nassign z = 1'b24;\nassign z = 1'b25;\nassign z = 1'b26;\nassign z = 1'b27;\nassign z = 1'b28;\nassign z = 1'b29;\nassign z = 1'b30;\nassign z = 1'b31;\nassign z = 1'b32;\nassign z = 1'b33;\nassign z = 1'b34;\nassign z = 1'b35;\nassign z = 1'b36;\nassign z = 1'b37;\nassign z = 1'b38;\nassign z = 1'b39;\nassign z = 1'b40;\nassign z = 1'b41;\nassign z = 1'b42;\nassign z = 1'b43;\nassign z = 1'b44;\nassign z = 1'b45;\nassign z = 1'b46;\nassign z = 1'b47;\nassign z = 1'b48;\nassign z = 1'b49;\nassign z = 1'b50;\nassign z = 1'b51;\nassign z = 1'b52;\nassign z = 1'b53;\nassign z = 1'b54;\nassign z = 1'b55;\nassign z = 1'b56;\nassign z = 1'b57;\nassign z = 1'b58;\nassign z = 1'b59;\nassign z = 1'b60;\nassign z = 1'b61;\nassign z = 1'b62;\nassign z = 1'b63;\nassign z = 1'b64;\nassign z = 1'b65;\nassign z = 1'b66;\nassign z = 1'b67;\nassign z = 1'b68;\nassign z = 1'b69;\nassign z = 1'b70;\nassign z = 1'b71;\nassign z = 1'b72;\nassign z = 1'b73;\nassign z = 1'b74;\nassign z = 1'b75;\nassign z = 1'b76;\nassign z = 1'b77;\nassign z = 1'b78;\nassign z = 1'b79;\nassign z = 1'b80;\nassign z = 1'b81;\nassign z = 1'b82;\nassign z = 1'b83;\nassign z = 1'b84;\nassign z = 1'b85;\nassign z = 1'b86;\nassign z = 1'b87;\nassign z = 1'b88;\nassign z = 1'b89;\nassign z = 1'b90;\nassign z = 1'b91;\nassign z = 1'b92;\nassign z = 1'b93;\nassign z = 1'b94;\nassign z = 1'b95;\nassign z = 1'b96;\nassign z = 1'b97;\nassign z = 1'b98;\nassign z = 1'b99;\nassign z = 1'b100;\nassign z = 1'b101;\nassign z = 1'b102;\nassign z = 1'b103;\nassign z = 1'b104;\nassign z = 1'b105;\nassign z = 1'b106;\nassign z = 1'b107;\nassign z = 1'b108;\nassign z = 1'b109;\nassign z = 1'b110;\nassign z = 1'b111;\nassign z = 1'b112;\nassign z = 1'b113;\nassign z = 1'b114;\nassign z = 1'b115;\nassign z = 1'b116;\nassign z = 1'b117;\nassign z = 1'b118;\nassign z = 1'b119;\nassign z = 1'b120;\nassign z = 1'b121;\nassign z = 1'b122;\nassign z = 1'b123;\nassign z = 1'b124;\nassign z = 1'b125;\nassign z = 1'b126;\nassign z = 1'b127;\nassign z = 1'b128;\nassign z = 1'b129;\nassign z = 1'b130;\nassign z = 1'b131;\nassign z = 1'b132;\nassign z = 1'b133;\nassign z = 1'b134;\nassign z = 1'b135;\nassign z = 1'b136;\nassign z = 1'b137;\nassign z = 1'b138;\nassign z = 1'b139;\nassign z = 1'b140;\nassign z = 1'b141;\nassign z = 1'b142;\nassign z = 1'b143;\nassign z = 1'b144;\nassign z = 1'b145;\nassign z = 1'b146;\nassign z = 1'b147;\nassign z = 1'b148;\nassign z = 1'b149;\nassign z = 1'b150;\nassign z = 1'b151;\nassign z = 1'b152;\nassign z = 1'b153;\nassign z = 1'b154;\nassign z = 1'b155;\nassign z = 1'b156;\nassign z = 1'b157;\nassign z = 1'b158;\nassign z = 1'b159;\nassign z = 1'b160;\nassign z = 1'b161;\nassign z = 1'b162;\nassign z = 1'b163;\nassign z = 1'b164;\nassign z = 1'b165;\nassign z = 1'b166;\nassign z = 1'b167;\nassign z = 1'b168;\nassign z = 1'b169;\nassign z = 1'b170;\nassign z = 1'b171;\nassign z = 1'b172;\nassign z = 1'b173;\nassign z = 1'b174;\nassign z = 1'b175;\nassign z = 1'b176;\nassign z = 1'"}
{"task_id": "dff16e", "completion": "Task: Write Verilog program for the given description.\nDescription: Create 16 D flip-flops. It's sometimes useful to only modify parts of a group of flip-flops. The byte-enable inputs control whether each byte of the 16 registers should be written to on that cycle. byteena[1] controls the upper byte d[15:8], while byteena[0] controls the lower byte d[7:0]. resetn is a synchronous, active-low reset. All DFFs should be triggered by the positive edge of clk..\nGenerated Code: module top_module(\n\tinput clk,\n\tinput resetn,\n\tinput [1:0] byteena,\n\tinput [15:0] d,\n\toutput reg [15:0] q);\n\n\nalways @(posedge clk)\nbegin\nif(resetn == 1'b1)\nq <= 16'd0;\nelse if(byteena == 2'b00)\nq <= 16'd0;\nelse if(byteena == 2'b01)\nq <= 16'd1;\nelse if(byteena == 2'b10)\nq <= 16'd2;\nelse if(byteena == 2'b11)\nq <= 16'd3;\nelse if(byteena == 2'b20)\nq <= 16'd4;\nelse if(byteena == 2'b21)\nq <= 16'd5;\nelse if(byteena == 2'b22)\nq <= 16'd6;\nelse if(byteena == 2'b23)\nq <= 16'd7;\nelse if(byteena == 2'b24)\nq <= 16'd8;\nelse if(byteena == 2'b25)\nq <= 16'd9;\nelse if(byteena == 2'b26)\nq <= 16'd10;\nelse if(byteena == 2'b27)\nq <= 16'd11;\nelse if(byteena == 2'b28)\nq <= 16'd12;\nelse if(byteena == 2'b29)\nq <= 16'd13;\nelse if(byteena == 2'b30)\nq <= 16'd14;\nelse if(byteena == 2'b31)\nq <= 16'd15;\nend\nendmodule"}
{"task_id": "edgedetect", "completion": "Task: Write Verilog program for the given description.\nDescription: For each bit in an 8-bit vector, detect when the input signal changes from 0 in one clock cycle to 1 the next (similar to positive edge detection). The output bit should be set the cycle after a 0 to 1 transition occurs..\nGenerated Code: module top_module(\n\tinput clk,\n\tinput [7:0] in,\n\toutput reg [7:0] pedge);\n\n\nalways @(posedge clk)\nbegin\nif(in[7:0])\npedge[7:0] = in[7:0] + 1;\nelse\npedge[7:0] = in[7:0];\nend\nendmodule"}
{"task_id": "rule90", "completion": "Task: Write Verilog program for the given description.\nDescription: Rule 90 is a one-dimensional cellular automaton with interesting properties. The rules are simple. There is a one-dimensional array of cells (on or off). At each time step, the next state of each cell is the XOR of the cell's two current neighbours:\n// Left | Center | Right | Center's next state\n// 1 | 1 | 1 | 0\n// 1 | 1 | 0 | 1\n// 1 | 0 | 1 | 0\n// 1 | 0 | 0 | 1\n// 0 | 1 | 1 | 1\n// 0 | 1 | 0 | 0 \n// 0 | 0 | 1 | 1\n// 0 | 0 | 0 | 0\n// In this circuit, create a 512-cell system (q[511:0]), and advance by one time step each clock cycle. The load input indicates the state of the system should be loaded with data[511:0]. Assume the boundaries (q[-1] and q[512]) are both zero (off)..\nGenerated Code: module top_module(\n\tinput clk,\n\tinput load,\n\tinput [511:0] data,\n\toutput reg [511:0] q);\n\n\nalways @(posedge clk)\nif(load == 1'b1)\nq <= data;\nelse if(load == 1'b0)\nq <= data;\nendmodule"}
{"task_id": "mt2015_eq2", "completion": "Task: Write Verilog program for the given description.\nDescription: Create a circuit that has two 2-bit inputs A[1:0] and B[1:0], and produces an output z. The value of z should be 1 if A = B, otherwise z should be 0..\nGenerated Code: module top_module(\n\tinput [1:0] A,\n\tinput [1:0] B,\n\toutput z);\n\n\nparameter DESCRIPTION = \"\"Create a circuit that has two 2-bit inputs A[1:0] and B[1:0], and produces an output z.\"\";\nendmodule"}
{"task_id": "gatesv100", "completion": "Task: Write Verilog program for the given description.\nDescription: You are given a 100-bit input vector in[99:0]. We want to know some relationships between each bit and its neighbour: \n// (1) out_both: Each bit of this output vector should indicate whether both the corresponding input bit and its neighbour to the left are '1'. For example, out_both[98] should indicate if in[98] and in[99] are both 1. Since in[99] has no neighbour to the left, the answer is obvious so we don't need to know out_both[99]. \n// (2) out_any: Each bit of this output vector should indicate whether any of the corresponding input bit and its neighbour to the right are '1'. For example, out_any[2] should indicate if either in[2] or in[1] are 1. Since in[0] has no neighbour to the right, the answer is obvious so we don't need to know out_any[0]. \n// (3) out_different: Each bit of this output vector should indicate whether the corresponding input bit is different from its neighbour to the left. For example, out_different[98] should indicate if in[98] is different from in[99]. For this part, treat the vector as wrapping around, so in[99]'s neighbour to the left is in[0].\n.\nGenerated Code: module top_module (\n\tinput [99:0] in,\n\toutput [98:0] out_both,\n\toutput [99:1] out_any,\n\toutput [99:0] out_different\n);\n\n\nassign out_both[98] = in[98];\nassign out_both[99] = in[99];\nassign out_any[98] = in[98];\nassign out_any[99] = in[99];\nassign out_different[98] = in[98];\nassign out_different[99] = in[99];\nendmodule"}
{"task_id": "m2014_q4a", "completion": "Task: Write Verilog program for the given description.\nDescription: Implement a D latch using an always block.\n.\nGenerated Code: module top_module (\n\tinput d,\n\tinput ena,\n\toutput logic q\n);\n\n\n\nassign q = ena ? d : 1'b0;\nendmodule // top_module"}
{"task_id": "mux256to1v", "completion": "Task: Write Verilog program for the given description.\nDescription: Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc..\nGenerated Code: module top_module (\n\tinput [1023:0] in,\n\tinput [7:0] sel,\n\toutput [3:0] out\n);\n\n\n`include \"\"top_module.vh\"\"\n\nfunction main();\ninput [1023:0] in;\ninput [7:0] sel;\noutput [3:0] out;\n\ninitial begin\nout = 0;\nout = 1;\nout = 2;\nout = 3;\nout = 4;\nout = 5;\nout = 6;\nout = 7;\nout = 8;\nout = 9;\nout = 10;\nout = 11;\nout = 12;\nout = 13;\nout = 14;\nout = 15;\nout = 16;\nout = 17;\nout = 18;\nout = 19;\nout = 20;\nout = 21;\nout = 22;\nout = 23;\nout = 24;\nout = 25;\nout = 26;\nout = 27;\nout = 28;\nout = 29;\nout = 30;\nout = 31;\nout = 32;\nout = 33;\nout = 34;\nout = 35;\nout = 36;\nout = 37;\nout = 38;\nout = 39;\nout = 40;\nout = 41;\nout = 42;\nout = 43;\nout = 44;\nout = 45;\nout = 46;\nout = 47;\nout = 48;\nout = 49;\nout = 50;\nout = 51;\nout = 52;\nout = 53;\nout = 54;\nout = 55;\nout = 56;\nout = 57;\nout = 58;\nout = 59;\nout = 60;\nout = 61;\nout = 62;\nout = 63;\nout = 64;\nout = 65;\nout = 66;\nout = 67;\nout = 68;\nout = 69;\nout = 70;\nout = 71;\nout = 72;\nout = 73;\nout = 74;\nout = 75;\nout = 76;\nout = 77;\nout = 78;\nout = 79;\nout = 80;\nout = 81;\nout = 82;\nout = 83;\nout = 84;\nout = 85;\nout = 86;\nout = 87;\nout = 88;\nout = 89;\nout = 90;\nout = 91;\nout = 92;\nout = 93;\nout = 94;\nout = 95;\nout = 96;\nout = 97;\nout = 98;\nout = 99;\nout = 100;\nout = 101;\nout = 102;\nout = 103;\nout = 104;\nout = 105;\nout = 106;\nout = 107;\nout = 108;\nout = 109;\nout = 110;\nout = 111;\nout = 112;\nout = 113;\nout = 114;\nout = 115;\nout = 116;\nout = 117;\nout = 118;\nout = 119;\nout = 120;\nout = 121;\nout = 122;\nout = 123;\nout = 124;\nout = 125;\nout = 126;\nout = 127;\nout = 128;\nout = 129;\nout = 130;\nout = 131;\nout = 132;\nout = 133;\nout = 134;\nout = 135;\nout = 136;\nout = 137;\nout = 138;\nout = 139;\nout = 140;\nout = 141;\nout = 142;\nout = 143;\nout = 144;\nout = 145;\nout = 146;\nout = 147;\nout = 148;\nout = 149;\nout = 150;\nout = 151;\nout = 152;\nout = 153;\nout = 154;\nout = 155;\nout = 156;\nout = 157;\nout = 158;\nout = 159;\nout = 160;\nout = 161;\nout = 162;\nout = 163;\nout = 164;\nout = 165;\nout = 166;\nout = 167;\nout = 168;\nout = 169;\nout = 170;\nout = 171;\nout = 172;\nout = 173;\nout = 174;\nout = 175;\nout = 176;\nout = 177;\nout = 178;\nout = 179;\nout = 180;\nout = 181;\nout = 182;\nout = 183;\nout = 184;\nout = 185;\nout = 186;\nout = 187;\nout = 188;\nout = 189;\nout = 190;\nout = 191;\nout = 192;\nout = 193;\nout = 194;\nout = 195;\nout = 196;\nout = 197;\nout = 198;\nout = 199;\nout = 200;\nout = 201;\nout = 202;\nout = 203;\nout = 204;\nout = 205;\nout = 206;\nout = 207;\nout = 208;\nout = 209;\nout = 210;\nout = 211;\nout = 212;\nout = 213;\nout = 214;\nout = 215;\nout = 216;\nout = 217;\nout = 218;\nout = 219;\nout = 220;\nout = 221;\nout = 222;\nout = 223;\nout = 224;\nout = 225;\nout = 226;\nout = 227;\nout = 228;\nout = 229;\nout = 230;\nout = 231;\nout = 232;\nout = 233;\nout = 234;\nout = 235;\nout = 236;\nout = 237;\nout = 238;\nout = 239;\nout = 240;\nout = 241;\nout = 242;\nout = 243;\nout = 244;\nout = 245;\nout = 246;\nout = 247;\nout = 248;\nout = 249;\nout = 250;\nout = 251;\nout = 252;\nout = 253;\nout = 254;\nout = 255;\nout = 256;\nout = 257;\nout = 258;\nout = 259;\nout = 260;\nout = 261;\nout = 262;\nout = 263;\nout = 264;\nout = 265;\nout = 266;\nout = 267;\nout = 268;\nout = 269;\nout = 270;\nout = 271;\nout = 272;\nout = 273;\nout = 274;\nout = 275;\nout = 276;\nout = 277;\nout = 278;\nout = 279;\nout = 280;\nout = 281;\nout = 282;\nout = 283;\nout = 284;\nout = 285;\nout = 286;\nout = 287;\nout = 288;\nout = 289;\nout = 290;\nout = 291;\nout = 292;\nout = 293;\nout = 294;\nout = 295;\nout = 296;\nout = 297;\nout = 298;\nout = 299;\nout = 300;\nout = 301;\nout = 302;\nout = 303;\nout = 304;\nout = 305;\nout = 306;\nout = 307;\nout = 308;\nout = 309;\nout = 310;\nout = 311;\nout = 312;\nout = 313;\nout = 314;\nout = 315;\nout = 316;\nout = 317;\nout = 318;\nout = 319;\nout = 320;\nout = 321;\nout = 322;\nout = 323;\nout = 324;\nout = 325;\nout = 326;\nout = 327;\nout = 328;\nout = 329;\nout = 330;\nout = 331;\nout = 332;\nout = 333;\nout = 334;\nout = 335;\nout = 336;\nout = 337;\nout = 338;\nout = 339;\nout = 340;\nout = 341;\nout = 342;\nout = 343;\nout = 344;\nout = 345;\nout = 346;\nout = 347;\nout = 348;\nout = 349;\nout = 350;\nout = 351;\nout = 352;\nout = 353;\nout = 354;\nout = 355;\nout = 356;\nout = 357;\nout = 358;\nout = 359;\nout = 360;\nout = 361;\nout = 362;\nout = 363;\nout = 364;\nout = 365;\nout = 366;\nout = 367;\nout = 368;\nout = 369;\nout = 370;\nout = 371;\nout = 372;\n"}
{"task_id": "mux9to1v", "completion": "Task: Write Verilog program for the given description.\nDescription: Create a 16-bit wide, 9-to-1 multiplexer. sel=0 chooses a, sel=1 chooses b, etc. For the unused cases (sel=9 to 15), set all output bits to '1'..\nGenerated Code: module top_module (\n\tinput [15:0] a,\n\tinput [15:0] b,\n\tinput [15:0] c,\n\tinput [15:0] d,\n\tinput [15:0] e,\n\tinput [15:0] f,\n\tinput [15:0] g,\n\tinput [15:0] h,\n\tinput [15:0] i,\n\tinput [3:0] sel,\n\toutput logic [15:0] out\n);\n\n\nalways @(a,b,c,d,e,f,g,h,i,sel) begin\ncase (sel)\n0:out = 0;\n1:out = 1;\n2:out = 2;\n3:out = 3;\n4:out = 4;\n5:out = 5;\n6:out = 6;\n7:out = 7;\n8:out = 8;\n9:out = 9;\n10:out = 10;\n11:out = 11;\n12:out = 12;\n13:out = 13;\n14:out = 14;\n15:out = 15;\n16:out = 16;\n17:out = 17;\n18:out = 18;\n19:out = 19;\n20:out = 20;\n21:out = 21;\n22:out = 22;\n23:out = 23;\n24:out = 24;\n25:out = 25;\n26:out = 26;\n27:out = 27;\n28:out = 28;\n29:out = 29;\n30:out = 30;\n31:out = 31;\n32:out = 32;\n33:out = 33;\n34:out = 34;\n35:out = 35;\n36:out = 36;\n37:out = 37;\n38:out = 38;\n39:out = 39;\n40:out = 40;\n41:out = 41;\n42:out = 42;\n43:out = 43;\n44:out = 44;\n45:out = 45;\n46:out = 46;\n47:out = 47;\n48:out = 48;\n49:out = 49;\n50:out = 50;\n51:out = 51;\n52:out = 52;\n53:out = 53;\n54:out = 54;\n55:out = 55;\n56:out = 56;\n57:out = 57;\n58:out = 58;\n59:out = 59;\n60:out = 60;\n61:out = 61;\n62:out = 62;\n63:out = 63;\n64:out = 64;\n65:out = 65;\n66:out = 66;\n67:out = 67;\n68:out = 68;\n69:out = 69;\n70:out = 70;\n71:out = 71;\n72:out = 72;\n73:out = 73;\n74:out = 74;\n75:out = 75;\n76:out = 76;\n77:out = 77;\n78:out = 78;\n79:out = 79;\n80:out = 80;\n81:out = 81;\n82:out = 82;\n83:out = 83;\n84:out = 84;\n85:out = 85;\n86:out = 86;\n87:out = 87;\n88:out = 88;\n89:out = 89;\n90:out = 90;\n91:out = 91;\n92:out = 92;\n93:out = 93;\n94:out = 94;\n95:out = 95;\n96:out = 96;\n97:out = 97;\n98:out = 98;\n99:out = 99;\n100:out = 100;\n101:out = 101;\n102:out = 102;\n103:out = 103;\n104:out = 104;\n105:out = 105;\n106:out = 106;\n107:out = 107;\n108:out = 108;\n109:out = 109;\n110:out = 110;\n111:out = 111;\n112:out = 112;\n113:out = 113;\n114:out = 114;\n115:out = 115;\n116:out = 116;\n117:out = 117;\n118:out = 118;\n119:out = 119;\n120:out = 120;\n121:out = 121;\n122:out = 122;\n123:out = 123;\n124:out = 124;\n125:out = 125;\n126:out = 126;\n127:out = 127;\n128:out = 128;\n129:out = 129;\n130:out = 130;\n131:out = 131;\n132:out = 132;\n133:out = 133;\n134:out = 134;\n135:out = 135;\n136:out = 136;\n137:out = 137;\n138:out = 138;\n139:out = 139;\n140:out = 140;\n141:out = 141;\n142:out = 142;\n143:out = 143;\n144:out = 144;\n145:out = 145;\n146:out = 146;\n147:out = 147;\n148:out = 148;\n149:out = 149;\n150:out = 150;\n151:out = 151;\n152:out = 152;\n153:out = 153;\n154:out = 154;\n155:out = 155;\n156:out = 156;\n157:out = 157;\n158:out = 158;\n159:out = 159;\n160:out = 160;\n161:out = 161;\n162:out = 162;\n163:out = 163;\n164:out = 164;\n165:out = 165;\n166:out = 166;\n167:out = 167;\n168:out = 168;\n169:out = 169;\n170:out = 170;\n171:out = 171;\n172:out = 172;\n173:out = 173;\n174:out = 174;\n175:out = 175;\n176:out = 176;\n177:out = 177;\n178:out = 178;\n179:out = 179;\n180:out = 180;\n181:out = 181;\n182:out = 182;\n183:out = 183;\n184:out = 184;\n185:out = 185;\n186:out = 186;\n187:out = 187;\n188:out = 188;\n189:out = 189;\n190:out = 190;\n191:out = 191;\n192:out = 192;\n193:out = 193;\n194:out = 194;\n195:out = 195;\n196:out = 196;\n197:out = 197;\n198:out = 198;\n199:out = 199;\n200:out = 200;\n201:out = 201;\n202:out = 202;\n203:out = 203;\n204:out = 204;\n205:out = 205;\n206:out = 206;\n207:out = 207;\n208:out = 208;\n209:out = 209;\n210:out = 210;\n211:out = 211;\n212:out = 212;\n213:out = 213;\n214:out = 214;\n215:out = 215;\n216:out = 216;\n217:out = 217;\n218:out = 218;\n219:out = 219;\n220:out = 220;\n221:out = 221;\n222:out = 222;\n223:out = 223;\n224:out = 224;\n225:out = 225;\n226:out = 226;\n227:out = 227;\n228:out = 228;\n229:out = 229;\n230:out = 230;\n231:out = 231;\n232:out = 232;\n233:out = 233;\n234:out = 234;\n235:out = 235;\n236:out = 236;\n237:out = 237;\n238:out = 238;\n239:out = 239;\n240:out = 240;\n241:out = 241;\n242:out = 242;\n243:out = 243;\n244:out = 244;\n245:out = 245;\n246:out = 246;\n247:out = 247;\n248:out = 248;\n249:out = 249;\n250:out = 250;\n251:out = 251;\n252:out = 252;\n253:out = 253;\n254:out = 254;\n255:out = 255;\n256:out = 256;\n257:out = 257;\n258:out = 258;\n259:out = 259;\n260:out = 260;"}
{"task_id": "vectorgates", "completion": "Task: Write Verilog program for the given description.\nDescription: Build a circuit that has two 3-bit inputs that computes the bitwise-OR of the two vectors, the logical-OR of the two vectors, and the inverse (NOT) of both vectors. Place the inverse of b in the upper half of out_not (i.e., bits [5:3]), and the inverse of a in the lower half..\nGenerated Code: module top_module(\n\tinput [2:0] a, \n\tinput [2:0] b, \n\toutput [2:0] out_or_bitwise,\n\toutput out_or_logical,\n\toutput [5:0] out_not\n);\n\n\nassign out_or_bitwise = a | b;\nassign out_or_logical = ~out_or_bitwise;\nassign out_not = out_or_bitwise ^ out_or_logical;\nendmodule"}
{"task_id": "fsm3onehot", "completion": "Task: Write Verilog program for the given description.\nDescription: The following is the state transition table for a Moore state machine with one input, one output, and four states. Use the following one-hot state encoding: A=4'b0001, B=4'b0010, C=4'b0100, D=4'b1000. Derive state transition and output logic equations by inspection assuming a one-hot encoding. Implement only the state transition logic and output logic (the combinational logic portion) for this state machine. \n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1.\nGenerated Code: module top_module (\n\tinput in,\n\tinput [3:0] state,\n\toutput reg [3:0] next_state,\n\toutput out\n);\n\n\nalways @(in) begin\nif (state == 4'b0000) begin\nnext_state = 4'b0000;\nend else if (state == 4'b0001) begin\nnext_state = 4'b0001;\nend else if (state == 4'b0010) begin\nnext_state = 4'b0010;\nend else if (state == 4'b0011) begin\nnext_state = 4'b0011;\nend else if (state == 4'b0100) begin\nnext_state = 4'b0100;\nend else if (state == 4'b0101) begin\nnext_state = 4'b0101;\nend else if (state == 4'b0102) begin\nnext_state = 4'b0102;\nend else if (state == 4'b0103) begin\nnext_state = 4'b0103;\nend else if (state == 4'b0104) begin\nnext_state = 4'b0104;\nend else if (state == 4'b0105) begin\nnext_state = 4'b0105;\nend else if (state == 4'b0106) begin\nnext_state = 4'b0106;\nend else if (state == 4'b0107) begin\nnext_state = 4'b0107;\nend else if (state == 4'b0108) begin\nnext_state = 4'b0108;\nend else if (state == 4'b0109) begin\nnext_state = 4'b0109;\nend else if (state == 4'b010a) begin\nnext_state = 4'b010a;\nend else if (state == 4'b010b) begin\nnext_state = 4'b010b;\nend else if (state == 4'b010c) begin\nnext_state = 4'b010c;\nend else if (state == 4'b010d) begin\nnext_state = 4'b010d;\nend else if (state == 4'b010e) begin\nnext_state = 4'b010e;\nend else if (state == 4'b010f) begin\nnext_state = 4'b010f;\nend else if (state == 4'b0110) begin\nnext_state = 4'b0110;\nend else if (state == 4'b0111) begin\nnext_state = 4'b0111;\nend else if (state == 4'b0112) begin\nnext_state = 4'b0112;\nend else if (state == 4'b0113) begin\nnext_state = 4'b0113;\nend else if (state == 4'b0114) begin\nnext_state = 4'b0114;\nend else if (state == 4'b0115) begin\nnext_state = 4'b0115;\nend else if (state == 4'b0116) begin\nnext_state = 4'b0116;\nend else if (state == 4'b0117) begin\nnext_state = 4'b0117;\nend else if (state == 4'b0118) begin\nnext_state = 4'b0118;\nend else if (state == 4'b0119) begin\nnext_state = 4'b0119;\nend else if (state == 4'b011a) begin\nnext_state = 4'b011a;\nend else if (state == 4'b011b) begin\nnext_state = 4'b011b;\nend else if (state == 4'b011c) begin\nnext_state = 4'b011c;\nend else if (state == 4'b011d) begin\nnext_state = 4'b011d;\nend else if (state == 4'b011e) begin\nnext_state = 4'b011e;\nend else if (state == 4'b011f) begin\nnext_state = 4'b011f;\nend else if (state == 4'b0120) begin\nnext_state = 4'b0120;\nend else if (state == 4'b0121) begin\nnext_state = 4'b0121;\nend else if (state == 4'b0122) begin\nnext_state = 4'b0122;\nend else if (state == 4'b0123) begin\nnext_state = 4'b0123;\nend else if (state == 4'b0124) begin\nnext_state = 4'b0124;\nend else if (state == 4'b0125) begin\nnext_state = 4'b0125;\nend else if (state == 4'b0126) begin\nnext_state = 4'b0126;\nend else if (state == 4'b0127) begin\nnext_state = 4'b0127;\nend else if (state == 4'b0128) begin\nnext_state = 4'b0128;\nend else if (state == 4'b0129) begin\nnext_state = 4'b0129;\nend else if (state == 4'b012a) begin\nnext_state = 4'b012a;\nend else if (state == 4'b012b) begin\nnext_state = 4'b012b;\nend else if (state == 4'b012c) begin\nnext_state = 4'b012c;\nend else if (state == 4'b012d) begin\nnext_state = 4'b012d;\nend else if (state == 4'b012e) begin\nnext_state = 4'b012e;\nend else if (state == 4'b012f) begin\nnext_state = 4'b012f;\nend else if (state == 4'b0130) begin\nnext_state = 4'b0130;\nend else if (state == 4'b0131) begin\nnext_state = 4'b0131;\nend else if (state == 4'b0132) begin\nnext_state = 4'b0132;\nend else if (state == 4'b0133) begin\nnext_state = 4'b0133;\nend else if (state == 4'b0134) begin\nnext_state = 4'b0134;\nend else if (state == 4'b0135) begin\nnext_state = 4'b0135;\nend else if (state == 4'b0136) begin\nnext_state = 4'b0136;\nend else if (state == 4'b0137) begin\nnext_state = 4'b0137;\nend else if (state == 4'b0138) begin\nnext_state = 4'b0138;\nend else if (state == 4'b0139) begin\nnext_state = 4'b0139;\nend else if (state == 4'b013a) begin\nnext_state = 4'b013a;\nend else if (state == 4'b013b) begin\nnext_state = 4'b013b;\nend else if (state == 4'b013c) begin\nnext_state = 4'b013c;\nend else if (state == 4'b013d) begin\nnext_state = 4'b013d;\nend else if (state == 4'b013e) begin\nnext_state = 4'b013e;\nend else if (state == 4'b013f) begin\nnext_state = 4'b013f;\nend else if (state == 4'b0140) begin\nnext_state = 4'b0140;\nend else if (state == 4'b0141) begin\nnext_state = 4'b0141;\nend else if (state == 4'b0142) begin\nnext_state = 4'b0142;\nend else if (state == 4'b0143) begin\nnext_state = 4'b0143;\nend else if (state == 4'b0144) begin\nnext_state = 4'b0144;\nend else if (state == 4'b0145)"}
{"task_id": "conditional", "completion": "Task: Write Verilog program for the given description.\nDescription: Given four unsigned numbers, find the minimum. Unsigned numbers can be compared with standard comparison operators (a < b). .\nGenerated Code: module top_module (\n\tinput [7:0] a,\n\tinput [7:0] b,\n\tinput [7:0] c,\n\tinput [7:0] d,\n\toutput reg [7:0] min\n);\n\n\nalways @(a,b,c,d) begin\nmin = {a,b,c,d};\nend\nendmodule"}
{"task_id": "gates", "completion": "Task: Write Verilog program for the given description.\nDescription: Build a combinational circuit with two inputs, a and b. There are 7 outputs, each with a logic gate driving it: \n// (1) out_and: a and b \n// (2) out_or: a or b \n// (3) out_xor: a xor b \n// (4) out_nand: a nand b \n// (5) out_nor: a nor b \n// (6) out_xnor: a xnor b \n// (7) out_anotb: a and-not b.\nGenerated Code: module top_module (\n\tinput a,\n\tinput b,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor,\n\toutput out_nand,\n\toutput out_nor,\n\toutput out_xnor,\n\toutput out_anotb\n);\n\n\nassign out_and = a && b;\nassign out_or = a || b;\nassign out_xor = a xor b;\nassign out_nand = a nand b;\nassign out_nor = a nor b;\nassign out_xnor = a xnor b;\nassign out_anotb = a and-not b;\nendmodule"}
{"task_id": "kmap2", "completion": "Task: Write Verilog program for the given description.\nDescription: Implement the circuit described by the Karnaugh map below.\n\n//        ab\n// cd   00 01 11 10\n//  00 | 1 | 1 | 0 | 1 |\n//  01 | 1 | 0 | 0 | 1 |\n//  11 | 0 | 1 | 1 | 1 |\n//  10 | 1 | 1 | 0 | 0 |.\nGenerated Code: module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out\n);\n\n\nassign out = a + b + c + d;\nendmodule"}
{"task_id": "2014_q3fsm", "completion": "Task: Write Verilog program for the given description.\nDescription: Consider a finite state machine with inputs s and w. Assume that the FSM begins in a reset state called A, as depicted below. The FSM remains in state A as long as s = 0, and it moves to state B when s = 1. Once in state B the FSM examines the value of the input w in the next three clock cycles. If w = 1 in exactly two of these clock cycles, then the FSM has to set an output z to 1 in the following clock cycle. Otherwise z has to be 0. The FSM continues checking w for the next three clock cycles, and so on. Use as few states as possible. Note that the s input is used only in state A, so you need to consider just the w input. Assume reset is active high synchronous..\nGenerated Code: module top_module (\n\tinput clk,\n\tinput reset,\n\tinput s,\n\tinput w,\n\toutput reg z\n);\n\n\nparameter STATE_A = 0;\nparameter STATE_B = 1;\nparameter STATE_C = 2;\nparameter STATE_D = 3;\nparameter STATE_E = 4;\nparameter STATE_F = 5;\nparameter STATE_G = 6;\nparameter STATE_H = 7;\nparameter STATE_I = 8;\nparameter STATE_J = 9;\nparameter STATE_K = 10;\nparameter STATE_L = 11;\nparameter STATE_M = 12;\nparameter STATE_N = 13;\nparameter STATE_O = 14;\nparameter STATE_P = 15;\nparameter STATE_Q = 16;\nparameter STATE_R = 17;\nparameter STATE_S = 18;\nparameter STATE_T = 19;\nparameter STATE_U = 20;\nparameter STATE_V = 21;\nparameter STATE_W = 22;\nparameter STATE_X = 23;\nparameter STATE_Y = 24;\nparameter STATE_Z = 25;\nparameter STATE_A = 26;\nparameter STATE_B = 27;\nparameter STATE_C = 28;\nparameter STATE_D = 29;\nparameter STATE_E = 30;\nparameter STATE_F = 31;\nparameter STATE_G = 32;\nparameter STATE_H = 33;\nparameter STATE_I = 34;\nparameter STATE_J = 35;\nparameter STATE_K = 36;\nparameter STATE_L = 37;\nparameter STATE_M = 38;\nparameter STATE_N = 39;\nparameter STATE_O = 40;\nparameter STATE_P = 41;\nparameter STATE_Q = 42;\nparameter STATE_R = 43;\nparameter STATE_S = 44;\nparameter STATE_T = 45;\nparameter STATE_U = 46;\nparameter STATE_V = 47;\nparameter STATE_W = 48;\nparameter STATE_X = 49;\nparameter STATE_Y = 50;\nparameter STATE_Z = 51;\nparameter STATE_A = 52;\nparameter STATE_B = 53;\nparameter STATE_C = 54;\nparameter STATE_D = 55;\nparameter STATE_E = 56;\nparameter STATE_F = 57;\nparameter STATE_G = 58;\nparameter STATE_H = 59;\nparameter STATE_I = 60;\nparameter STATE_J = 61;\nparameter STATE_K = 62;\nparameter STATE_L = 63;\nparameter STATE_M = 64;\nparameter STATE_N = 65;\nparameter STATE_O = 66;\nparameter STATE_P = 67;\nparameter STATE_Q = 68;\nparameter STATE_R = 69;\nparameter STATE_S = 70;\nparameter STATE_T = 71;\nparameter STATE_U = 72;\nparameter STATE_V = 73;\nparameter STATE_W = 74;\nparameter STATE_X = 75;\nparameter STATE_Y = 76;\nparameter STATE_Z = 77;\nparameter STATE_A = 78;\nparameter STATE_B = 79;\nparameter STATE_C = 80;\nparameter STATE_D = 81;\nparameter STATE_E = 82;\nparameter STATE_F = 83;\nparameter STATE_G = 84;\nparameter STATE_H = 85;\nparameter STATE_I = 86;\nparameter STATE_J = 87;\nparameter STATE_K = 88;\nparameter STATE_L = 89;\nparameter STATE_M = 90;\nparameter STATE_N = 91;\nparameter STATE_O = 92;\nparameter STATE_P = 93;\nparameter STATE_Q = 94;\nparameter STATE_R = 95;\nparameter STATE_S = 96;\nparameter STATE_T = 97;\nparameter STATE_U = 98;\nparameter STATE_V = 99;\nparameter STATE_W = 100;\nparameter STATE_X = 101;\nparameter STATE_Y = 102;\nparameter STATE_Z = 103;\nparameter STATE_A = 104;\nparameter STATE_B = 105;\nparameter STATE_C = 106;\nparameter STATE_D = 107;\nparameter STATE_E = 108;\nparameter STATE_F = 109;\nparameter STATE_G = 110;\nparameter STATE_H = 111;\nparameter STATE_I = 112;\nparameter STATE_J = 113;\nparameter STATE_K = 114;\nparameter STATE_L = 115;\nparameter STATE_M = 116;\nparameter STATE_N = 117;\nparameter STATE_O = 118;\nparameter STATE_P = 119;\nparameter STATE_Q = 120;\nparameter STATE_R = 121;\nparameter STATE_S = 122;\nparameter STATE_T = 123;\nparameter STATE_U = 124;\nparameter STATE_V = 125;\nparameter STATE_W = 126;\nparameter STATE_X = 127;\nparameter STATE_Y = 128;\nparameter STATE_Z = 129;\nparameter STATE_A = 130;\nparameter STATE_B = 131;\nparameter STATE_C = 132;\nparameter STATE_D = 133;\nparameter STATE_E = 134;\nparameter STATE_F = 135;\nparameter STATE_G = 136;\nparameter STATE_H = 137;\nparameter STATE_I = 138;\nparameter STATE_J = 139;\nparameter STATE_K = 140;\nparameter STATE_L = 141;\nparameter STATE_M = 142;\nparameter STATE_N = 143;\nparameter STATE_O = 144;\nparameter STATE_P = 145;\nparameter STATE_Q = 146;\nparameter STATE_R = 147;\nparameter STATE_S = 148;\nparameter STATE_T = 149;\nparameter STATE_U = 150;\nparameter STATE_V = 151;\nparameter STATE_W = 152;\nparameter STATE_X = 153;\nparameter STATE_Y = 154;\nparameter STATE_Z = 155;\nparameter STATE_A = 156;\nparameter STATE_B = 157;\nparameter STATE_C = 158;\nparameter STATE_D = 159;\nparameter STATE_E = 160;\nparameter STATE_F = 161;\nparameter STATE_G = 162;\nparameter STATE_H = 163;\nparameter STATE_I = 164;\nparameter STATE_J = 165;\nparameter STATE_K = 166;\nparameter STATE_L = 167;\nparameter STATE_M = 168;\nparameter STATE_N = 169;\nparameter STATE_O = 170;\nparameter STATE_P = 171;\nparameter STATE_Q = 172;\nparameter STATE_R = 173;\nparameter STATE_S = 174;\nparameter STATE_T = 175;\nparameter STATE_U = 176;\nparameter STATE_V = 177;\nparameter STATE_W = 178;\nparameter STATE_X = 179;\nparameter STATE_Y = 180;\nparameter STATE_Z = 181;\nparameter STATE_A = 182;\nparameter STATE_B = 183;\nparameter STATE_C = 184;\nparameter STATE_D = 185;\nparameter STATE_E = 186;\nparameter STATE_F = 187;\nparameter STATE_G = 188;\nparameter STATE_H = 189;\nparameter STATE_I = 190;\nparameter STATE_J = 191;\nparameter STATE_K = 192;\nparameter STATE_L = 193;\nparameter STATE_M = 194;\nparameter STATE_N = 195;\nparameter STATE_O = 196;\nparameter STATE_P = 197;\nparameter STATE_Q = 198;\nparameter STATE_R = 199;\nparameter STATE_S = 200;\nparameter STATE_T = 201;\nparameter STATE_U = 202;"}
{"task_id": "vector4", "completion": "Task: Write Verilog program for the given description.\nDescription: One common place to see a replication operator is when sign-extending a smaller number to a larger one, while preserving its signed value. This is done by replicating the sign bit (the most significant bit) of the smaller number to the left. For example, sign-extending 4'b0101 (5) to 8 bits results in 8'b00000101 (5), while sign-extending 4'b1101 (-3) to 8 bits results in 8'b11111101 (-3). Build a circuit that sign-extends an 8-bit number to 32 bits. This requires a concatenation of 24 copies of the sign bit (i.e., replicate bit[7] 24 times) followed by the 8-bit number itself..\nGenerated Code: module top_module (\n\tinput [7:0] in,\n\toutput [31:0] out\n);\n\n\nassign out = {in[7:0], in[31:8]};\nendmodule // top_module"}
{"task_id": "m2014_q4k", "completion": "Task: Write Verilog program for the given description.\nDescription: Implement a shift register with four D flops. Reset is active-low synchronous resettable..\nGenerated Code: module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput in,\n\toutput out\n);\n\n\n`include \"\"verilog.v\"\"\n\nparameter width = 4;\nparameter data_width = width * 2;\nparameter reg_width = width * 2;\nparameter address_width = width * 2;\nparameter dword_width = width * 2;\nparameter word_width = width * 2;\nparameter bit_width = width * 2;\nparameter byte_width = width * 2;\nparameter qword_width = width * 2;\nparameter long_width = width * 2;\nparameter float_width = width * 2;\nparameter double_width = width * 2;\nparameter signed_width = width * 2;\nparameter unsigned_width = width * 2;\nparameter unsigned_signed_width = width * 2;\nparameter unsigned_unsigned_width = width * 2;\nparameter unsigned_signed_width = width * 2;\nparameter unsigned_unsigned_width = width * 2;\nparameter unsigned_signed_width = width * 2;\nparameter unsigned_unsigned_width = width * 2;\nparameter unsigned_signed_width = width * 2;\nparameter unsigned_unsigned_width = width * 2;\nparameter unsigned_signed_width = width * 2;\nparameter unsigned_unsigned_width = width * 2;\nparameter unsigned_signed_width = width * 2;\nparameter unsigned_unsigned_width = width * 2;\nparameter unsigned_signed_width = width * 2;\nparameter unsigned_unsigned_width = width * 2;\nparameter unsigned_signed_width = width * 2;\nparameter unsigned_unsigned_width = width * 2;\nparameter unsigned_signed_width = width * 2;\nparameter unsigned_unsigned_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width * 2;\nparameter signed_width = width"}
{"task_id": "always_case2", "completion": "Task: Write Verilog program for the given description.\nDescription: A priority encoder is a combinational circuit that, when given an input bit vector, outputs the position of the first 1 bit in the vector. For example, a 8-bit priority encoder given the input 8'b10010000 would output 3'd4, because bit[4] is first bit that is high. Build a 4-bit priority encoder. For this problem, if none of the input bits are high (i.e., input is zero), output zero. Note that a 4-bit number has 16 possible combinations..\nGenerated Code: module top_module (\n\tinput [3:0] in,\n\toutput reg [1:0] pos\n);\n\n\nalways @(posedge clk) begin\ncase (in)\n0:pos = 0;\n1:pos = 1;\n2:pos = 2;\n3:pos = 3;\n4:pos = 4;\n5:pos = 5;\n6:pos = 6;\n7:pos = 7;\n8:pos = 8;\n9:pos = 9;\n10:pos = 10;\n11:pos = 11;\n12:pos = 12;\n13:pos = 13;\n14:pos = 14;\n15:pos = 15;\n16:pos = 16;\n17:pos = 17;\n18:pos = 18;\n19:pos = 19;\n20:pos = 20;\n21:pos = 21;\n22:pos = 22;\n23:pos = 23;\n24:pos = 24;\n25:pos = 25;\n26:pos = 26;\n27:pos = 27;\n28:pos = 28;\n29:pos = 29;\n30:pos = 30;\n31:pos = 31;\n32:pos = 32;\n33:pos = 33;\n34:pos = 34;\n35:pos = 35;\n36:pos = 36;\n37:pos = 37;\n38:pos = 38;\n39:pos = 39;\n40:pos = 40;\n41:pos = 41;\n42:pos = 42;\n43:pos = 43;\n44:pos = 44;\n45:pos = 45;\n46:pos = 46;\n47:pos = 47;\n48:pos = 48;\n49:pos = 49;\n50:pos = 50;\n51:pos = 51;\n52:pos = 52;\n53:pos = 53;\n54:pos = 54;\n55:pos = 55;\n56:pos = 56;\n57:pos = 57;\n58:pos = 58;\n59:pos = 59;\n60:pos = 60;\n61:pos = 61;\n62:pos = 62;\n63:pos = 63;\n64:pos = 64;\n65:pos = 65;\n66:pos = 66;\n67:pos = 67;\n68:pos = 68;\n69:pos = 69;\n70:pos = 70;\n71:pos = 71;\n72:pos = 72;\n73:pos = 73;\n74:pos = 74;\n75:pos = 75;\n76:pos = 76;\n77:pos = 77;\n78:pos = 78;\n79:pos = 79;\n80:pos = 80;\n81:pos = 81;\n82:pos = 82;\n83:pos = 83;\n84:pos = 84;\n85:pos = 85;\n86:pos = 86;\n87:pos = 87;\n88:pos = 88;\n89:pos = 89;\n90:pos = 90;\n91:pos = 91;\n92:pos = 92;\n93:pos = 93;\n94:pos = 94;\n95:pos = 95;\n96:pos = 96;\n97:pos = 97;\n98:pos = 98;\n99:pos = 99;\n100:pos = 100;\n101:pos = 101;\n102:pos = 102;\n103:pos = 103;\n104:pos = 104;\n105:pos = 105;\n106:pos = 106;\n107:pos = 107;\n108:pos = 108;\n109:pos = 109;\n110:pos = 110;\n111:pos = 111;\n112:pos = 112;\n113:pos = 113;\n114:pos = 114;\n115:pos = 115;\n116:pos = 116;\n117:pos = 117;\n118:pos = 118;\n119:pos = 119;\n120:pos = 120;\n121:pos = 121;\n122:pos = 122;\n123:pos = 123;\n124:pos = 124;\n125:pos = 125;\n126:pos = 126;\n127:pos = 127;\n128:pos = 128;\n129:pos = 129;\n130:pos = 130;\n131:pos = 131;\n132:pos = 132;\n133:pos = 133;\n134:pos = 134;\n135:pos = 135;\n136:pos = 136;\n137:pos = 137;\n138:pos = 138;\n139:pos = 139;\n140:pos = 140;\n141:pos = 141;\n142:pos = 142;\n143:pos = 143;\n144:pos = 144;\n145:pos = 145;\n146:pos = 146;\n147:pos = 147;\n148:pos = 148;\n149:pos = 149;\n150:pos = 150;\n151:pos = 151;\n152:pos = 152;\n153:pos = 153;\n154:pos = 154;\n155:pos = 155;\n156:pos = 156;\n157:pos = 157;\n158:pos = 158;\n159:pos = 159;\n160:pos = 160;\n161:pos = 161;\n162:pos = 162;\n163:pos = 163;\n164:pos = 164;\n165:pos = 165;\n166:pos = 166;\n167:pos = 167;\n168:pos = 168;\n169:pos = 169;\n170:pos = 170;\n171:pos = 171;\n172:pos = 172;\n173:pos = 173;\n174:pos = 174;\n175:pos = 175;\n176:pos = 176;\n177:pos = 177;\n178:pos = 178;\n179:pos = 179;\n180:pos = 180;\n181:pos = 181;\n182:pos = 182;\n183:pos = 183;\n184:pos = 184;\n185:pos = 185;\n186:pos = 186;\n187:pos = 187;\n188:pos = 188;\n189:pos = 189;\n190:pos = 190;\n191:pos = 191;\n192:pos = 192;\n193:pos = 193;\n194:pos = 194;\n195:pos = 195;\n196:pos = 196;\n197:pos = 197;\n198:pos = 198;\n199:pos = 199;\n200:pos = 200;\n201:pos = 201;\n202:pos = 202;\n203:pos = 203;\n204:pos = 204;\n205:pos = 205;\n206:pos = 206;\n207:pos = 207;\n208:pos = 208;\n209:pos = 209;\n210:pos = 210;\n211:pos = 211;\n212:pos = 212;\n213:pos = 213;\n214:pos = 214;\n215:pos = 215;\n216:pos = 216;\n217:pos = 217;\n218:pos = 218;\n219:pos = 219;\n220:pos = 220;\n221:pos = 221;\n222:pos = 222;\n223:pos = 223;\n224:pos = 224;\n225:pos = 225;\n226:pos = 226;\n227:pos = 227;\n228:pos = 228;\n229:pos = 229;\n230:pos = 230;\n231:pos = 231;\n232:pos = 232;\n233:pos = 233;\n234:pos = 234;\n235:pos = 235;\n236:pos = 236;\n237:pos = 237;\n238:pos = 238;\n239:pos = 239;\n240:pos = 240;\n241:pos = 241;\n242:pos = 242;\n243:pos = 243;\n244:pos = 244;\n245:pos = 245;\n246:pos = 246;\n247:pos = 247;\n248:pos = 248;\n249:pos = 249;\n250:pos = 250;\n251:pos = 251;\n252:pos = 252;\n253:pos = 253;\n254:pos = 254;\n255:pos = 255;\n256:pos = 256;\n257:pos = 257;\n258:pos = 258;\n259:pos = 259;\n260:pos = 260;\n261:pos = 261;\n262:pos = 262;\n263:pos = 263;\n264:pos = 264;\n265:pos = 265;\n266:pos = 266;\n267:pos ="}
{"task_id": "fsm2", "completion": "Task: Write Verilog program for the given description.\nDescription: This is a Moore state machine with two states, two inputs, and one output. Implement this state machine in Verilog. Reset is an active-high asynchronous reset to state OFF.\n\n// OFF (out=0) --j=0--> OFF\n// OFF (out=0) --j=1--> ON\n// ON (out=1) --k=0--> ON\n// ON (out=1) --k=1--> OFF.\nGenerated Code: module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\tinput areset,\n\toutput out\n);\n\n\nassign out = areset;\n\ninitial begin\nclk = 1'b0;\nj = 1'b0;\nk = 1'b0;\nresset = 1'b0;\nend\n\nalways @(posedge clk) begin\nif (j == 1'b0 && k == 1'b0 && areset == 1'b0) begin\nresset = 1'b1;\nend else if (j == 1'b1 && k == 1'b0 && areset == 1'b0) begin\nresset = 1'b0;\nend else if (j == 1'b0 && k == 1'b1 && areset == 1'b0) begin\nresset = 1'b1;\nend else if (j == 1'b1 && k == 1'b0 && areset == 1'b0) begin\nresset = 1'b0;\nend else if (j == 1'b0 && k == 1'b1 && areset == 1'b0) begin\nresset = 1'b1;\nend else if (j == 1'b1 && k == 1'b0 && areset == 1'b0) begin\nresset = 1'b0;\nend else if (j == 1'b0 && k == 1'b1 && areset == 1'b0) begin\nresset = 1'b1;\nend else if (j == 1'b1 && k == 1'b0 && areset == 1'b0) begin\nresset = 1'b0;\nend else if (j == 1'b0 && k == 1'b1 && areset == 1'b0) begin\nresset = 1'b1;\nend else if (j == 1'b1 && k == 1'b0 && areset == 1'b0) begin\nresset = 1'b0;\nend else if (j == 1'b0 && k == 1'b1 && areset == 1'b0) begin\nresset = 1'b1;\nend else if (j == 1'b1 && k == 1'b0 && areset == 1'b0) begin\nresset = 1'b0;\nend else if (j == 1'b0 && k == 1'b1 && areset == 1'b0) begin\nresset = 1'b1;\nend else if (j == 1'b1 && k == 1'b0 && areset == 1'b0) begin\nresset = 1'b0;\nend else if (j == 1'b0 && k == 1'b1 && areset == 1'b0) begin\nresset = 1'b1;\nend else if (j == 1'b1 && k == 1'b0 && areset == 1'b0) begin\nresset = 1'b0;\nend else if (j == 1'b0 && k == 1'b1 && areset == 1'b0) begin\nresset = 1'b1;\nend else if (j == 1'b1 && k == 1'b0 && areset == 1'b0) begin\nresset = 1'b0;\nend else if (j == 1'b0 && k == 1'b1 && areset == 1'b0) begin\nresset = 1'b1;\nend else if (j == 1'b1 && k == 1'b0 && areset == 1'b0) begin\nresset = 1'b0;\nend else if (j == 1'b0 && k == 1'b1 && areset == 1'b0) begin\nresset = 1'b1;\nend else if (j == 1'b1 && k == 1'b0 && areset == 1'b0) begin\nresset = 1'b0;\nend else if (j == 1'b0 && k == 1'b1 && areset == 1'b0) begin\nresset = 1'b1;\nend else if (j == 1'b1 && k == 1'b0 && areset == 1'b0) begin\nresset = 1'b0;\nend else if (j == 1'b0 && k == 1'b1 && areset == 1'b0) begin\nresset = 1'b1;\nend else if (j == 1'b1 && k == 1'b0 && areset == 1'b0) begin\nresset = 1'b0;\nend else if (j == 1'b0 && k == 1'b1 && areset == 1'b0) begin\nresset = 1'b1;\nend else if (j == 1'b1 && k == 1'b0 && areset == 1'b0) begin\nresset = 1'b0;\nend else if (j == 1'b0 && k == 1'b1 && areset == 1'b0) begin\nresset = 1'b1;\nend else if (j == 1'b1 && k == 1'b0 && areset == 1'b0) begin\nresset = 1'b0;\nend else if (j == 1'b0 && k == 1'b1 && areset == 1'b0) begin\nresset = 1'b1;\nend else if (j == 1'b1 && k == 1'b0 && areset == 1'b0) begin\nresset = 1'b0;\nend else if (j == 1'b0 && k == 1'b1 && areset == 1'b0) begin\nresset = 1'b1;\nend else if (j == 1'b1 && k == 1'b0 && areset == 1'b0) begin\nresset = 1'b0;\nend else if (j == 1'b0 && k == 1'b1 && areset == 1'b0) begin\nresset = 1'b1;\nend else if (j == 1'b1 && k == 1'b0 && areset == 1'b0) begin\nresset = 1'b0;\nend else if (j == 1'b0 && k == 1'b1 && areset == 1'b0) begin\nresset = 1'b1;\nend else if (j == 1'b1 && k == 1'b0 && areset == 1'b0) begin\nresset = 1'b0;\nend else if (j == 1'b0 && k == 1'b1 && areset == 1'b0) begin\nresset = 1'b1;\nend else if (j == 1'b1 && k == 1'b0 && areset == 1'b0) begin\nresset = 1'b0;\nend else if (j == 1'b0 && k == 1'b1 && areset == 1'b0) begin\nresset = 1'b1;\nend else if (j == 1'b1 && k == 1'b0 && areset == 1'b0) begin\nresset = 1'b0;\nend else if (j == 1'b0 && k == 1'b1 && areset == 1'b0) begin\nresset = 1'b1;\nend else if (j == 1'b1 && k == 1'b0 && areset == 1'b0) begin\nresset = 1'b0;\nend else if (j == 1'b0 && k == 1'b1 && areset == 1'b0) begin\nresset = 1'b1;\nend else if (j == 1'b1 && k == 1'b0 && areset == 1'b0) begin\nresset = 1'b0;\nend else if (j == 1'b0 && k == 1'b1 && areset == 1'b0) begin\nresset = 1'b1;\nend else if (j == 1'b1 && k == 1'b0 && areset == 1'b0) begin\nresset = 1'b0;\nend else if (j == 1'b0 && k == 1'b1 && areset == 1'b0) begin\nresset = 1'b1;\nend else if (j == 1'b1 && k == 1'b0 && areset == 1'b0) begin"}
{"task_id": "m2014_q4i", "completion": "Task: Write Verilog program for the given description.\nDescription: Build a circuit with no inputs and one output. That output should always drive 0 (or logic low)..\nGenerated Code: module top_module(\n\toutput out);\n\n\nassign out = 1'b0;\nendmodule // top_module"}
{"task_id": "step_one", "completion": "Task: Write Verilog program for the given description.\nDescription: Build a circuit with no inputs and one output. That output should always drive 1 (or logic high)..\nGenerated Code: module top_module(\n\toutput one);\n\n\nassign one = 1'b0;\nendmodule // top_module"}
{"task_id": "vector100r", "completion": "Task: Write Verilog program for the given description.\nDescription: Given a 100-bit input vector [99:0], reverse its bit ordering..\nGenerated Code: module top_module (\n\tinput [99:0] in,\n\toutput reg [99:0] out\n);\n\n\nalways @(posedge clk) begin\nout[99:0] <= in[99:0];\nend\nendmodule // top_module"}
{"task_id": "m2014_q4d", "completion": "Task: Write Verilog program for the given description.\nDescription: Implement in Verilog the following circuit: A D flip-flop takes as input the output of a two-input XOR. The flip-flop is positive edge triggered by clk, but there is no reset. The XOR takes as input 'in' along with the output 'out' of the flip-flop..\nGenerated Code: module top_module (\n\tinput clk,\n\tinput in,\n\toutput logic out\n);\n\n\n\nlogic [1:0] out;\nlogic [1:0] in;\n\nalways @(posedge clk) begin\nout = in;\nin = out;\nend\n\nendmodule"}
{"task_id": "shift4", "completion": "Task: Write Verilog program for the given description.\nDescription: Build a 4-bit shift register (right shift), with asynchronous positive edge triggered areset, synchronous active high signals load, and enable. \n// (1) areset: Resets shift register to zero. \n// (2) load: Loads shift register with data[3:0] instead of shifting. \n// (3) ena: Shift right (q[3] becomes zero, q[0] is shifted out and disappears). \n// (4) q: The contents of the shift register. If both the load and ena inputs are asserted (1), the load input has higher priority. \n.\nGenerated Code: module top_module(\n\tinput clk,\n\tinput areset,\n\tinput load,\n\tinput ena,\n\tinput [3:0] data,\n\toutput reg [3:0] q);\n\n\nbegin\n\nalways @(posedge clk)\nif (ena)\nq <= 4'd0;\nelse if (load)\nq <= data;\nend\n\nendmodule"}
{"task_id": "truthtable1", "completion": "Task: Write Verilog program for the given description.\nDescription: Create a combinational circuit that implements the truth table.\n\n// x3 | x2 | x1 | f\n// 0 | 0 | 0 | 0\n// 0 | 0 | 1 | 0\n// 0 | 1 | 0 | 1\n// 0 | 1 | 1 | 1\n// 1 | 0 | 0 | 0\n// 1 | 0 | 1 | 1\n// 1 | 1 | 0 | 0\n// 1 | 1 | 1 | 1.\nGenerated Code: module top_module (\n\tinput x3,\n\tinput x2,\n\tinput x1,\n\toutput f\n);\n\n\nassign f = x1 ? x2 : x3;\nendmodule"}
{"task_id": "dff8ar", "completion": "Task: Write Verilog program for the given description.\nDescription: Create 8 D flip-flops with active high asynchronous reset. The output should be reset to 0. All DFFs should be triggered by the positive edge of clk..\nGenerated Code: module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput areset,\n\toutput reg [7:0] q);\n\n\nalways @(posedge clk)\nbegin\nif (resset)\nq[7:0] <= d[7:0];\nelse\nq[7:0] <= 0;\nend\nendmodule"}
{"task_id": "gates100", "completion": "Task: Write Verilog program for the given description.\nDescription: Build a combinational circuit with 100 inputs, in[99:0]. There are 3 outputs: \n// (1) out_and: output of a 100-input AND gate. \n// (2) out_or: output of a 100-input OR gate. \n// (3) out_xor: output of a 100-input XOR gate.\n\n.\nGenerated Code: module top_module (\n\tinput [99:0] in,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor\n);\n\n\nassign out_and = in[99:0];\nassign out_or = in[99:0];\nassign out_xor = in[99:0];\nendmodule"}
{"task_id": "hadd", "completion": "Task: Write Verilog program for the given description.\nDescription: Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out..\nGenerated Code: module top_module (\n\tinput a,\n\tinput b,\n\toutput sum,\n\toutput cout\n);\n\n\nassign sum = a + b;\nassign cout = a + b;\nendmodule // top_module"}
{"task_id": "always_if2", "completion": "Task: Write Verilog program for the given description.\nDescription: Fix any and all bugs in this code:\n\n// module top_module (\n//     input      cpu_overheated,\n//     output reg shut_off_computer,\n//     input      arrived,\n//     input      gas_tank_empty,\n//     output reg keep_driving  ); //\n\n//     always @(*) begin\n//         if (cpu_overheated)\n//            shut_off_computer = 1;\n//     end\n\n//     always @(*) begin\n//         if (~arrived)\n//            keep_driving = ~gas_tank_empty;\n//     end\n\n// endmodule\n.\nGenerated Code: module top_module (\n\tinput cpu_overheated,\n\toutput reg shut_off_computer,\n\tinput arrived,\n\tinput gas_tank_empty,\n\toutput reg keep_driving\n);\n\n\nassign shut_off_computer = 1'b0;\nassign arrived = 1'b0;\nassign gas_tank_empty = 1'b0;\nassign keep_driving = 1'b0;\nendmodule"}
{"task_id": "fsm2s", "completion": "Task: Write Verilog program for the given description.\nDescription: This is a Moore state machine with two states, two inputs, and one output. Implement this state machine in Verilog. Reset is an active-high synchronous reset to state OFF.\n\n// OFF (out=0) --j=0--> OFF\n// OFF (out=0) --j=1--> ON\n// ON (out=1) --k=0--> ON\n// ON (out=1) --k=1--> OFF.\nGenerated Code: module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\tinput reset,\n\toutput out\n);\n\n\ninitial begin\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1'b0;\nclk = 1"}
{"task_id": "vector3", "completion": "Task: Write Verilog program for the given description.\nDescription: Given several input vectors, concatenate them together then split them up into several output vectors. There are six 5-bit input vectors: a, b, c, d, e, and f, for a total of 30 bits of input. There are four 8-bit output vectors: w, x, y, and z, for 32 bits of output. The output should be a concatenation of the input vectors followed by two 1 bits (the two 1 bits should be in the LSB positions)..\nGenerated Code: module top_module (\n\tinput [4:0] a,\n\tinput [4:0] b,\n\tinput [4:0] c,\n\tinput [4:0] d,\n\tinput [4:0] e,\n\tinput [4:0] f,\n\toutput [7:0] w,\n\toutput [7:0] x,\n\toutput [7:0] y,\n\toutput [7:0] z\n);\n\n\nassign w = a + b + c + d + e + f;\nassign x = a + b + c + d + e + f;\nassign y = a + b + c + d + e + f;\nassign z = a + b + c + d + e + f;\nendmodule"}
{"task_id": "andgate", "completion": "Task: Write Verilog program for the given description.\nDescription: Create a module that implements an AND gate..\nGenerated Code: module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n\n\nassign out = (a && b) ? 1'b1 : 1'b0;\nendmodule"}
{"task_id": "fsm1s", "completion": "Task: Write Verilog program for the given description.\nDescription: This is a Moore state machine with two states, one input, and one output. Implement this state machine in Verilog. The reset state is B and reset is active-high synchronous.\n\n// B (out=1) --in=0--> A\n// B (out=1) --in=1--> B\n// A (out=0) --in=0--> B\n// A (out=0) --in=1--> A.\nGenerated Code: module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput out\n);\n\n\n///////////////////////////////////////////////////////////////////////////////\n// Declaration of the Local Variables\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declaration of the Global Variables\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Outputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Outputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Outputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Outputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Outputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Outputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Outputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n// Declare the Inputs\n///////////////////////////////////////////////////////////////////////////////\n"}
{"task_id": "fadd", "completion": "Task: Write Verilog program for the given description.\nDescription: Create a full adder. A full adder adds three bits (including carry-in) and produces a sum and carry-out..\nGenerated Code: module top_module (\n\tinput a,\n\tinput b,\n\tinput cin,\n\toutput cout,\n\toutput sum\n);\n\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Local Declarations\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Constants\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Constructors\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Instance Declarations\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Public Methods\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Public Functions\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Functions used by this module\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Outputs\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Internal Declarations\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Return type(s)\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Constant declarations\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Dynamic Declarations\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Static Declarations\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Outputs\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Instance Declarations\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Functions called by this module\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Return type(s)\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Constant declarations\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Dynamic Declarations\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Outputs\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Instance Declarations\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Return type(s)\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Constant declarations\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Dynamic Declarations\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Outputs\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Return type(s)\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Constant declarations\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Dynamic Declarations\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Return type(s)\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Instance Declarations\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Return type(s)\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Constant declarations\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Dynamic Declarations\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Return type(s)\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Instance Declarations\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Return type(s)\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Constant declarations\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Dynamic Declarations\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Return type(s)\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Return type(s)\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Constant declarations\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Return type(s)\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Return type(s)\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Return type(s)\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Return type(s)\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Return type(s)\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Return type(s)\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Return type(s)\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Return type(s)\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Return type(s)\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Return type(s)\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Return type(s)\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Return type(s)\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Return type(s)\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Return type(s)\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Return type(s)\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Return type(s)\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Return type(s)\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Return type(s)\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Return type(s)\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Return type(s)\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Return type(s)\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Return type(s)\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Return type(s)\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Return type(s)\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Return type(s)\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Return type(s)\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Return type(s)\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Return type(s)\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Return type(s)\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Return type(s)\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Return type(s)\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Return type(s)\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Return type(s)\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Return type(s)\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Return type(s)\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Return type(s)\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Return type(s)\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Return type(s)\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Return type(s)\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Return type(s)\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Return type(s)\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Return type(s)\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Return type(s)\n//\n//////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////\n//\n// Return type(s)\n//\n////////////////////////////////"}
{"task_id": "m2014_q4g", "completion": "Task: Write Verilog program for the given description.\nDescription: Implement in Verilog the following circuit: A two-input XNOR (connected to 'in1' and 'in2) has an output connected to the input of a two-input XOR. The second input of the XOR is 'in3.' The output of the XOR is 'out'..\nGenerated Code: module top_module (\n\tinput in1,\n\tinput in2,\n\tinput in3,\n\toutput logic out\n);\n\n\n\nlogic [1:0] out;\nlogic [1:0] in1, in2, in3;\n\ninitial begin\nout = 0;\nin1 = 0;\nin2 = 0;\nin3 = 0;\nend\n\nalways begin\nin1 = ~in1;\nin2 = ~in2;\nin3 = ~in3;\nend\n\nalways begin\nout = ~out;\nin1 = ~in1;\nin2 = ~in2;\nin3 = ~in3;\nend\n\nalways begin\nout = ~out;\nin1 = ~in1;\nin2 = ~in2;\nin3 = ~in3;\nend\n\nalways begin\nout = ~out;\nin1 = ~in1;\nin2 = ~in2;\nin3 = ~in3;\nend\n\nalways begin\nout = ~out;\nin1 = ~in1;\nin2 = ~in2;\nin3 = ~in3;\nend\n\nalways begin\nout = ~out;\nin1 = ~in1;\nin2 = ~in2;\nin3 = ~in3;\nend\n\nalways begin\nout = ~out;\nin1 = ~in1;\nin2 = ~in2;\nin3 = ~in3;\nend\n\nalways begin\nout = ~out;\nin1 = ~in1;\nin2 = ~in2;\nin3 = ~in3;\nend\n\nalways begin\nout = ~out;\nin1 = ~in1;\nin2 = ~in2;\nin3 = ~in3;\nend\n\nalways begin\nout = ~out;\nin1 = ~in1;\nin2 = ~in2;\nin3 = ~in3;\nend\n\nalways begin\nout = ~out;\nin1 = ~in1;\nin2 = ~in2;\nin3 = ~in3;\nend\n\nalways begin\nout = ~out;\nin1 = ~in1;\nin2 = ~in2;\nin3 = ~in3;\nend\n\nalways begin\nout = ~out;\nin1 = ~in1;\nin2 = ~in2;\nin3 = ~in3;\nend\n\nalways begin\nout = ~out;\nin1 = ~in1;\nin2 = ~in2;\nin3 = ~in3;\nend\n\nalways begin\nout = ~out;\nin1 = ~in1;\nin2 = ~in2;\nin3 = ~in3;\nend\n\nalways begin\nout = ~out;\nin1 = ~in1;\nin2 = ~in2;\nin3 = ~in3;\nend\n\nalways begin\nout = ~out;\nin1 = ~in1;\nin2 = ~in2;\nin3 = ~in3;\nend\n\nalways begin\nout = ~out;\nin1 = ~in1;\nin2 = ~in2;\nin3 = ~in3;\nend\n\nalways begin\nout = ~out;\nin1 = ~in1;\nin2 = ~in2;\nin3 = ~in3;\nend\n\nalways begin\nout = ~out;\nin1 = ~in1;\nin2 = ~in2;\nin3 = ~in3;\nend\n\nalways begin\nout = ~out;\nin1 = ~in1;\nin2 = ~in2;\nin3 = ~in3;\nend\n\nalways begin\nout = ~out;\nin1 = ~in1;\nin2 = ~in2;\nin3 = ~in3;\nend\n\nalways begin\nout = ~out;\nin1 = ~in1;\nin2 = ~in2;\nin3 = ~in3;\nend\n\nalways begin\nout = ~out;\nin1 = ~in1;\nin2 = ~in2;\nin3 = ~in3;\nend\n\nalways begin\nout = ~out;\nin1 = ~in1;\nin2 = ~in2;\nin3 = ~in3;\nend\n\nalways begin\nout = ~out;\nin1 = ~in1;\nin2 = ~in2;\nin3 = ~in3;\nend\n\nalways begin\nout = ~out;\nin1 = ~in1;\nin2 = ~in2;\nin3 = ~in3;\nend\n\nalways begin\nout = ~out;\nin1 = ~in1;\nin2 = ~in2;\nin3 = ~in3;\nend\n\nalways begin\nout = ~out;\nin1 = ~in1;\nin2 = ~in2;\nin3 = ~in3;\nend\n\nalways begin\nout = ~out;\nin1 = ~in1;\nin2 = ~in2;\nin3 = ~in3;\nend\n\nalways begin\nout = ~out;\nin1 = ~in1;\nin2 = ~in2;\nin3 = ~in3;\nend\n\nalways begin\nout = ~out;\nin1 = ~in1;\nin2 = ~in2;\nin3 = ~in3;\nend\n\nalways begin\nout = ~out;\nin1 = ~in1;\nin2 = ~in2;\nin3 = ~in3;\nend\n\nalways begin\nout = ~out;\nin1 = ~in1;\nin2 = ~in2;\nin3 = ~in3;\nend\n\nalways begin\nout = ~out;\nin1 = ~in1;\nin2 = ~in2;\nin3 = ~in3;\nend\n\nalways begin\nout = ~out;\nin1 = ~in1;\nin2 = ~in2;\nin3 = ~in3;\nend\n\nalways begin\nout = ~out;\nin1 = ~in1;\nin2 = ~in2;\nin3 = ~in3;\nend\n\nalways begin\nout = ~out;\nin1 = ~in1;\nin2 = ~in2;\nin3 = ~in3;\nend\n\nalways begin\nout = ~out;\nin1 = ~in1;\nin2 = ~in2;\nin3 = ~in3;\nend\n\nalways begin\nout = ~out;\nin1 = ~in1;\nin2 = ~in2;\nin3 = ~in3;\nend\n\nalways begin\nout = ~out;\nin1 = ~in1;\nin2 = ~in2;\nin3 = ~in3;\nend\n\nalways begin\nout = ~out;\nin1 = ~in1;\nin2 = ~in2;\nin3 = ~in3;\nend\n\nalways begin\nout = ~out;\nin1 = ~in1;\nin2 = ~in2;\nin3 = ~in3;\nend\n\nalways begin\nout = ~out;\nin1 = ~in1;\nin2 = ~in2;\nin3 = ~in3;\nend\n\nalways begin\nout = ~out;\nin1 = ~in1;\nin2 = ~in2;\nin3 = ~in3;\nend\n\nalways begin\nout = ~out;\nin1 = ~in1;\nin2 = ~in2;\nin3 = ~in3;\nend\n\nalways begin\nout = ~out;\nin1 = ~in1;\nin2 = ~in2;\nin3 = ~in3;\nend\n\nalways begin\nout = ~out;\nin1 = ~in1;\nin2 = ~in2;\nin3 = ~in3;\nend\n\nalways begin\nout = ~out;\nin1 = ~in1;\nin2 = ~in2;\nin3 = ~in3;\nend\n\nalways begin\nout = ~out;\nin1 = ~in1;\nin2 = ~in2;\nin3 = ~in3;\nend\n\nalways begin\nout = ~out;\nin1 = ~in1;\nin2 = ~in2;\nin3 = ~in3;\nend\n\nalways begin\nout = ~out;\nin1 = ~in1;\nin2 = ~in2;\nin3 = ~in3;\nend\n\nalways begin\nout = ~out"}
{"task_id": "ece241_2014_q3", "completion": "Task: Write Verilog program for the given description.\nDescription: For the following Karnaugh map, give the circuit implementation using one 4-to-1 multiplexer and as many 2-to-1 multiplexers as required, but using as few as possible. You are not allowed to use any other logic gate and you must use _a_ and _b_ as the multiplexer selector inputs, as shown on the 4-to-1 multiplexer below.\n\n//       ab\n// cd   00 01 11 10\n//  00 | 0 | 0 | 0 | 1 |\n//  01 | 1 | 0 | 0 | 0 |\n//  11 | 1 | 0 | 1 | 1 |\n//  10 | 1 | 0 | 0 | 1 |\n\n// Consider a block diagram with inputs 'c' and 'd' going into a module called \"top_module\". This \"top_module\" has four outputs, mux_in[3:0], that connect to a four input mux. The mux takes as input {a,b} and ab = 00 is connected to mux_in[0], ab=01 is connected to mux_in[1], and so in. You are implementing in Verilog just the portion labelled \"top_module\", such that the entire circuit (including the 4-to-1 mux) implements the K-map.\n.\nGenerated Code: module top_module (\n\tinput c,\n\tinput d,\n\toutput [3:0] mux_in\n);\n\n\n\nassign mux_in[3:0] = c;\nassign mux_in[0] = d;\nassign mux_in[1] = c;\nassign mux_in[2] = d;\nassign mux_in[3] = c;\nassign mux_in[4] = d;\nassign mux_in[5] = c;\nassign mux_in[6] = d;\nassign mux_in[7] = c;\nassign mux_in[8] = d;\nassign mux_in[9] = c;\nassign mux_in[10] = d;\nassign mux_in[11] = c;\nassign mux_in[12] = d;\nassign mux_in[13] = c;\nassign mux_in[14] = d;\nassign mux_in[15] = c;\nassign mux_in[16] = d;\nassign mux_in[17] = c;\nassign mux_in[18] = d;\nassign mux_in[19] = c;\nassign mux_in[20] = d;\nassign mux_in[21] = c;\nassign mux_in[22] = d;\nassign mux_in[23] = c;\nassign mux_in[24] = d;\nassign mux_in[25] = c;\nassign mux_in[26] = d;\nassign mux_in[27] = c;\nassign mux_in[28] = d;\nassign mux_in[29] = c;\nassign mux_in[30] = d;\nassign mux_in[31] = c;\nassign mux_in[32] = d;\nassign mux_in[33] = c;\nassign mux_in[34] = d;\nassign mux_in[35] = c;\nassign mux_in[36] = d;\nassign mux_in[37] = c;\nassign mux_in[38] = d;\nassign mux_in[39] = c;\nassign mux_in[40] = d;\nassign mux_in[41] = c;\nassign mux_in[42] = d;\nassign mux_in[43] = c;\nassign mux_in[44] = d;\nassign mux_in[45] = c;\nassign mux_in[46] = d;\nassign mux_in[47] = c;\nassign mux_in[48] = d;\nassign mux_in[49] = c;\nassign mux_in[50] = d;\nassign mux_in[51] = c;\nassign mux_in[52] = d;\nassign mux_in[53] = c;\nassign mux_in[54] = d;\nassign mux_in[55] = c;\nassign mux_in[56] = d;\nassign mux_in[57] = c;\nassign mux_in[58] = d;\nassign mux_in[59] = c;\nassign mux_in[60] = d;\nassign mux_in[61] = c;\nassign mux_in[62] = d;\nassign mux_in[63] = c;\nassign mux_in[64] = d;\nassign mux_in[65] = c;\nassign mux_in[66] = d;\nassign mux_in[67] = c;\nassign mux_in[68] = d;\nassign mux_in[69] = c;\nassign mux_in[70] = d;\nassign mux_in[71] = c;\nassign mux_in[72] = d;\nassign mux_in[73] = c;\nassign mux_in[74] = d;\nassign mux_in[75] = c;\nassign mux_in[76] = d;\nassign mux_in[77] = c;\nassign mux_in[78] = d;\nassign mux_in[79] = c;\nassign mux_in[80] = d;\nassign mux_in[81] = c;\nassign mux_in[82] = d;\nassign mux_in[83] = c;\nassign mux_in[84] = d;\nassign mux_in[85] = c;\nassign mux_in[86] = d;\nassign mux_in[87] = c;\nassign mux_in[88] = d;\nassign mux_in[89] = c;\nassign mux_in[90] = d;\nassign mux_in[91] = c;\nassign mux_in[92] = d;\nassign mux_in[93] = c;\nassign mux_in[94] = d;\nassign mux_in[95] = c;\nassign mux_in[96] = d;\nassign mux_in[97] = c;\nassign mux_in[98] = d;\nassign mux_in[99] = c;\nassign mux_in[100] = d;\nassign mux_in[101] = c;\nassign mux_in[102] = d;\nassign mux_in[103] = c;\nassign mux_in[104] = d;\nassign mux_in[105] = c;\nassign mux_in[106] = d;\nassign mux_in[107] = c;\nassign mux_in[108] = d;\nassign mux_in[109] = c;\nassign mux_in[110] = d;\nassign mux_in[111] = c;\nassign mux_in[112] = d;\nassign mux_in[113] = c;\nassign mux_in[114] = d;\nassign mux_in[115] = c;\nassign mux_in[116] = d;\nassign mux_in[117] = c;\nassign mux_in[118] = d;\nassign mux_in[119] = c;\nassign mux_in[120] = d;\nassign mux_in[121] = c;\nassign mux_in[122] = d;\nassign mux_in[123] = c;\nassign mux_in[124] = d;\nassign mux_in[125] = c;\nassign mux_in[126] = d;\nassign mux_in[127] = c;\nassign mux_in[128] = d;\nassign mux_in[129] = c;\nassign mux_"}
{"task_id": "ece241_2014_q5b", "completion": "Task: Write Verilog program for the given description.\nDescription: The following diagram is a Mealy machine implementation of the 2's complementer. Implement in Verilog using one-hot encoding. Resets into state A and reset is asynchronous active-high.\n\n// A --x=0 (z=0)--> A\n// A --x=1 (z=1)--> B\n// B --x=0 (z=1)--> B\n// B --x=1 (z=0)--> B.\nGenerated Code: module top_module (\n\tinput clk,\n\tinput areset,\n\tinput x,\n\toutput z\n);\n\n\nassign z = 1'b0;\n\nalways @(posedge clk) begin\ncase (x)\n0:begin\nz = 1'b1;\nend\n1:begin\nz = 1'b0;\nend\n2:begin\nz = 1'b1;\nend\n3:begin\nz = 1'b0;\nend\n4:begin\nz = 1'b1;\nend\n5:begin\nz = 1'b1;\nend\n6:begin\nz = 1'b1;\nend\n7:begin\nz = 1'b1;\nend\n8:begin\nz = 1'b1;\nend\n9:begin\nz = 1'b1;\nend\n10:begin\nz = 1'b1;\nend\n11:begin\nz = 1'b1;\nend\n12:begin\nz = 1'b1;\nend\n13:begin\nz = 1'b1;\nend\n14:begin\nz = 1'b1;\nend\n15:begin\nz = 1'b1;\nend\n16:begin\nz = 1'b1;\nend\n17:begin\nz = 1'b1;\nend\n18:begin\nz = 1'b1;\nend\n19:begin\nz = 1'b1;\nend\n20:begin\nz = 1'b1;\nend\n21:begin\nz = 1'b1;\nend\n22:begin\nz = 1'b1;\nend\n23:begin\nz = 1'b1;\nend\n24:begin\nz = 1'b1;\nend\n25:begin\nz = 1'b1;\nend\n26:begin\nz = 1'b1;\nend\n27:begin\nz = 1'b1;\nend\n28:begin\nz = 1'b1;\nend\n29:begin\nz = 1'b1;\nend\n30:begin\nz = 1'b1;\nend\n31:begin\nz = 1'b1;\nend\n32:begin\nz = 1'b1;\nend\n33:begin\nz = 1'b1;\nend\n34:begin\nz = 1'b1;\nend\n35:begin\nz = 1'b1;\nend\n36:begin\nz = 1'b1;\nend\n37:begin\nz = 1'b1;\nend\n38:begin\nz = 1'b1;\nend\n39:begin\nz = 1'b1;\nend\n40:begin\nz = 1'b1;\nend\n41:begin\nz = 1'b1;\nend\n42:begin\nz = 1'b1;\nend\n43:begin\nz = 1'b1;\nend\n44:begin\nz = 1'b1;\nend\n45:begin\nz = 1'b1;\nend\n46:begin\nz = 1'b1;\nend\n47:begin\nz = 1'b1;\nend\n48:begin\nz = 1'b1;\nend\n49:begin\nz = 1'b1;\nend\n50:begin\nz = 1'b1;\nend\n51:begin\nz = 1'b1;\nend\n52:begin\nz = 1'b1;\nend\n53:begin\nz = 1'b1;\nend\n54:begin\nz = 1'b1;\nend\n55:begin\nz = 1'b1;\nend\n56:begin\nz = 1'b1;\nend\n57:begin\nz = 1'b1;\nend\n58:begin\nz = 1'b1;\nend\n59:begin\nz = 1'b1;\nend\n60:begin\nz = 1'b1;\nend\n61:begin\nz = 1'b1;\nend\n62:begin\nz = 1'b1;\nend\n63:begin\nz = 1'b1;\nend\n64:begin\nz = 1'b1;\nend\n65:begin\nz = 1'b1;\nend\n66:begin\nz = 1'b1;\nend\n67:begin\nz = 1'b1;\nend\n68:begin\nz = 1'b1;\nend\n69:begin\nz = 1'b1;\nend\n70:begin\nz = 1'b1;\nend\n71:begin\nz = 1'b1;\nend\n72:begin\nz = 1'b1;\nend\n73:begin\nz = 1'b1;\nend\n74:begin\nz = 1'b1;\nend\n75:begin\nz = 1'b1;\nend\n76:begin\nz = 1'b1;\nend\n77:begin\nz = 1'b1;\nend\n78:begin\nz = 1'b1;\nend\n79:begin\nz = 1'b1;\nend\n80:begin\nz = 1'b1;\nend\n81:begin\nz = 1'b1;\nend\n82:begin\nz = 1'b1;\nend\n83:begin\nz = 1'b1;\nend\n84:begin\nz = 1'b1;\nend\n85:begin\nz = 1'b1;\nend\n86:begin\nz = 1'b1;\nend\n87:begin\nz = 1'b1;\nend\n88:begin\nz = 1'b1;\nend\n89:begin\nz = 1'b1;\nend\n90:begin\nz = 1'b1;\nend\n91:begin\nz = 1'b1;\nend\n92:begin\nz = 1'b1;\nend\n93:begin\nz = 1'b1;\nend\n94:begin\nz = 1'b1;\nend\n95:begin\nz = 1'b1;\nend\n96:begin\nz = 1'b1;\nend\n97:begin\nz = 1'b1;\nend\n98:begin\nz = 1'b1;\nend\n99:begin\nz = 1'b1;\nend\n100:begin\nz = 1'b1;\nend\n101:begin\nz = 1'b1;\nend\n102:begin\nz = 1'b1;\nend\n103:begin\nz = 1'b1;\nend\n104:begin\nz = 1'b1;\nend\n105:begin\nz = 1'b1;\nend\n106:begin\nz = 1'b1;\nend\n107:begin\nz = 1'b1;\nend\n108:begin\nz = 1'b1;\nend\n109:begin\nz = 1'b1;\nend\n110:begin\nz = 1'b1;\nend\n111:begin\nz = 1'b1;\nend\n112:begin\nz = 1'b1;\nend\n113:begin\nz = 1'b1;\nend\n114:begin\nz = 1'b1;\nend\n115:begin\nz = 1'b1;\nend\n116:begin\nz = 1'b1;\nend\n117:begin\nz = 1'b1;\nend\n118:begin\nz = 1'b1;\nend\n119:begin\nz = 1'b1;\nend\n120:begin\nz = 1'b1;\nend\n121:begin\nz = 1'b1;\nend\n122:begin\nz = 1'b1;\nend\n123:begin\nz = 1'b1;\nend\n124:begin\nz = 1'b1;\nend\n125:begin\nz = 1'b1;\nend\n126:begin\nz = 1'b1;\nend\n127:begin\nz = 1'b1;\nend\n128:begin\nz = 1'b1;\nend\n129:begin\nz = 1'b1;\nend\n130:begin\nz = 1'b1;\nend\n131:begin\nz = 1'b1;\nend\n132:begin\nz = 1'b1;\nend\n133:begin\nz = 1'b1;\n"}
{"task_id": "2012_q1g", "completion": "Task: Write Verilog program for the given description.\nDescription: Consider the function f shown in the Karnaugh map below. Implement this function.\n//        x[1]x[2]\n// x[3]x[4]   00 01 11 10\n//  00 | 1 | 0 | 0 | 1 |\n//  01 | 0 | 0 | 0 | 0 |\n//  11 | 1 | 1 | 1 | 0 |\n//  10 | 1 | 1 | 0 | 1 |.\nGenerated Code: module top_module (\n\tinput [4:1] x,\n\toutput logic f\n);\n\n\nassign f = x[4];\nendmodule"}
{"task_id": "fsm_hdlc", "completion": "Task: Write Verilog program for the given description.\nDescription: Synchronous HDLC framing involves decoding a continuous bit stream of data to look for bit patterns that indicate the beginning and end of frames (packets). Seeing exactly 6 consecutive 1s (i.e., 01111110) is a \"flag\" that indicate frame boundaries. To avoid the data stream from accidentally containing \"flags\", the sender inserts a zero after every 5 consecutive 1s which the receiver must detect and discard. We also need to signal an error if there are 7 or more consecutive 1s. Create a Moore-type finite state machine to recognize these three sequences:\n\n// (1) 0111110: Signal a bit needs to be discarded (disc).\n// (2) 01111110: Flag the beginning/end of a frame (flag).\n// (3) 01111111...: Error (7 or more 1s) (err).\n\n// When the FSM is reset, it should be in a state that behaves as though the previous input were 0. The reset signal is active high synchronous. The output signals should be asserted for a complete cycle beginning on the clock cycle after the condition occurs..\nGenerated Code: module top_module (\n\tinput clk,\n\tinput reset,\n\tinput in,\n\toutput disc,\n\toutput flag,\n\toutput err);\n\n\nassign flag = reset;\nassign disc = reset;\nassign err = reset;\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b1;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b1;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0;\nend\n\nbegin\nclk = 1'b0;\nreset = 1'b1;\nin = 1'b0"}
{"task_id": "review2015_fancytimer", "completion": "Task: Write Verilog program for the given description.\nDescription: We want to create a timer with one input that:\n\n// (1) is started when a particular input pattern (1101) is detected,\n// (2) shifts in 4 more bits to determine the duration to delay,\n// (3) waits for the counters to finish counting, and\n// (4) notifies the user and waits for the user to acknowledge the timer.\n\n// The serial data is available on the data input pin. When the pattern 1101 is received, the circuit must then shift in the next 4 bits, most-significant-bit first. These 4 bits determine the duration of the timer delay, referred to as delay[3:0]. After that, the state machine asserts its counting output to indicate it is counting. Once the 1101 and delay[3:0] have been read, the circuit no longer looks at the data input until it resumes searching after everything else is done.\n\n// The state machine must count for exactly (delay[3:0] + 1) * 1000 clock cycles. e.g., delay=0 means count 1000 cycles, and delay=5 means count 6000 cycles. Also output the current remaining time. This should be equal to delay for 1000 cycles, then delay-1 for 1000 cycles, and so on until it is 0 for 1000 cycles. \n\n// When the circuit isn't counting, the count[3:0] output is don't-care (whatever value is convenient for you to implement). At that point, the circuit must assert done to notify the user the timer has timed out, and waits until input ack is 1 before being reset to look for the next occurrence of the start sequence (1101).\n\n// The circuit should reset into a state where it begins searching for the input sequence 1101. The reset signal is active high synchronous. \n.\nGenerated Code: module top_module(\n\tinput wire clk,\n\tinput wire reset,\n\tinput wire data,\n    output wire [3:0] count,\n    output reg counting,\n    output reg done,\n    input wire ack );\n\n\nalways @(posedge clk)\nbegin\nif(reset)\ncount <= 0;\nelse if(data)\ncount <= count + 1;\nelse if(ack)\ncount <= count + 2;\nend\n\nalways @(posedge clk)\nbegin\nif(reset)\ncount <= 0;\nelse if(data)\ncount <= count + 1;\nelse if(ack)\ncount <= count + 2;\nend\n\nalways @(posedge clk)\nbegin\nif(reset)\ncount <= 0;\nelse if(data)\ncount <= count + 1;\nelse if(ack)\ncount <= count + 2;\nend\n\nalways @(posedge clk)\nbegin\nif(reset)\ncount <= 0;\nelse if(data)\ncount <= count + 1;\nelse if(ack)\ncount <= count + 2;\nend\n\nalways @(posedge clk)\nbegin\nif(reset)\ncount <= 0;\nelse if(data)\ncount <= count + 1;\nelse if(ack)\ncount <= count + 2;\nend\n\nalways @(posedge clk)\nbegin\nif(reset)\ncount <= 0;\nelse if(data)\ncount <= count + 1;\nelse if(ack)\ncount <= count + 2;\nend\n\nalways @(posedge clk)\nbegin\nif(reset)\ncount <= 0;\nelse if(data)\ncount <= count + 1;\nelse if(ack)\ncount <= count + 2;\nend\n\nalways @(posedge clk)\nbegin\nif(reset)\ncount <= 0;\nelse if(data)\ncount <= count + 1;\nelse if(ack)\ncount <= count + 2;\nend\n\nalways @(posedge clk)\nbegin\nif(reset)\ncount <= 0;\nelse if(data)\ncount <= count + 1;\nelse if(ack)\ncount <= count + 2;\nend\n\nalways @(posedge clk)\nbegin\nif(reset)\ncount <= 0;\nelse if(data)\ncount <= count + 1;\nend\n\nalways @(posedge clk)\nbegin\nif(reset)\ncount <= 0;\nelse if(data)\ncount <= count + 1;\nend\n\nalways @(posedge clk)\nbegin\nif(reset)\ncount <= 0;\nelse if(data)\ncount <= count + 1;\nend\n\nalways @(posedge clk)\nbegin\nif(reset)\ncount <= 0;\nelse if(data)\ncount <= count + 1;\nend\n\nalways @(posedge clk)\nbegin\nif(reset)\ncount <= 0;\nelse if(data)\ncount <= count + 1;\nend\n\nalways @(posedge clk)\nbegin\nif(reset)\ncount <= 0;\nelse if(data)\ncount <= count + 1;\nend\n\nalways @(posedge clk)\nbegin\nif(reset)\ncount <= 0;\nelse if(data)\ncount <= count + 1;\nend\n\nalways @(posedge clk)\nbegin\nif(reset)\ncount <= 0;\nelse if(data)\ncount <= count + 1;\nend\n\nalways @(posedge clk)\nbegin\nif(reset)\ncount <= 0;\nelse if(data)\ncount <= count + 1;\nend\n\nalways @(posedge clk)\nbegin\nif(reset)\ncount <= 0;\nelse if(data)\ncount <= count + 1;\nend\n\nalways @(posedge clk)\nbegin\nif(reset)\ncount <= 0;\nelse if(data)\ncount <= count + 1;\nend\n\nalways @(posedge clk)\nbegin\nif(reset)\ncount <= 0;\nelse if(data)\ncount <= count + 1;\nend\n\nalways @(posedge clk)\nbegin\nif(reset)\ncount <= 0;\nelse if(data)\ncount <= count + 1;\nend\n\nalways @(posedge clk)\nbegin\nif(reset)\ncount <= 0;\nelse if(data)\ncount <= count + 1;\nend\n\nalways @(posedge clk)\nbegin\nif(reset)\ncount <= 0;\nelse if(data)\ncount <= count + 1;\nend\n\nalways @(posedge clk)\nbegin\nif(reset)\ncount <= 0;\nelse if(data)\ncount <= count + 1;\nend\n\nalways @(posedge clk)\nbegin\nif(reset)\ncount <= 0;\nelse if(data)\ncount <= count + 1;\nend\n\nalways @(posedge clk)\nbegin\nif(reset)\ncount <= 0;\nelse if(data)\ncount <= count + 1;\nend\n\nalways @(posedge clk)\nbegin\nif(reset)\ncount <= 0;\nelse if(data)\ncount <= count + 1;\nend\n\nalways @(posedge clk)\nbegin\nif(reset)\ncount <= 0;\nelse if(data)\ncount <= count + 1;\nend\n\nalways @(posedge clk)\nbegin\nif(reset)\ncount <= 0;\nelse if(data)\ncount <= count + 1;\nend\n\nalways @(posedge clk)\nbegin\nif(reset)\ncount <= 0;\nelse if(data)\ncount <= count + 1;\nend\n\nalways @(posedge clk)\nbegin\nif(reset)\ncount <= 0;\nelse if(data)\ncount <= count + 1;\nend\n\nalways @(posedge clk)\nbegin\nif(reset)\ncount <= 0;\nelse if(data)\ncount <= count + 1;\nend\n\nalways @(posedge clk)\nbegin\nif(reset)\ncount <= 0;\nelse if(data)\ncount <= count + 1;\nend\n\nalways @(posedge clk)\nbegin\nif(reset)\ncount <= 0;\nelse if(data)\ncount <= count + 1;\nend\n\nalways @(posedge clk)\nbegin\nif(reset)\ncount <= 0;\nelse if(data)\ncount <= count + 1;\nend\n\nalways @(posedge clk)\nbegin\nif(reset)\ncount <= 0;\nelse if(data)\ncount <= count + 1;\nend\n\nalways @(posedge clk)\nbegin\nif(reset)\ncount <= 0;\nelse if(data)\ncount <= count + 1;\nend\n\nalways @(posedge clk)\nbegin\nif(reset)\ncount <= 0;\nelse if(data)\ncount <= count + 1;\nend\n\nalways @(posedge clk)\nbegin\nif(reset)\ncount <= 0;\nelse if(data)\ncount"}
{"task_id": "ece241_2013_q4", "completion": "Task: Write Verilog program for the given description.\nDescription: A large reservior of water serves several users. In order to keep the level of water succificently high, three sensors are placed vertically at 5-inch intervals. When the water level is above the highest sensor s[3], the input flow rate should be zero. When the level is below the lowest sensor s[1], the flow rate should be at maximum (both Nominal flow valve and Supplemental flow valve opened). The flow rate when the level is between the upper and lower sensors is determined by two factors: the water level and the level previous to the last sensor change. Each water level has a nominal flow rate associated with it as show in the table below. If the sensor change indicates that the previous level was lower than the current level, the flow rate should be increased by opening the Supplemental flow valve (controlled by dfr). \n// Water Level | Sensors Asserted | Nominal Flow Rate Inputs to be Asserted\n// Above s[3] | s[1], s[2], s[3] | None\n// Between s[3] and s[2] | s[1], s[2] | fr1\n// Between s[2] and s[1]  | s[1] | fr1, fr2\n// Below s[1] | None | fr1, fr2, fr3\n// Also include an active-high synchronous reset that resets the state machine to a state equivalent to if the water level had been low for a long time (no sensors asserted, and all four outputs asserted)..\nGenerated Code: module top_module (\n\tinput clk,\n\tinput reset,\n\tinput [3:1] s,\n\toutput reg fr3,\n\toutput reg fr2,\n\toutput reg fr1,\n\toutput reg dfr\n);\n\n\nassign fr3 = 1'b0;\nassign fr2 = 1'b0;\nassign fr1 = 1'b0;\nassign dfr = 1'b0;\n\nalways @(posedge clk) begin\nif (reset) begin\nfr3 <= 1'b0;\nfr2 <= 1'b0;\nfr1 <= 1'b0;\ndfr <= 1'b0;\nend else begin\nif (s == 3'b00) begin\nfr3 <= 1'b1;\nfr2 <= 1'b1;\nfr1 <= 1'b1;\ndfr <= 1'b1;\nend else begin\nif (s == 3'b01) begin\nfr3 <= 1'b1;\nfr2 <= 1'b1;\nfr1 <= 1'b1;\ndfr <= 1'b1;\nend else begin\nif (s == 3'b10) begin\nfr3 <= 1'b1;\nfr2 <= 1'b1;\nfr1 <= 1'b1;\ndfr <= 1'b1;\nend else begin\nif (s == 3'b11) begin\nfr3 <= 1'b1;\nfr2 <= 1'b1;\nfr1 <= 1'b1;\ndfr <= 1'b1;\nend else begin\nif (s == 3'b20) begin\nfr3 <= 1'b1;\nfr2 <= 1'b1;\nfr1 <= 1'b1;\ndfr <= 1'b1;\nend else begin\nif (s == 3'b21) begin\nfr3 <= 1'b1;\nfr2 <= 1'b1;\nfr1 <= 1'b1;\ndfr <= 1'b1;\nend else begin\nif (s == 3'b22) begin\nfr3 <= 1'b1;\nfr2 <= 1'b1;\nfr1 <= 1'b1;\ndfr <= 1'b1;\nend else begin\nif (s == 3'b23) begin\nfr3 <= 1'b1;\nfr2 <= 1'b1;\nfr1 <= 1'b1;\ndfr <= 1'b1;\nend else begin\nif (s == 3'b24) begin\nfr3 <= 1'b1;\nfr2 <= 1'b1;\nfr1 <= 1'b1;\ndfr <= 1'b1;\nend else begin\nif (s == 3'b25) begin\nfr3 <= 1'b1;\nfr2 <= 1'b1;\nfr1 <= 1'b1;\ndfr <= 1'b1;\nend else begin\nif (s == 3'b26) begin\nfr3 <= 1'b1;\nfr2 <= 1'b1;\nfr1 <= 1'b1;\ndfr <= 1'b1;\nend else begin\nif (s == 3'b27) begin\nfr3 <= 1'b1;\nfr2 <= 1'b1;\nfr1 <= 1'b1;\ndfr <= 1'b1;\nend else begin\nif (s == 3'b28) begin\nfr3 <= 1'b1;\nfr2 <= 1'b1;\nfr1 <= 1'b1;\ndfr <= 1'b1;\nend else begin\nif (s == 3'b29) begin\nfr3 <= 1'b1;\nfr2 <= 1'b1;\nfr1 <= 1'b1;\ndfr <= 1'b1;\nend else begin\nif (s == 3'b30) begin\nfr3 <= 1'b1;\nfr2 <= 1'b1;\nfr1 <= 1'b1;\ndfr <= 1'b1;\nend else begin\nif (s == 3'b31) begin\nfr3 <= 1'b1;\nfr2 <= 1'b1;\nfr1 <= 1'b1;\ndfr <= 1'b1;\nend else begin\nif (s == 3'b32) begin\nfr3 <= 1'b1;\nfr2 <= 1'b1;\nfr1 <= 1'b1;\ndfr <= 1'b1;\nend else begin\nif (s == 3'b33) begin\nfr3 <= 1'b1;\nfr2 <= 1'b1;\nfr1 <= 1'b1;\ndfr <= 1'b1;\nend else begin\nif (s == 3'b34) begin\nfr3 <= 1'b1;\nfr2 <= 1'b1;\nfr1 <= 1'b1;\ndfr <= 1'b1;\nend else begin\nif (s == 3'b35) begin\nfr3 <= 1'b1;\nfr2 <= 1'b1;\nfr1 <= 1'b1;\ndfr <= 1'b1;\nend else begin\nif (s == 3'b36) begin\nfr3 <= 1'b1;\nfr2 <= 1'b1;\nfr1 <= 1'b1;\ndfr <= 1'b1;\nend else begin\nif (s == 3'b37) begin\nfr3 <= 1'b1;\nfr2 <= 1'b1;\nfr1 <= 1'b1;\ndfr <= 1'b1;\nend else begin\nif (s == 3'b38) begin\nfr3 <= 1'b1;\nfr2 <= 1'b1;\nfr1 <= 1'b1;\ndfr <= 1'b1;\nend else begin\nif (s == 3'b39) begin\nfr3 <= 1'b1;\nfr2 <= 1'b1;\nfr1 <= 1'b1;\ndfr <= 1'b1;\nend else begin\nif (s == 3'b40) begin\nfr3 <= 1'b1;\nfr2 <= 1'b1;\nfr1 <= 1'b1;\ndfr <= 1'b1;\nend else begin\nif (s == 3'b41) begin\nfr3 <= 1'b1;\nfr2 <= 1'b1;\nfr1 <= 1'b1;\ndfr <= 1'b1;\nend else begin\nif (s == 3'b42) begin\nfr3 <= 1'b1;\nfr2 <= 1'b1;\nfr1 <= 1'b1;\ndfr <= 1'b1;\nend else begin\nif (s == 3'b43) begin\nfr3 <= 1'b1;\nfr2 <= 1'b1;\nfr1 <= 1'b1;\ndfr <= 1'b1;\nend else begin\nif (s == 3'b44) begin\nfr3 <= 1'b1;\nfr2 <= 1'b1;\nfr1 <= 1'b1;\ndfr <= 1'b1;\nend else begin\nif (s == 3'b45) begin\nfr3 <= 1'b1;\nfr2 <= 1'b1;\nfr1 <= 1'b1;\ndfr <= 1'b1;\nend else begin\nif (s == 3'b46) begin\nfr3 <="}
{"task_id": "fsm_serial", "completion": "Task: Write Verilog program for the given description.\nDescription: In many (older) serial communications protocols, each data byte is sent along with a start bit and a stop bit, to help the receiver delimit bytes from the stream of bits. One common scheme is to use one start bit (0), 8 data bits, and 1 stop bit (1). The line is also at logic 1 when nothing is being transmitted (idle). Design a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte. Include a active-high synchronous reset. Note that the serial protocol sends the least significant bit first..\nGenerated Code: module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput done\n);\n\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Declarations\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Functions\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Global Variables\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Instance Declarations\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Constructors\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Public Methods\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Protected Methods\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Internal Methods\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Public Methods\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Overrides\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Returned Files\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Command Line Interface\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// User Interface Event Handlers\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// User Interface Renderers\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Render Module\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// End of module definition\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Main program\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Main program entry point\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize global variables\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize local variables\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize instance variables\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize user interface renderers\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize output ports\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize input ports\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize inputs\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize outputs\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize output ports\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize modules\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize constants\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize objects\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize object wrappers\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize components\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize component wrappers\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize signals\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize signals\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize timers\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize timer wrappers\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize memory banks\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize RAM banks\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize RAM banks\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize ROM banks\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize ROM banks\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize ROM banks\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize RAM banks\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize RAM banks\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize ROM banks\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize ROM banks\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize ROM banks\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize RAM banks\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize RAM banks\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize ROM banks\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize ROM banks\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize ROM banks\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize ROM banks\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize ROM banks\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize RAM banks\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize RAM banks\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize ROM banks\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize ROM banks\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize ROM banks\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize RAM banks\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize ROM banks\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize ROM banks\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize ROM banks\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize ROM banks\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize ROM banks\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize ROM banks\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize ROM banks\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize ROM banks\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize ROM banks\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize ROM banks\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize ROM banks\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize ROM banks\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize ROM banks\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize ROM banks\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize ROM banks\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize ROM banks\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize ROM banks\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize ROM banks\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize ROM banks\n//\n//////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////\n//\n// Initialize ROM banks"}
{"task_id": "fsm_serialdata", "completion": "Task: Write Verilog program for the given description.\nDescription: In many (older) serial communications protocols, each data byte is sent along with a start bit and a stop bit, to help the receiver delimit bytes from the stream of bits. One common scheme is to use one start bit (0), 8 data bits, and 1 stop bit (1). The line is also at logic 1 when nothing is being transmitted (idle). Design a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. The module will also output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte. Include a active-high synchronous reset. Note that the serial protocol sends the least significant bit first. It should assert done each time it finds a stop bit..\nGenerated Code: module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput [7:0] out_byte,\n\toutput done\n);\n\n\nparameter DATA_WIDTH = 8;\nparameter BIT_WIDTH = DATA_WIDTH / 8;\nparameter BYTES_PER_LINE = DATA_WIDTH / BIT_WIDTH;\nparameter INITIAL_STOP_BITS = BIT_WIDTH - 1;\nparameter MAX_STOP_BITS = 2 * INITIAL_STOP_BITS + 1;\nparameter START_BITS = INITIAL_STOP_BITS + 1;\nparameter STOP_BITS = START_BITS + 1;\nparameter END_BITS = START_BITS + 1;\nparameter IDLE_STOP_BITS = END_BITS + 1;\nparameter OUTPUT_STOP_BITS = END_BITS + 1;\nparameter SEND_STOP_BITS = OUTPUT_STOP_BITS + 1;\nparameter RECEIVE_STOP_BITS = OUTPUT_STOP_BITS + 1;\nparameter REQUEST_STOP_BITS = RECEIVE_STOP_BITS + 1;\nparameter READ_STOP_BITS = RECEIVE_STOP_BITS + 1;\nparameter WRITE_STOP_BITS = RECEIVE_STOP_BITS + 1;\nparameter ERROR_STOP_BITS = OUTPUT_STOP_BITS + 1;\nparameter ACTIVE_STOP_BITS = ERROR_STOP_BITS + 1;\nparameter ACTIVE_ERROR_STOP_BITS = ERROR_STOP_BITS + 1;\nparameter ACTIVE_REQUEST_STOP_BITS = REQUEST_STOP_BITS + 1;\nparameter ACTIVE_READ_STOP_BITS = READ_STOP_BITS + 1;\nparameter ACTIVE_WRITE_STOP_BITS = WRITE_STOP_BITS + 1;\nparameter ACTIVE_ERROR_STOP_BITS = ERROR_STOP_BITS + 1;\nparameter ACTIVE_REQUEST_STOP_BITS = REQUEST_STOP_BITS + 1;\nparameter ACTIVE_READ_STOP_BITS = READ_STOP_BITS + 1;\nparameter ACTIVE_WRITE_STOP_BITS = WRITE_STOP_BITS + 1;\nparameter ACTIVE_ERROR_STOP_BITS = ERROR_STOP_BITS + 1;\nparameter ACTIVE_REQUEST_STOP_BITS = REQUEST_STOP_BITS + 1;\nparameter ACTIVE_READ_STOP_BITS = READ_STOP_BITS + 1;\nparameter ACTIVE_WRITE_STOP_BITS = WRITE_STOP_BITS + 1;\nparameter ACTIVE_ERROR_STOP_BITS = ERROR_STOP_BITS + 1;\nparameter ACTIVE_REQUEST_STOP_BITS = REQUEST_STOP_BITS + 1;\nparameter ACTIVE_READ_STOP_BITS = READ_STOP_BITS + 1;\nparameter ACTIVE_WRITE_STOP_BITS = WRITE_STOP_BITS + 1;\nparameter ACTIVE_ERROR_STOP_BITS = ERROR_STOP_BITS + 1;\nparameter ACTIVE_REQUEST_STOP_BITS = REQUEST_STOP_BITS + 1;\nparameter ACTIVE_READ_STOP_BITS = READ_STOP_BITS + 1;\nparameter ACTIVE_WRITE_STOP_BITS = WRITE_STOP_BITS + 1;\nparameter ACTIVE_ERROR_STOP_BITS = ERROR_STOP_BITS + 1;\nparameter ACTIVE_REQUEST_STOP_BITS = REQUEST_STOP_BITS + 1;\nparameter ACTIVE_READ_STOP_BITS = READ_STOP_BITS + 1;\nparameter ACTIVE_WRITE_STOP_BITS = WRITE_STOP_BITS + 1;\nparameter ACTIVE_ERROR_STOP_BITS = ERROR_STOP_BITS + 1;\nparameter ACTIVE_REQUEST_STOP_BITS = REQUEST_STOP_BITS + 1;\nparameter ACTIVE_READ_STOP_BITS = READ_STOP_BITS + 1;\nparameter ACTIVE_WRITE_STOP_BITS = WRITE_STOP_BITS + 1;\nparameter ACTIVE_ERROR_STOP_BITS = ERROR_STOP_BITS + 1;\nparameter ACTIVE_REQUEST_STOP_BITS = REQUEST_STOP_BITS + 1;\nparameter ACTIVE_READ_STOP_BITS = READ_STOP_BITS + 1;\nparameter ACTIVE_WRITE_STOP_BITS = WRITE_STOP_BITS + 1;\nparameter ACTIVE_ERROR_STOP_BITS = ERROR_STOP_BITS + 1;\nparameter ACTIVE_REQUEST_STOP_BITS = REQUEST_STOP_BITS + 1;\nparameter ACTIVE_READ_STOP_BITS = READ_STOP_BITS + 1;\nparameter ACTIVE_WRITE_STOP_BITS = WRITE_STOP_BITS + 1;\nparameter ACTIVE_ERROR_STOP_BITS = ERROR_STOP_BITS + 1;\nparameter ACTIVE_REQUEST_STOP_BITS = REQUEST_STOP_BITS + 1;\nparameter ACTIVE_READ_STOP_BITS = READ_STOP_BITS + 1;\nparameter ACTIVE_WRITE_STOP_BITS = WRITE_STOP_BITS + 1;\nparameter ACTIVE_ERROR_STOP_BITS = ERROR_STOP_BITS + 1;\nparameter ACTIVE_REQUEST_STOP_BITS = REQUEST_STOP_BITS + 1;\nparameter ACTIVE_READ_STOP_BITS = READ_STOP_BITS + 1;\nparameter ACTIVE_WRITE_STOP_BITS = WRITE_STOP_BITS + 1;\nparameter ACTIVE_ERROR_STOP_BITS = ERROR_STOP_BITS + 1;\nparameter ACTIVE_REQUEST_STOP_BITS = REQUEST_STOP_BITS + 1;\nparameter ACTIVE_READ_STOP_BITS = READ_STOP_BITS + 1;\nparameter ACTIVE_WRITE_STOP_BITS = WRITE_STOP_BITS + 1;\nparameter ACTIVE_ERROR_STOP_BITS = ERROR_STOP_BITS + 1;\nparameter ACTIVE_REQUEST_STOP_BITS = REQUEST_STOP_BITS + 1;\nparameter ACTIVE_READ_STOP_BITS = READ_STOP_BITS + 1;\nparameter ACTIVE_WRITE_STOP_BITS = WRITE_STOP_BITS + 1;\nparameter ACTIVE_ERROR_STOP_BITS = ERROR_STOP_BITS + 1;\nparameter ACTIVE_REQUEST_STOP_BITS = REQUEST_STOP_BITS + 1;\nparameter ACTIVE_READ_STOP_BITS = READ_STOP_BITS + 1;\nparameter ACTIVE_WRITE_STOP_BITS = WRITE_STOP_BITS + 1;\nparameter ACTIVE_ERROR_STOP_BITS = ERROR_STOP_BITS + 1;\nparameter ACTIVE_REQUEST_STOP_BITS = REQUEST"}
{"task_id": "review2015_fsm", "completion": "Task: Write Verilog program for the given description.\nDescription: We want to create a timer that:\n// (1) is started when a particular pattern (1101) is detected,\n// (2) shifts in 4 more bits to determine the duration to delay,\n// (3) waits for the counters to finish counting, and\n// (4) notifies the user and waits for the user to acknowledge the timer.\n// In this problem, implement just the finite-state machine that controls the timer. The data path (counters and some comparators) are not included here.\n// The serial data is available on the data input pin. When the pattern 1101 is received, the state machine must then assert output shift_ena for exactly 4 clock cycles. After that, the state machine asserts its counting output to indicate it is waiting for the counters, and waits until input done_counting is high.At that point, the state machine must assert done to notify the user the timer has timed out, and waits until input ack is 1 before being reset to look for the next occurrence of the start sequence (1101). The state machine should have a active high synchronous reset, setting the state to where it begins searching for the input sequence 1101..\nGenerated Code: module top_module(\n\tinput clk,\n\tinput reset,\n\tinput data,\n    output reg shift_ena,\n    output reg counting,\n    input done_counting,\n    output reg done,\n    input ack );\n\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n"}
{"task_id": "conwaylife", "completion": "Task: Write Verilog program for the given description.\nDescription: The \"game\" is played on a two-dimensional grid of cells, where each cell is either 1 (alive) or 0 (dead). At each time step, each cell changes state depending on how many neighbours it has:\n// (1) 0-1 neighbour: Cell becomes 0.\n// (2) 2 neighbours: Cell state does not change.\n// (3) 3 neighbours: Cell becomes 1.\n// (4) 4+ neighbours: Cell becomes 0.\n// The game is formulated for an infinite grid. In this circuit, we will use a 16x16 grid. To make things more interesting, we will use a 16x16 toroid, where the sides wrap around to the other side of the grid. For example, the corner cell (0,0) has 8 neighbours: (15,1), (15,0), (15,15), (0,1), (0,15), (1,1), (1,0), and (1,15). The 16x16 grid is represented by a length 256 vector, where each row of 16 cells is represented by a sub-vector: q[15:0] is row 0, q[31:16] is row 1, etc. \n// (1) load: Loads data into q at the next clock edge, for loading initial state. Active high synchronous.\n// (2) q: The 16x16 current state of the game, updated every clock cycle.\n// The game state should advance by one timestep every clock cycle..\nGenerated Code: module top_module(\n\tinput clk,\n\tinput load,\n\tinput [255:0] data,\n\toutput reg [255:0] q);\n\n\nalways @(posedge clk)\nif(load)\nq <= data;\nendmodule // top_module"}
{"task_id": "count_clock", "completion": "Task: Write Verilog program for the given description.\nDescription: Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second, while \"clk\" is much faster than once per second). The signal \"pm\" is asserted if the clock is PM, or is otherwise AM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset is the active high synchronous signal that resets the clock to \"12:00 AM.\" Reset has higher priority than enable and can occur even when not enabled..\nGenerated Code: module top_module(\n\tinput clk,\n\tinput reset,\n\tinput ena,\n\toutput reg pm,\n\toutput reg [7:0] hh,\n\toutput reg [7:0] mm,\n\toutput reg [7:0] ss);\n\n\ngenerate\nif (reset == 0) begin\nreg [7:0] pm;\nreg [7:0] hh;\nreg [7:0] mm;\nreg [7:0] ss;\nend\nelse begin\nreg [7:0] pm;\nreg [7:0] hh;\nreg [7:0] mm;\nreg [7:0] ss;\nend\nend\nendgenerate\n\nalways @(posedge clk) begin\nif (reset == 0) begin\npm[7:0] = 0;\nhh[7:0] = 0;\nmm[7:0] = 0;\nss[7:0] = 0;\nend\nelse begin\npm[7:0] <= pm[7:0];\nhh[7:0] <= hh[7:0];\nmm[7:0] <= mm[7:0];\nss[7:0] <= ss[7:0];\nend\nend\nendmodule"}
{"task_id": "lemmings2", "completion": "Task: Write Verilog program for the given description.\nDescription: The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"aaah!\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left..\nGenerated Code: module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah\n);\n\n\n///////////////////////////////////////////////////////////////////////////////\n// Declarations\n///////////////////////////////////////////////////////////////////////////////\nreg [7:0] x;\nreg [7:0] y;\nreg [7:0] z;\nreg [7:0] w;\nreg [7:0] h;\nreg [7:0] i;\nreg [7:0] j;\nreg [7:0] k;\nreg [7:0] l;\nreg [7:0] m;\nreg [7:0] n;\nreg [7:0] o;\nreg [7:0] p;\nreg [7:0] q;\nreg [7:0] r;\nreg [7:0] s;\nreg [7:0] t;\nreg [7:0] u;\nreg [7:0] v;\nreg [7:0] w2;\nreg [7:0] w3;\nreg [7:0] w4;\nreg [7:0] w5;\nreg [7:0] w6;\nreg [7:0] w7;\nreg [7:0] w8;\nreg [7:0] w9;\nreg [7:0] w10;\nreg [7:0] w11;\nreg [7:0] w12;\nreg [7:0] w13;\nreg [7:0] w14;\nreg [7:0] w15;\nreg [7:0] w16;\nreg [7:0] w17;\nreg [7:0] w18;\nreg [7:0] w19;\nreg [7:0] w20;\nreg [7:0] w21;\nreg [7:0] w22;\nreg [7:0] w23;\nreg [7:0] w24;\nreg [7:0] w25;\nreg [7:0] w26;\nreg [7:0] w27;\nreg [7:0] w28;\nreg [7:0] w29;\nreg [7:0] w30;\nreg [7:0] w31;\nreg [7:0] w32;\nreg [7:0] w33;\nreg [7:0] w34;\nreg [7:0] w35;\nreg [7:0] w36;\nreg [7:0] w37;\nreg [7:0] w38;\nreg [7:0] w39;\nreg [7:0] w40;\nreg [7:0] w41;\nreg [7:0] w42;\nreg [7:0] w43;\nreg [7:0] w44;\nreg [7:0] w45;\nreg [7:0] w46;\nreg [7:0] w47;\nreg [7:0] w48;\nreg [7:0] w49;\nreg [7:0] w50;\nreg [7:0] w51;\nreg [7:0] w52;\nreg [7:0] w53;\nreg [7:0] w54;\nreg [7:0] w55;\nreg [7:0] w56;\nreg [7:0] w57;\nreg [7:0] w58;\nreg [7:0] w59;\nreg [7:0] w60;\nreg [7:0] w61;\nreg [7:0] w62;\nreg [7:0] w63;\nreg [7:0] w64;\nreg [7:0] w65;\nreg [7:0] w66;\nreg [7:0] w67;\nreg [7:0] w68;\nreg [7:0] w69;\nreg [7:0] w70;\nreg [7:0] w71;\nreg [7:0] w72;\nreg [7:0] w73;\nreg [7:0] w74;\nreg [7:0] w75;\nreg [7:0] w76;\nreg [7:0] w77;\nreg [7:0] w78;\nreg [7:0] w79;\nreg [7:0] w80;\nreg [7:0] w81;\nreg [7:0] w82;\nreg [7:0] w83;\nreg [7:0] w84;\nreg [7:0] w85;\nreg [7:0] w86;\nreg [7:0] w87;\nreg [7:0] w88;\nreg [7:0] w89;\nreg [7:0] w90;\nreg [7:0] w91;\nreg [7:0] w92;\nreg [7:0] w93;\nreg [7:0] w94;\nreg [7:0] w95;\nreg [7:0] w96;\nreg [7:0] w97;\nreg [7:0] w98;\nreg [7:0] w99;\nreg [7:0] w100;\nreg [7:0] w101;\nreg [7:0] w102;\nreg [7:0] w103;\nreg [7:0] w104;\nreg [7:0] w105;\nreg [7:0] w106;\nreg [7:0] w107;\nreg [7:0] w108;\nreg [7:0] w109;\nreg [7:0] w110;\nreg [7:0] w111;\nreg [7:0] w112;\nreg [7:0] w113;\nreg [7:0] w114;\nreg [7:0] w115;\nreg [7:0] w116;\nreg [7:0] w117;\nreg [7:0] w118;\nreg [7:0] w119;\nreg [7:0] w120;\nreg [7:0] w121;\nreg [7:0] w122;\nreg [7:0] w123;\nreg [7:0] w124;\nreg [7:0] w125;\nreg [7:0] w126;\nreg [7:0] w127;\nreg [7:0] w128;\nreg [7:0] w129;\nreg [7:0] w130;\nreg [7:0] w131;\nreg [7:0] w132;\nreg [7:0] w133;\nreg [7:0] w134;\nreg [7:0] w135;\nreg [7:0] w136;\nreg [7:0] w137;\nreg [7:0] w138;\nreg [7:0] w139;\nreg [7:0] w140;\nreg [7:0] w141;\nreg [7:0] w142;\nreg [7:0] w143;\nreg [7:0] w144;\nreg [7:0] w145;\nreg [7:0] w146;\nreg [7:0] w147;\nreg [7:0] w148;\nreg [7:0] w149;\nreg [7:0] w150;\nreg [7:0] w151;\nreg [7:0]"}
{"task_id": "countbcd", "completion": "Task: Write Verilog program for the given description.\nDescription: Build a 4-digit BCD (binary-coded decimal) counter. Each decimal digit is encoded using 4 bits: q[3:0] is the ones digit, q[7:4] is the tens digit, etc. For digits [3:1], also output an enable signal indicating when each of the upper three digits should be incremented. Include a synchronous active-high reset..\nGenerated Code: module top_module(\n\tinput clk,\n\tinput reset,\n\toutput [3:1] ena,\n\toutput reg [15:0] q);\n\n\nalways @(posedge clk)\nif(reset)\nena[3:0] <= 0;\nelse if(ena[3:0] == 4'b0000)\nena[3:0] <= 0;\nelse if(ena[3:0] == 4'b0001)\nena[3:0] <= 1;\nelse if(ena[3:0] == 4'b0010)\nena[3:0] <= 2;\nelse if(ena[3:0] == 4'b0011)\nena[3:0] <= 3;\nelse if(ena[3:0] == 4'b0100)\nena[3:0] <= 4;\nelse if(ena[3:0] == 4'b0101)\nena[3:0] <= 5;\nelse if(ena[3:0] == 4'b0110)\nena[3:0] <= 6;\nelse if(ena[3:0] == 4'b0111)\nena[3:0] <= 7;\nelse if(ena[3:0] == 4'b1000)\nena[3:0] <= 8;\nelse if(ena[3:0] == 4'b1001)\nena[3:0] <= 9;\nelse if(ena[3:0] == 4'b1010)\nena[3:0] <= 10;\nelse if(ena[3:0] == 4'b1011)\nena[3:0] <= 11;\nelse if(ena[3:0] == 4'b1100)\nena[3:0] <= 12;\nelse if(ena[3:0] == 4'b1101)\nena[3:0] <= 13;\nelse if(ena[3:0] == 4'b1110)\nena[3:0] <= 14;\nelse if(ena[3:0] == 4'b1111)\nena[3:0] <= 15;\nelse if(ena[3:0] == 4'b0000)\nena[3:0] <= 16;\nelse if(ena[3:0] == 4'b0001)\nena[3:0] <= 17;\nelse if(ena[3:0] == 4'b0010)\nena[3:0] <= 18;\nelse if(ena[3:0] == 4'b0011)\nena[3:0] <= 19;\nelse if(ena[3:0] == 4'b0100)\nena[3:0] <= 20;\nelse if(ena[3:0] == 4'b0101)\nena[3:0] <= 21;\nelse if(ena[3:0] == 4'b0110)\nena[3:0] <= 22;\nelse if(ena[3:0] == 4'b0111)\nena[3:0] <= 23;\nelse if(ena[3:0] == 4'b1000)\nena[3:0] <= 24;\nelse if(ena[3:0] == 4'b1001)\nena[3:0] <= 25;\nelse if(ena[3:0] == 4'b1010)\nena[3:0] <= 26;\nelse if(ena[3:0] == 4'b1011)\nena[3:0] <= 27;\nelse if(ena[3:0] == 4'b1100)\nena[3:0] <= 28;\nelse if(ena[3:0] == 4'b1101)\nena[3:0] <= 29;\nelse if(ena[3:0] == 4'b1110)\nena[3:0] <= 30;\nelse if(ena[3:0] == 4'b1111)\nena[3:0] <= 31;\nelse if(ena[3:0] == 4'b0000)\nena[3:0] <= 32;\nelse if(ena[3:0] == 4'b0001)\nena[3:0] <= 33;\nelse if(ena[3:0] == 4'b0010)\nena[3:0] <= 34;\nelse if(ena[3:0] == 4'b0011)\nena[3:0] <= 35;\nelse if(ena[3:0] == 4'b0100)\nena[3:0] <= 36;\nelse if(ena[3:0] == 4'b0101)\nena[3:0] <= 37;\nelse if(ena[3:0] == 4'b0110)\nena[3:0] <= 38;\nelse if(ena[3:0] == 4'b0111)\nena[3:0] <= 39;\nelse if(ena[3:0] == 4'b1000)\nena[3:0] <= 40;\nelse if(ena[3:0] == 4'b1001)\nena[3:0] <= 41;\nelse if(ena[3:0] == 4'b1010)\nena[3:0] <= 42;\nelse if(ena[3:0] == 4'b1011)\nena[3:0] <= 43;\nelse if(ena[3:0] == 4'b1100)\nena[3:0] <= 44;\nelse if(ena[3:0] == 4'b1101)\nena[3:0] <= 45;\nelse if(ena[3:0] == 4'b1110)\nena[3:0] <= 46;\nelse if(ena[3:0] == 4'b1111)\nena[3:0] <= 47;\nelse if(ena[3:0] == 4'b0000)\nena[3:0] <= 48;\nelse if(ena[3:0] == 4'b0001)\nena[3:0] <= 49;\nelse if(ena[3:0] == 4'b0010)\nena[3:0] <= 50;\nelse if(ena[3:0] == 4'b0011)\nena[3:0] <= 51;\nelse if(ena[3:0] == 4'b0100)\nena[3:0] <= 52;\nelse if(ena[3:0] == 4'b0101)\nena[3:0] <= 53;\nelse if(ena[3:0] == 4'b0110)\nena[3:0] <= 54;\nelse if(ena[3:0] == 4'b0111)\nena[3:0] <= 55;\nelse if(ena[3:0] == 4'b1000)\nena[3:0] <= 56;\nelse if(ena[3:0] == 4'b1001)\nena[3:0] <= 57;\nelse if(ena[3:0] == 4'b1010)\nena[3:0] <= 58;\nelse if(ena[3:0] == 4'b1011)\nena[3:0] <= 59;\nelse if(ena[3:0] == 4'b1100)\nena[3:0] <= 60;\nelse if(ena[3:0] == 4'b1101)\nena[3:0] <= 61;\nelse if(ena[3:0] == 4'b1110)\nena[3:0] <= 62;\nelse if(ena[3:0] == 4'b1111)\nena[3:0] <= 63;\nelse if(ena[3:0] == 4'b0000)\nena[3:0] <= 64;\nelse if(ena[3:0] == 4'b0001)\nena[3:0] <= 65;\nelse if(ena[3:0] == 4'b0010)\nena[3:0] <= 66;\nelse if(ena[3:0] == 4'b0011)\nena[3:0] <= 67;\nelse if(ena[3:0] == 4'b0100)\nena[3:0] <= 68;\nelse if(ena[3:0] == 4'b0101)\nena[3:0] <= 69;\nelse if(ena[3:0] == 4'b0110)\nena[3:0] <= 70;\nelse"}
