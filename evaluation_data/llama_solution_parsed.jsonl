{"task_id": "mux2to1v", "completion": "\n\tassign out = (sel == 0)? a : b; \n endmodule"}
{"task_id": "m2014_q6b", "completion": "\n\tassign Y2 = y[2]; \n  always @(*) begin \n  case(y[3:1]) \n  0: begin \n  Y2 = 1'b0; \n  end \n  1: begin \n  Y2 = 1'b1; \n  end \n  2: begin \n  Y2 = 1'b0; \n  end \n  3: begin \n  Y2 = 1'b1; \n  end \n  4: begin \n  Y2 = 1'b0; \n  end \n  5: begin \n  Y2 = 1'b1; \n  end \n  6: begin \n  Y2 = 1'b0; \n  end \n  7: begin \n  Y2 = 1'b1; \n  end \n  8: begin \n  Y2 = 1'b0; \n  end \n  9: begin \n  Y2 = 1'b1; \n  end \n  10: begin \n  Y2 = 1'b0; \n  end \n  11: begin \n  Y2 = 1'b1; \n  end \n  12: begin \n  Y2 = 1'b0; \n  end \n  13: begin \n  Y2 = 1'b1; \n  end \n  14: begin \n  Y2 = 1'b0; \n  end \n  15: begin \n  Y2 = 1'b1; \n  end \n  16: begin \n  Y2 = 1'b0; \n  end \n  17: begin \n  Y2 = 1'b1; \n  end \n  18: begin \n  Y2 = 1'b0; \n  end \n  19: begin \n  Y2 = 1'b1; \n  end \n  20: begin \n  Y2 = 1'b0; \n  end \n  21: begin \n  Y2 = 1'b1; \n  end \n  22: begin \n  Y2 = 1'b0; \n  end \n  23: begin \n  Y2 = 1'b1; \n  end \n  24: begin \n  Y2 = 1'b0; \n  end \n  25: begin \n  Y2 = 1'b1; \n  end \n  26: begin \n  Y2 = 1'b0; \n  end \n  27: begin \n  Y2 = 1'b1; \n  end \n  28: begin \n  Y2 = 1'b0; \n  end \n  29: begin \n  Y2 = 1'b1; \n  end \n  30: begin \n  Y2 = 1'b0; \n  end \n  31: begin \n  Y2 = 1'b1; \n  end \n  32: begin \n  Y2 = 1'b0; \n  end \n  33: begin \n  Y2 = 1'b1; \n  end \n  34: begin \n  Y2 = 1'b0; \n  end \n  35: begin \n  Y2 = 1'b1; \n  end \n  36: begin \n  Y2 = 1'b0; \n  end \n  37: begin \n  Y2 = 1'b1; \n "}
{"task_id": "ringer", "completion": "\n\tassign ringer = (ring == 1)? 1 : 0; \n  assign motor = (vibrate_mode == 1)? 1 : 0; \n endmodule"}
{"task_id": "alwaysblock1", "completion": "\n\tassign out_assign = a & b; \n  always @(*) begin \n  out_alwaysblock = 1'b0; \n  end \n endmodule"}
{"task_id": "zero", "completion": "\n\tassign zero = 1'b0; \n endmodule"}
{"task_id": "ece241_2014_q5a", "completion": "\n\tassign z = ~x; \n endmodule"}
{"task_id": "fsm3", "completion": "\n\treg [1:0] state; \n  always @(posedge clk) \n  begin \n  if (areset) \n  state = 2'b00; \n  else \n  state = state + 1'b1; \n  end \n  always @(state) \n  begin \n  case (state) \n  2'b00: \n  out = 1'b0; \n  2'b01: \n  out = 1'b1; \n  2'b10: \n  out = 1'b0; \n  2'b11: \n  out = 1'b1; \n  default: \n  out = 1'b0; \n  endcase \n  end \n endmodule"}
{"task_id": "vector2", "completion": "\n\tassign out = in; \n endmodule"}
{"task_id": "m2014_q4c", "completion": "\n\talways @(negedge clk or posedge r) \n  begin \n  if (r) \n  q <= 1'b0; \n  else \n  q <= d; \n  end \n endmodule"}
{"task_id": "mt2015_q4a", "completion": "\n\tassign z = (x^y) & x; \n endmodule"}
{"task_id": "ece241_2013_q8", "completion": "\n\talways @(posedge clk or negedge aresetn) begin \n  if (!aresetn) begin \n  z <= 1'b0; \n  end else begin \n  if (x == 'b101) begin \n  z <= 1'b1; \n  end \n  end \n  end \n endmodule"}
{"task_id": "m2014_q6", "completion": "\n\tassign z = w; \n  always @(posedge clk or negedge reset) \n  if (!reset) \n  z <= 0; \n  else \n  z <= 1; \n endmodule"}
{"task_id": "2012_q2b", "completion": "\n\tassign Y1 = y[1]; \n  assign Y3 = y[3]; \n endmodule"}
{"task_id": "vector0", "completion": "\n\tassign outv[0] = vec[0]; \n  assign outv[1] = vec[1]; \n  assign outv[2] = vec[2]; \n  assign outv[3] = vec[3]; \n  assign outv[4] = vec[4]; \n  assign outv[5] = vec[5]; \n  assign outv[6] = vec[6]; \n  assign outv[7] = vec[7]; \n  assign outv[8] = vec[8]; \n  assign outv[9] = vec[9]; \n  assign outv[10] = vec[10]; \n  assign outv[11] = vec[11]; \n  assign outv[12] = vec[12]; \n  assign outv[13] = vec[13]; \n  assign outv[14] = vec[14]; \n  assign outv[15] = vec[15]; \n  assign outv[16] = vec[16]; \n  assign outv[17] = vec[17]; \n  assign outv[18] = vec[18]; \n  assign outv[19] = vec[19]; \n  assign outv[20] = vec[20]; \n  assign outv[21] = vec[21]; \n  assign outv[22] = vec[22]; \n  assign outv[23] = vec[23]; \n  assign outv[24] = vec[24]; \n  assign outv[25] = vec[25]; \n  assign outv[26] = vec[26]; \n  assign outv[27] = vec[27]; \n  assign outv[28] = vec[28]; \n  assign outv[29] = vec[29]; \n  assign outv[30] = vec[30]; \n  assign outv[31] = vec[31]; \n  assign outv[32] = vec[32]; \n  assign outv[33] = vec[33]; \n  assign outv[34] = vec[34]; \n  assign outv[35] = vec[35]; \n  assign outv[36] = vec[36]; \n  assign outv[37] = vec[37]; \n  assign outv[38] = vec[38]; \n  assign outv[39] = vec[39]; \n  assign outv[40] = vec[40]; \n  assign outv[41] = vec[41]; \n  assign outv[42] = vec[42]; \n  assign outv[43] = vec[43]; \n  assign outv[44] = vec[44]; \n  assign outv[45] = vec[45]; \n  assign outv[46] = vec[46]; \n  assign outv[47] = vec[47]; \n  assign outv[48] = vec[48]; \n  assign outv[49] = vec[49]; \n  assign outv[50] = vec[50]; \n  assign outv[51] = vec[51]; \n  assign outv[52] = vec[52]; \n  assign outv[53] = vec[53]; \n  assign outv[54] = vec[54]; \n  assign outv[55] = vec[55]; \n  assign outv[56] = vec[56]; \n  assign outv[57] = vec[57]; \n  assign outv[58] = vec[58]; \n  assign outv[59] = vec[59]; \n  assign outv[60] = vec[60]; \n  assign outv[61] = vec[61]; \n  assign outv[62] = vec[62]; \n  assign outv[63] = vec[63]; \n  assign outv[64] = vec[64]; \n  assign outv[65] = vec[65]; \n  assign outv[66] = vec[66]; \n  assign out"}
{"task_id": "kmap4", "completion": "\n\tassign out = (a & b) | (b & c) | (c & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a"}
{"task_id": "vector1", "completion": "\n\tassign out_hi = in[7:0]; \n  assign out_lo = in[15:8]; \n endmodule"}
{"task_id": "norgate", "completion": "\n\tassign out = ~a & ~b; \n endmodule"}
{"task_id": "alwaysblock2", "completion": "\n\tassign out_assign = a ^ b; \n  always @(posedge clk) \n  out_always_ff <= ~out_always_ff; \n  always @(posedge clk) \n  out_always_comb <= ~out_always_comb; \n endmodule"}
{"task_id": "m2014_q6c", "completion": "\n\tassign Y2 = 1'b0; \n  assign Y4 = 1'b0; \n  assign Y2 = 1'b0; \n  assign Y4 = 1'b0; \n  assign Y2 = 1'b0; \n  assign Y4 = 1'b0; \n  assign Y2 = 1'b0; \n  assign Y4 = 1'b0; \n  assign Y2 = 1'b0; \n  assign Y4 = 1'b0; \n  assign Y2 = 1'b0; \n  assign Y4 = 1'b0; \n  assign Y2 = 1'b0; \n  assign Y4 = 1'b0; \n  assign Y2 = 1'b0; \n  assign Y4 = 1'b0; \n  assign Y2 = 1'b0; \n  assign Y4 = 1'b0; \n  assign Y2 = 1'b0; \n  assign Y4 = 1'b0; \n  assign Y2 = 1'b0; \n  assign Y4 = 1'b0; \n  assign Y2 = 1'b0; \n  assign Y4 = 1'b0; \n  assign Y2 = 1'b0; \n  assign Y4 = 1'b0; \n  assign Y2 = 1'b0; \n  assign Y4 = 1'b0; \n  assign Y2 = 1'b0; \n  assign Y4 = 1'b0; \n  assign Y2 = 1'b0; \n  assign Y4 = 1'b0; \n  assign Y2 = 1'b0; \n  assign Y4 = 1'b0; \n  assign Y2 = 1'b0; \n  assign Y4 = 1'b0; \n  assign Y2 = 1'b0; \n  assign Y4 = 1'b0; \n  assign Y2 = 1'b0; \n  assign Y4 = 1'b0; \n  assign Y2 = 1'b0; \n  assign Y4 = 1'b0; \n  assign Y2 = 1'b0; \n  assign Y4 = 1'b0; \n  assign Y2 = 1'b0; \n  assign Y4 = 1'b0; \n  assign Y2 = 1'b0; \n  assign Y4 = 1'b0; \n  assign Y2 = 1'b0; \n  assign Y4 = 1'b0; \n  assign Y2 = 1'b0; \n  assign Y4 = 1'b0; \n  assign Y2 = 1'b0; \n  assign Y4 = 1'b0; \n  assign Y2 = 1'b0; \n  assign Y4 = 1'b0; \n  assign Y2 = 1'b0; \n  assign Y4 = 1'b0; \n  assign Y2 = 1'b0; \n  assign Y4 = 1'b0; \n  assign Y2 = 1'b0; \n  assign Y4 = 1'b0; \n  assign Y2 = 1'b0; \n  assign Y4 = 1'b0; \n  assign Y"}
{"task_id": "mux256to1", "completion": "\n\tassign out = (sel==0)? in[0] : \n  (sel==1)? in[1] : \n  (sel==2)? in[2] : \n  (sel==3)? in[3] : \n  (sel==4)? in[4] : \n  (sel==5)? in[5] : \n  (sel==6)? in[6] : \n  (sel==7)? in[7] : \n  (sel==8)? in[8] : \n  (sel==9)? in[9] : \n  (sel==10)? in[10] : \n  (sel==11)? in[11] : \n  (sel==12)? in[12] : \n  (sel==13)? in[13] : \n  (sel==14)? in[14] : \n  (sel==15)? in[15] : \n  (sel==16)? in[16] : \n  (sel==17)? in[17] : \n  (sel==18)? in[18] : \n  (sel==19)? in[19] : \n  (sel==20)? in[20] : \n  (sel==21)? in[21] : \n  (sel==22)? in[22] : \n  (sel==23)? in[23] : \n  (sel==24)? in[24] : \n  (sel==25)? in[25] : \n  (sel==26)? in[26] : \n  (sel==27)? in[27] : \n  (sel==28)? in[28] : \n  (sel==29)? in[29] : \n  (sel==30)? in[30] : \n  (sel==31)? in[31] : \n  (sel==32)? in[32] : \n  (sel==33)? in[33] : \n  (sel==34)? in[34] : \n  (sel==35)? in[35] : \n  (sel==36)? in[36] : \n  (sel==37)? in[37] : \n  (sel==38)? in[38] : \n  (sel==39)? in[39] : \n  (sel==40)? in[40] : \n  (sel==41)? in[41] : \n  (sel==42)? in[42] : \n  (sel==43)? in[43] : \n  (sel==44)? in[44] : \n  (sel==45)? in[45] : \n  (sel==46)? in[46] : \n  (sel==47)? in[47] : \n  (sel==48)? in[48] : \n  (sel==49)? in[49] : \n  (sel==50)? in[50] : \n  (sel==51)? in[51] : \n  (sel==52)? in[52] : \n  (sel==53)? in[53] : \n  (sel==54)? in[54] : \n  (sel==55)? in[55] : \n  (sel==56)? in[56] : \n  (sel==57)? in[57] : \n  (sel==58)? in[58] : \n  (sel==59)? in[59] : \n  (sel==60)? in[60] : \n  (sel==61)? in[61] : \n  (sel==62)? in[62] : \n  (sel==63)? in[63] : \n  (sel==64)? in[64] : \n  (sel==65)? in[65] : \n  (sel==66)? in[66] : \n "}
{"task_id": "2014_q4a", "completion": "\n\talways @(posedge clk) \n  if (E) \n  Q <= R; \n endmodule"}
{"task_id": "ece241_2014_q4", "completion": "\n\twire a = x ^ ~x; \n  wire b = ~x; \n  wire c = ~x; \n  wire d = ~x; \n  wire e = ~x; \n  wire f = ~x; \n  wire g = ~x; \n  wire h = ~x; \n  wire i = ~x; \n  wire j = ~x; \n  wire k = ~x; \n  wire l = ~x; \n  wire m = ~x; \n  wire n = ~x; \n  wire o = ~x; \n  wire p = ~x; \n  wire q = ~x; \n  wire r = ~x; \n  wire s = ~x; \n  wire t = ~x; \n  wire u = ~x; \n  wire v = ~x; \n  wire w = ~x; \n  wire x = ~x; \n  wire y = ~x; \n  wire z = ~x; \n  assign z = (a & b) | (c & d) | (e & f) | (g & h) | (i & j) | (k & l) | (m & n) | (o & p) | (q & r) | (s & t) | (u & v) | (w & x) | (y & z); \n endmodule"}
{"task_id": "fsm3s", "completion": "\n\twire [1:0] state; \n  always @(posedge clk or negedge reset) \n  if (!reset) \n  state <= 2'b00; \n  else \n  case (state) \n  2'b00: begin \n  state <= 2'b01; \n  end \n  2'b01: begin \n  state <= 2'b10; \n  end \n  2'b10: begin \n  state <= 2'b11; \n  end \n  2'b11: begin \n  state <= 2'b00; \n  end \n  2'b00: begin \n  state <= 2'b01; \n  end \n  2'b01: begin \n  state <= 2'b10; \n  end \n  2'b10: begin \n  state <= 2'b11; \n  end \n  2'b11: begin \n  state <= 2'b00; \n  end \n  2'b00: begin \n  state <= 2'b01; \n  end \n  2'b01: begin \n  state <= 2'b10; \n  end \n  2'b10: begin \n  state <= 2'b11; \n  end \n  2'b11: begin \n  state <= 2'b00; \n  end \n  2'b00: begin \n  state <= 2'b01; \n  end \n  2'b01: begin \n  state <= 2'b10; \n  end \n  2'b10: begin \n  state <= 2'b11; \n  end \n  2'b11: begin \n  state <= 2'b00; \n  end \n  2'b00: begin \n  state <= 2'b01; \n  end \n  2'b01: begin \n  state <= 2'b10; \n  end \n  2'b10: begin \n  state <= 2'b11; \n  end \n  2'b11: begin \n  state <= 2'b00; \n  end \n  2'b00: begin \n  state <= 2'b01; \n  end \n  2'b01: begin \n  state <= 2'b10; \n  end \n  2'b10: begin \n  state <= 2'b11; \n  end \n  2'b11: begin \n  state <= 2'b00; \n  end \n  2'b00: begin \n  state <= 2'b01; \n  end \n  2'b01: begin \n  state <= 2'b10; \n  end \n  2'b10: begin \n  state <= 2'b11; \n  end \n  2'b11: begin \n  state <= 2'b00; \n  end \n  2'b00: begin \n  state <= 2'b01; \n  end \n  2'b01: begin \n  state <= 2'b10; \n  end \n  2'b10: begin \n  state <= 2'b11; \n  end \n  2'b11: begin \n  state <= 2'b00; \n  end \n  2'b00: begin \n  state <= 2'b01; \n  end \n  2'b01: begin \n  state <= 2'b10; \n  end \n  2'b10: begin \n  state <= 2'b11; \n  end \n  2'b11: begin \n  state <= 2'b00; \n  end \n  2'b00: begin \n  state <= 2'b01; \n  end \n  2'b01: begin \n  state <= 2'b10; \n  end \n  2'b10: begin \n  state <= 2'b11; \n  end \n  2'b11: begin \n  state <= 2'b00; \n "}
{"task_id": "bugs_mux2", "completion": "\n\tassign out = (~sel & a) | (sel & b); \n endmodule"}
{"task_id": "mt2015_muxdff", "completion": "\n\twire [2:0] q_in; \n  wire [2:0] r_in; \n  wire [2:0] Q; \n  assign q_in = r_in; \n  assign r_in = {r_in[1] ^ r_in[2], r_in[0], r_in[2]}; \n  assign Q = {Q[1] ^ Q[2], Q[0], Q[2]}; \n  assign Q = {Q[1] ^ Q[2], Q[0], Q[2]}; \n  assign Q = {Q[1] ^ Q[2], Q[0], Q[2]}; \n  assign Q = {Q[1] ^ Q[2], Q[0], Q[2]}; \n  assign Q = {Q[1] ^ Q[2], Q[0], Q[2]}; \n  assign Q = {Q[1] ^ Q[2], Q[0], Q[2]}; \n  assign Q = {Q[1] ^ Q[2], Q[0], Q[2]}; \n  assign Q = {Q[1] ^ Q[2], Q[0], Q[2]}; \n  assign Q = {Q[1] ^ Q[2], Q[0], Q[2]}; \n  assign Q = {Q[1] ^ Q[2], Q[0], Q[2]}; \n  assign Q = {Q[1] ^ Q[2], Q[0], Q[2]}; \n  assign Q = {Q[1] ^ Q[2], Q[0], Q[2]}; \n  assign Q = {Q[1] ^ Q[2], Q[0], Q[2]}; \n  assign Q = {Q[1] ^ Q[2], Q[0], Q[2]}; \n  assign Q = {Q[1] ^ Q[2], Q[0], Q[2]}; \n  assign Q = {Q[1] ^ Q[2], Q[0], Q[2]}; \n  assign Q = {Q[1] ^ Q[2], Q[0], Q[2]}; \n  assign Q = {Q[1] ^ Q[2], Q[0], Q[2]}; \n  assign Q = {Q[1] ^ Q[2], Q[0], Q[2]}; \n  assign Q = {Q[1] ^ Q[2], Q[0], Q[2]}; \n  assign Q = {Q[1] ^ Q[2], Q[0], Q[2]}; \n  assign Q = {Q[1] ^ Q[2], Q[0], Q[2]}; \n  assign Q = {Q[1] ^ Q[2], Q[0], Q[2]}; \n  assign Q = {Q[1] ^ Q[2], Q[0], Q[2]}; \n  assign Q = {Q[1] ^ Q[2], Q[0], Q[2]}; \n  assign Q = {Q[1] ^ Q[2], Q[0], Q[2]}; \n  assign Q = {Q[1] ^ Q[2], Q[0], Q[2]}; \n  assign Q = {Q[1] ^ Q[2], Q[0], Q[2]}; \n  assign Q = {Q[1] ^ Q[2], Q[0], Q[2]}; \n  assign Q = {Q[1] ^ Q[2], Q[0],"}
{"task_id": "edgecapture", "completion": "\n\talways @(posedge clk or negedge reset) \n  if (!reset) \n  out <= 32'd0; \n  else if (in[31] == 1'b1) \n  out <= out + 32'd1; \n endmodule"}
{"task_id": "dff8", "completion": "\n\talways @(posedge clk) \n  q <= d; \n endmodule"}
{"task_id": "ece241_2014_q1c", "completion": "\n\tassign s[7:0] = a[7:0] + b[7:0]; \n  wire signed overflow = (a[7:0] > b[7:0]); \n endmodule"}
{"task_id": "counter_2bc", "completion": "\n\tlogic [1:0] state; \n  always @(posedge clk or negedge areset) \n  if (!areset) \n  state <= 2'b01; \n  else if (train_valid && train_taken) \n  state <= 2'b11; \n  else if (!train_valid &&!train_taken) \n  state <= 2'b00; \n endmodule"}
{"task_id": "always_casez", "completion": "\n\talways @* \n  begin \n  if (in == 8'b00000000) \n  pos = 3'd0; \n  else if (in == 8'b10000000) \n  pos = 3'd1; \n  else if (in == 8'b10000001) \n  pos = 3'd2; \n  else if (in == 8'b10000010) \n  pos = 3'd3; \n  else if (in == 8'b10000011) \n  pos = 3'd4; \n  else if (in == 8'b10000100) \n  pos = 3'd5; \n  else if (in == 8'b10000101) \n  pos = 3'd6; \n  else if (in == 8'b10000110) \n  pos = 3'd7; \n  else if (in == 8'b10000111) \n  pos = 3'd8; \n  else if (in == 8'b10001000) \n  pos = 3'd9; \n  else if (in == 8'b10001001) \n  pos = 3'd10; \n  else if (in == 8'b10001010) \n  pos = 3'd11; \n  else if (in == 8'b10001011) \n  pos = 3'd12; \n  else if (in == 8'b10001100) \n  pos = 3'd13; \n  else if (in == 8'b10001101) \n  pos = 3'd14; \n  else if (in == 8'b10001110) \n  pos = 3'd15; \n  else if (in == 8'b10001111) \n  pos = 3'd16; \n  else if (in == 8'b10010000) \n  pos = 3'd17; \n  else if (in == 8'b10010001) \n  pos = 3'd18; \n  else if (in == 8'b10010010) \n  pos = 3'd19; \n  else if (in == 8'b10010011) \n  pos = 3'd20; \n  else if (in == 8'b10100000) \n  pos = 3'd21; \n  else if (in == 8'b10100001) \n  pos = 3'd22; \n  else if (in == 8'b10100010) \n  pos = 3'd23; \n  else if (in == 8'b10100011) \n  pos = 3'd24; \n  else if (in == 8'b10100100) \n  pos = 3'd25; \n  else if (in == 8'b10100101) \n  pos = 3'd26; \n  else if (in == 8'b10100110) \n  pos = 3'd27; \n  else if (in == 8'b10100111) \n  pos = 3'd28; \n  else if (in == 8'b10101000) \n  pos = 3'd29; \n  else if (in == 8'b10101001) \n  pos = 3'd30; \n  else if (in == 8'b10101010) \n  pos = 3'd31; \n  else if (in == 8'b10101011) \n  pos = 3'd32; \n  else if (in == 8'b10101100) \n  pos = 3'd33; \n  else if (in == 8'b10101101) \n  pos = 3'd34; \n  else if (in == 8'b10101110) \n  pos = 3'd35; \n  else if (in == 8'b10101111) \n  pos = 3'd36; \n "}
{"task_id": "m2014_q4j", "completion": "\n\tassign sum[0] = x[3] ^ y[3]; \n  assign sum[1] = x[2] ^ y[2]; \n  assign sum[2] = x[1] ^ y[1]; \n  assign sum[3] = x[0] ^ y[0]; \n endmodule"}
{"task_id": "dff", "completion": "\n\talways @ (posedge clk) \n  q <= d; \n endmodule"}
{"task_id": "ece241_2013_q2", "completion": "\n\tassign out_sop = 1'b0; \n  assign out_pos = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0; \n  assign out_sop = 1'b0;"}
{"task_id": "lfsr32", "completion": "\n\talways @(posedge clk or negedge reset) \n  if (!reset) \n  q <= 32'h1; \n  else \n  q <= {q[31], q[30] ^ q[29] ^ q[28] ^ q[27] ^ q[26] ^ q[25] ^ q[24] ^ q[23] ^ q[22] ^ q[21] ^ q[20] ^ q[19] ^ q[18] ^ q[17] ^ q[16] ^ q[15] ^ q[14] ^ q[13] ^ q[12] ^ q[11] ^ q[10] ^ q[9] ^ q[8] ^ q[7] ^ q[6] ^ q[5] ^ q[4] ^ q[3] ^ q[2] ^ q[1] ^ q[0]}; \n endmodule"}
{"task_id": "7420", "completion": "\n\tassign p1y = p2y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n  assign p2y = p1y; \n "}
{"task_id": "popcount255", "completion": "\n\tassign out = (in == 255'b11111111111111111111111111111111)? 8'h00 : \n  (in == 255'b11111111111111111111111111111110)? 8'h01 : \n  (in == 255'b11111111111111111111111111111111)? 8'h02 : \n  (in == 255'b11111111111111111111111111111110)? 8'h03 : \n  (in == 255'b11111111111111111111111111111111)? 8'h04 : \n  (in == 255'b11111111111111111111111111111110)? 8'h05 : \n  (in == 255'b11111111111111111111111111111111)? 8'h06 : \n  (in == 255'b11111111111111111111111111111110)? 8'h07 : \n  (in == 255'b11111111111111111111111111111111)? 8'h08 : \n  (in == 255'b11111111111111111111111111111110)? 8'h09 : \n  (in == 255'b11111111111111111111111111111111)? 8'h0a : \n  (in == 255'b11111111111111111111111111111110)? 8'h0b : \n  (in == 255'b11111111111111111111111111111111)? 8'h0c : \n  (in == 255'b11111111111111111111111111111110)? 8'h0d : \n  (in == 255'b11111111111111111111111111111111)? 8'h0e : \n  (in == 255'b11111111111111111111111111111110)? 8'h0f : \n  (in == 255'b11111111111111111111111111111111)? 8'h10 : \n  (in == 255'b11111111111111111111111111111110)? 8'h11 : \n  (in == 255'b11111111111111111111111111111111)? 8'h12 : \n  (in == 255'b11111111111111111111111111111110)? 8'h13 : \n  (in == 255'b11111111111111111111111111111111)? 8'h14 : \n  (in == 255'b11111111111111111111111111111110)? 8'h15 : \n  (in == 255'b11111111111111111111111111111111)? 8'h16 : \n  (in == 255'b11111111111111111111111111111110)? 8'h17 : \n  (in == 255'b11111111111111111111111111111111)? 8'h18 : \n  (in == 255'b11111111111111111111111111111110)? 8'h19 : \n  (in == 255'b11111111111111111111111111111111)? 8'h1a : \n  (in == 255'b11111111111111111111111111111110)? 8'h1b : \n  (in == 255'b11111111111111111111111111111111)? 8'h1c : \n  (in == 255'b11111111111111111111111111111110)? 8'h1d : \n  (in == 255'b11111111111111111111111111111111)? 8'h1e : \n  (in == 255'b11111111111111111111111111111110)? 8'h1f : \n  (in == 255'b11111111111111111111111111111111)? 8'h20 : \n  (in == 255'b11111111111111111111111111111110)? 8'h21 : \n  (in == 255'b111"}
{"task_id": "countslow", "completion": "\n\talways @(posedge clk or negedge reset) \n  if (!reset) \n  q <= 0; \n  else if (slowena) \n  q <= q + 1; \n endmodule"}
{"task_id": "m2014_q4f", "completion": "\n\twire w0; \n  wire w1; \n  wire w2; \n  wire w3; \n  wire w4; \n  wire w5; \n  wire w6; \n  wire w7; \n  wire w8; \n  wire w9; \n  wire w10; \n  wire w11; \n  wire w12; \n  wire w13; \n  wire w14; \n  wire w15; \n  wire w16; \n  wire w17; \n  wire w18; \n  wire w19; \n  wire w20; \n  wire w21; \n  wire w22; \n  wire w23; \n  wire w24; \n  wire w25; \n  wire w26; \n  wire w27; \n  wire w28; \n  wire w29; \n  wire w30; \n  wire w31; \n  wire w32; \n  wire w33; \n  wire w34; \n  wire w35; \n  wire w36; \n  wire w37; \n  wire w38; \n  wire w39; \n  wire w40; \n  wire w41; \n  wire w42; \n  wire w43; \n  wire w44; \n  wire w45; \n  wire w46; \n  wire w47; \n  wire w48; \n  wire w49; \n  wire w50; \n  wire w51; \n  wire w52; \n  wire w53; \n  wire w54; \n  wire w55; \n  wire w56; \n  wire w57; \n  wire w58; \n  wire w59; \n  wire w60; \n  wire w61; \n  wire w62; \n  wire w63; \n  wire w64; \n  wire w65; \n  wire w66; \n  wire w67; \n  wire w68; \n  wire w69; \n  wire w70; \n  wire w71; \n  wire w72; \n  wire w73; \n  wire w74; \n  wire w75; \n  wire w76; \n  wire w77; \n  wire w78; \n  wire w79; \n  wire w80; \n  wire w81; \n  wire w82; \n  wire w83; \n  wire w84; \n  wire w85; \n  wire w86; \n  wire w87; \n  wire w88; \n  wire w89; \n  wire w90; \n  wire w91; \n  wire w92; \n  wire w93; \n  wire w94; \n  wire w95; \n  wire w96; \n  wire w97; \n  wire w98; \n  wire w99; \n  wire w100; \n  wire w101; \n  wire w102; \n  wire w103; \n  wire w104; \n  wire w105; \n  wire w106; \n  wire w107; \n  wire w108; \n  wire w109; \n  wire w110; \n  wire w111; \n  wire w112; \n  wire w113; \n  wire w114; \n  wire w115; \n  wire w116; \n  wire w117; \n  wire w118; \n  wire w119; \n  wire w120; \n  wire w121; \n  wire w122; \n  wire w123; \n  wire w124; \n  wire w125; \n  wire w126; \n  wire w127; \n  wire w128; \n  wire w129; \n  wire w130; \n  wire w131; \n  wire w132; \n  wire w133; \n  wire w134; \n  wire w135; \n  wire w136; \n  wire w137; \n  wire w138; \n  wire w139; \n  wire w140; \n  wire w141; \n  wire w142; \n  wire w143; \n  wire w144; \n  wire w145; \n  wire w146; \n  wire w147; \n  wire w148; \n "}
{"task_id": "m2014_q4h", "completion": "\n\tassign out = in; \n endmodule"}
{"task_id": "fsm1", "completion": "\n\twire [1:0] b; \n  wire [1:0] a; \n  wire [1:0] b2; \n  wire [1:0] a2; \n  wire [1:0] b3; \n  wire [1:0] a3; \n  wire [1:0] b4; \n  wire [1:0] a4; \n  wire [1:0] b5; \n  wire [1:0] a5; \n  wire [1:0] b6; \n  wire [1:0] a6; \n  wire [1:0] b7; \n  wire [1:0] a7; \n  wire [1:0] b8; \n  wire [1:0] a8; \n  wire [1:0] b9; \n  wire [1:0] a9; \n  wire [1:0] b10; \n  wire [1:0] a10; \n  wire [1:0] b11; \n  wire [1:0] a11; \n  wire [1:0] b12; \n  wire [1:0] a12; \n  wire [1:0] b13; \n  wire [1:0] a13; \n  wire [1:0] b14; \n  wire [1:0] a14; \n  wire [1:0] b15; \n  wire [1:0] a15; \n  wire [1:0] b16; \n  wire [1:0] a16; \n  wire [1:0] b17; \n  wire [1:0] a17; \n  wire [1:0] b18; \n  wire [1:0] a18; \n  wire [1:0] b19; \n  wire [1:0] a19; \n  wire [1:0] b20; \n  wire [1:0] a20; \n  wire [1:0] b21; \n  wire [1:0] a21; \n  wire [1:0] b22; \n  wire [1:0] a22; \n  wire [1:0] b23; \n  wire [1:0] a23; \n  wire [1:0] b24; \n  wire [1:0] a24; \n  wire [1:0] b25; \n  wire [1:0] a25; \n  wire [1:0] b26; \n  wire [1:0] a26; \n  wire [1:0] b27; \n  wire [1:0] a27; \n  wire [1:0] b28; \n  wire [1:0] a28; \n  wire [1:0] b29; \n  wire [1:0] a29; \n  wire [1:0] b30; \n  wire [1:0] a30; \n  wire [1:0] b31; \n  wire [1:0] a31; \n  wire [1:0] b32; \n  wire [1:0] a32; \n  wire [1:0] b33; \n  wire [1:0] a33; \n  wire [1:0] b34; \n  wire [1:0] a34; \n  wire [1:0] b35; \n  wire [1:0] a35; \n  wire [1:0] b36; \n  wire [1:0] a36; \n  wire [1:0] b37; \n  wire [1:0] a37; \n  wire [1:0] b38; \n  wire [1:0] a38; \n  wire [1:0] b39; \n  wire [1:0] a39; \n  wire [1:0] b40; \n  wire ["}
{"task_id": "dualedge", "completion": "\n\talways @(posedge clk or negedge clk) \n  begin \n  if (negedge clk) \n  q <= 1'b0; \n  else \n  q <= d; \n  end \n endmodule"}
{"task_id": "xnorgate", "completion": "\n\tassign out = a ^ b; \n endmodule"}
{"task_id": "review2015_count1k", "completion": "\n\talways @ (posedge clk) begin \n  if (reset) begin \n  q <= 0; \n  end else begin \n  q <= q + 1; \n  end \n  end \n endmodule"}
{"task_id": "notgate", "completion": "\n\tassign out = ~in; \n endmodule"}
{"task_id": "ece241_2013_q7", "completion": "\n\talways @(posedge clk) begin \n  if (j == 0) begin \n  Qold <= 1'b0; \n  end else if (k == 0) begin \n  Qold <= 1'b1; \n  end else if (k == 1) begin \n  Qold <= ~1'b1; \n  end else begin \n  Qold <= 1'b0; \n  end \n  end \n endmodule"}
{"task_id": "popcount3", "completion": "\n\tassign out[0] = (in[0] == 1'b1)? 1'b1 : 1'b0; \n  assign out[1] = (in[1] == 1'b1)? 1'b1 : 1'b0; \n  assign out[2] = (in[2] == 1'b1)? 1'b1 : 1'b0; \n endmodule"}
{"task_id": "vector5", "completion": "\n\tassign out[24] = ~a ^ a; \n  assign out[23] = ~a ^ b; \n  assign out[22] = ~a ^ c; \n  assign out[21] = ~a ^ d; \n  assign out[20] = ~a ^ e; \n  assign out[19] = ~b ^ a; \n  assign out[18] = ~b ^ b; \n  assign out[17] = ~b ^ c; \n  assign out[16] = ~b ^ d; \n  assign out[15] = ~b ^ e; \n  assign out[14] = ~c ^ a; \n  assign out[13] = ~c ^ b; \n  assign out[12] = ~c ^ c; \n  assign out[11] = ~c ^ d; \n  assign out[10] = ~c ^ e; \n  assign out[9] = ~d ^ a; \n  assign out[8] = ~d ^ b; \n  assign out[7] = ~d ^ c; \n  assign out[6] = ~d ^ d; \n  assign out[5] = ~d ^ e; \n  assign out[4] = ~e ^ a; \n  assign out[3] = ~e ^ b; \n  assign out[2] = ~e ^ c; \n  assign out[1] = ~e ^ d; \n  assign out[0] = ~e ^ e; \n endmodule"}
{"task_id": "2014_q3c", "completion": "\n\talways @(*) \n  begin \n  case (y) \n  2'b00: Y0 = 1'b0; \n  2'b01: Y0 = 1'b1; \n  2'b10: Y0 = 1'b0; \n  2'b11: Y0 = 1'b1; \n  endcase \n  case (x) \n  2'b00: Y0 = 1'b0; \n  2'b01: Y0 = 1'b1; \n  2'b10: Y0 = 1'b0; \n  2'b11: Y0 = 1'b1; \n  endcase \n  case (x) \n  2'b00: Y0 = 1'b0; \n  2'b01: Y0 = 1'b1; \n  2'b10: Y0 = 1'b0; \n  2'b11: Y0 = 1'b1; \n  endcase \n  case (x) \n  2'b00: Y0 = 1'b0; \n  2'b01: Y0 = 1'b1; \n  2'b10: Y0 = 1'b0; \n  2'b11: Y0 = 1'b1; \n  endcase \n  case (x) \n  2'b00: Y0 = 1'b0; \n  2'b01: Y0 = 1'b1; \n  2'b10: Y0 = 1'b0; \n  2'b11: Y0 = 1'b1; \n  endcase \n  case (x) \n  2'b00: Y0 = 1'b0; \n  2'b01: Y0 = 1'b1; \n  2'b10: Y0 = 1'b0; \n  2'b11: Y0 = 1'b1; \n  endcase \n  case (x) \n  2'b00: Y0 = 1'b0; \n  2'b01: Y0 = 1'b1; \n  2'b10: Y0 = 1'b0; \n  2'b11: Y0 = 1'b1; \n  endcase \n  case (x) \n  2'b00: Y0 = 1'b0; \n  2'b01: Y0 = 1'b1; \n  2'b10: Y0 = 1'b0; \n  2'b11: Y0 = 1'b1; \n  endcase \n  case (x) \n  2'b00: Y0 = 1'b0; \n  2'b01: Y0 = 1'b1; \n  2'b10: Y0 = 1'b0; \n  2'b11: Y0 = 1'b1; \n  endcase \n  case (x) \n  2'b00: Y0 = 1'b0; \n  2'b01: Y0 = 1'b1; \n  2'b10: Y0 = 1'b0; \n  2'b11: Y0 = 1'b1; \n  endcase \n  case (x) \n  2'b00: Y0 = 1'b0; \n  2'b01: Y0 = 1'b1; \n  2'b10: Y0 = 1'b0; \n  2'b11: Y0 = 1'b1; \n  endcase \n  case (x) \n  2'b00: Y0 = 1'b0; \n  2'b01: Y0 = 1"}
{"task_id": "m2014_q4e", "completion": "\n\tassign out = ~in1 & ~in2; \n endmodule"}
{"task_id": "wire4", "completion": "\n\tassign w = a; \n  assign x = b; \n  assign y = c; \n  assign z = d; \n endmodule"}
{"task_id": "m2014_q4b", "completion": "\n\tlogic q; \n  always @(posedge clk) \n  if (ar) \n  q <= 1'b0; \n  else \n  q <= d; \n endmodule"}
{"task_id": "always_case", "completion": "\n\talways @* \n  begin \n  case (sel) \n  0: out = data0; \n  1: out = data1; \n  2: out = data2; \n  3: out = data3; \n  4: out = data4; \n  5: out = data5; \n  endcase \n  end \n endmodule"}
{"task_id": "review2015_fsmseq", "completion": "\n\tassign start_shifting = 1; \n  always @(posedge clk) begin \n  if (reset) begin \n  start_shifting <= 0; \n  end else begin \n  if (data == 1101) begin \n  start_shifting <= 1; \n  end else begin \n  start_shifting <= 0; \n  end \n  end \n  end \n endmodule"}
{"task_id": "dff8r", "completion": "\n\talways @(posedge clk) begin \n  if (reset) begin \n  q <= 8'd0; \n  end else begin \n  q <= d; \n  end \n  end \n endmodule"}
{"task_id": "edgedetect2", "completion": "\n\talways @(posedge clk) begin \n  if (in[7] == 1'b0) begin \n  anyedge[7] = 1'b1; \n  anyedge[6] = 1'b1; \n  anyedge[5] = 1'b1; \n  anyedge[4] = 1'b1; \n  anyedge[3] = 1'b1; \n  anyedge[2] = 1'b1; \n  anyedge[1] = 1'b1; \n  anyedge[0] = 1'b1; \n  end \n  else begin \n  anyedge[7] = 1'b0; \n  anyedge[6] = 1'b0; \n  anyedge[5] = 1'b0; \n  anyedge[4] = 1'b0; \n  anyedge[3] = 1'b0; \n  anyedge[2] = 1'b0; \n  anyedge[1] = 1'b0; \n  anyedge[0] = 1'b0; \n  end \n  end \n endmodule"}
{"task_id": "count1to10", "completion": "\n\talways @ (posedge clk) begin \n  if (reset) begin \n  q <= 1'b0; \n  end \n  else begin \n  q <= q + 1'b1; \n  end \n  end \n endmodule"}
{"task_id": "lfsr5", "completion": "\n\talways @(posedge clk or negedge reset) \n  if (!reset) \n  q <= 5'b0; \n  else \n  q <= {q[4], q[3] ^ q[2] ^ q[1] ^ q[0]}; \n endmodule"}
{"task_id": "bugs_addsubz", "completion": "\n\talways @(*) begin \n  case (do_sub) \n  0: out = a+b; \n  1: out = a-b; \n  endcase \n  if (~out) \n  result_is_zero = 1; \n  end \n endmodule"}
{"task_id": "m2014_q3", "completion": "\n\tassign f = x[1] | x[2] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3] | x[4] | x[3"}
{"task_id": "bugs_case", "completion": "\n\talways @(code) \n  begin \n  if(code == 8'h45) \n  begin \n  out = 4'b0000; \n  valid = 1'b1; \n  end \n  else if(code == 8'h16) \n  begin \n  out = 4'b0001; \n  valid = 1'b1; \n  end \n  else if(code == 8'h1e) \n  begin \n  out = 4'b0010; \n  valid = 1'b1; \n  end \n  else if(code == 8'h26) \n  begin \n  out = 4'b0011; \n  valid = 1'b1; \n  end \n  else if(code == 8'h25) \n  begin \n  out = 4'b0100; \n  valid = 1'b1; \n  end \n  else if(code == 8'h2e) \n  begin \n  out = 4'b0101; \n  valid = 1'b1; \n  end \n  else if(code == 8'h36) \n  begin \n  out = 4'b0110; \n  valid = 1'b1; \n  end \n  else if(code == 8'h3d) \n  begin \n  out = 4'b0111; \n  valid = 1'b1; \n  end \n  else if(code == 8'h3e) \n  begin \n  out = 4'b1000; \n  valid = 1'b1; \n  end \n  else if(code == 8'h46) \n  begin \n  out = 4'b1001; \n  valid = 1'b1; \n  end \n  else \n  begin \n  out = 4'b1111; \n  valid = 1'b0; \n  end \n  end \n endmodule"}
{"task_id": "vectorr", "completion": "\n\tassign \n  out[7:4] = in[3:0]; \n  assign \n  out[3:2] = in[6:4]; \n  assign \n  out[2:1] = in[5:3]; \n  assign \n  out[1:0] = in[2:0]; \n endmodule"}
{"task_id": "kmap3", "completion": "\n\talways @* \n  begin \n  if (d == 1'b0) \n  out = 1'b1; \n  else \n  out = 1'b0; \n  end \n endmodule"}
{"task_id": "review2015_shiftcount", "completion": "\n\talways @(posedge clk) \n  if (shift_ena) \n  q <= {q[2:0], data}; \n  always @(posedge clk) \n  if (count_ena) \n  q <= q - 1; \n endmodule"}
{"task_id": "wire", "completion": "\n\tassign out = in; \n endmodule"}
{"task_id": "review2015_fsmshift", "completion": "\n\talways @(posedge clk or negedge reset) begin \n  if (!reset) begin \n  shift_ena = 1'b0; \n  end else begin \n  shift_ena = 1'b1; \n  end \n  end \n endmodule"}
{"task_id": "count15", "completion": "\n\talways @ (posedge clk) begin \n  if (reset) begin \n  q <= 0; \n  end else begin \n  q <= q + 1; \n  end \n  end \n endmodule"}
{"task_id": "always_if", "completion": "\n\tassign out_always = (sel_b1 && sel_b2)? b : a; \n  assign out_assign = (sel_b1 && sel_b2)? b : a; \n endmodule"}
{"task_id": "kmap1", "completion": "\n\tassign out = (a & b) | (a & c) | (b & c) | (a & b & c) | (a & b & c & c) | (a & b & c & c & c) | (a & b & c & c & c & c) | (a & b & c & c & c & c & c) | (a & b & c & c & c & c & c & c) | (a & b & c & c & c & c & c & c & c) | (a & b & c & c & c & c & c & c & c & c) | (a & b & c & c & c & c & c & c & c & c & c) | (a & b & c & c & c & c & c & c & c & c & c & c) | (a & b & c & c & c & c & c & c & c & c & c & c & c) | (a & b & c & c & c & c & c & c & c & c & c & c & c) | (a & b & c & c & c & c & c & c & c & c & c & c & c) | (a & b & c & c & c & c & c & c & c & c & c & c & c) | (a & b & c & c & c & c & c & c & c & c & c & c & c) | (a & b & c & c & c & c & c & c & c & c & c & c & c) | (a & b & c & c & c & c & c & c & c & c & c & c & c) | (a & b & c & c & c & c & c & c & c & c & c & c & c) | (a & b & c & c & c & c & c & c & c & c & c & c & c) | (a & b & c & c & c & c & c & c & c & c & c & c & c) | (a & b & c & c & c & c & c & c & c & c & c & c & c) | (a & b & c & c & c & c & c & c & c & c & c & c & c) | (a & b & c & c & c & c & c & c & c & c & c & c & c) | (a & b & c & c & c & c & c & c & c & c & c & c & c) | (a & b & c & c & c & c & c & c & c & c & c & c & c) | (a & b & c & c & c & c & c & c & c & c & c & c & c) | (a & b & c & c & c & c & c & c & c & c & c & c & c) | (a & b & c & c & c & c & c & c & c & c & c & c & c) | (a & b & c & c & c & c & c & c & c & c & c & c & c) | (a & b & c & c & c & c & c & c & c & c & c & c & c) | (a & b & c & c & c & c & c & c & c & c & c & c & c) | (a & b & c & c & c & c & c & c & c & c & c & c & c) | (a & b & c & c & c & c & c & c & c & c & c & c & c) | (a & b & c & c & c & c & c & c & c & c & c & c & c) | (a & b & c &"}
{"task_id": "count10", "completion": "\n\talways @ (posedge clk) begin \n  if (reset) begin \n  q <= 0; \n  end else begin \n  q <= q + 1; \n  end \n  end \n endmodule"}
{"task_id": "mux2to1", "completion": "\n\tassign out = (sel == 0)? a : b; \n endmodule"}
{"task_id": "gates4", "completion": "\n\tassign out_and = in[0] & in[1] & in[2] & in[3]; \n  assign out_or = in[0] | in[1] | in[2] | in[3]; \n  assign out_xor = in[0] ^ in[1] ^ in[2] ^ in[3]; \n endmodule"}
{"task_id": "2014_q3bfsm", "completion": "\n\twire [2:0] y; \n  wire [2:0] x; \n  assign y[2:0] = x; \n  assign z = y[2:0]; \n  always @(posedge clk or negedge reset) \n  begin \n  if (reset == 1'b1) \n  y[2:0] <= 3'b000; \n  else \n  y[2:0] <= y[2:0] + 1'b1; \n  end \n endmodule"}
{"task_id": "dff8p", "completion": "\n\talways @(negedge clk) begin \n  if (reset) begin \n  q <= 8'h34; \n  end else begin \n  q <= d; \n  end \n  end \n endmodule"}
{"task_id": "reduction", "completion": "\n\tassign parity = in[7] ^ in[6] ^ in[5] ^ in[4] ^ in[3] ^ in[2] ^ in[1] ^ in[0] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14] ^ in[15] ^ in[16] ^ in[17] ^ in[18] ^ in[19] ^ in[20] ^ in[21] ^ in[22] ^ in[23] ^ in[24] ^ in[25] ^ in[26] ^ in[27] ^ in[28] ^ in[29] ^ in[30] ^ in[31] ^ in[32] ^ in[33] ^ in[34] ^ in[35] ^ in[36] ^ in[37] ^ in[38] ^ in[39] ^ in[40] ^ in[41] ^ in[42] ^ in[43] ^ in[44] ^ in[45] ^ in[46] ^ in[47] ^ in[48] ^ in[49] ^ in[50] ^ in[51] ^ in[52] ^ in[53] ^ in[54] ^ in[55] ^ in[56] ^ in[57] ^ in[58] ^ in[59] ^ in[60] ^ in[61] ^ in[62] ^ in[63] ^ in[64] ^ in[65] ^ in[66] ^ in[67] ^ in[68] ^ in[69] ^ in[70] ^ in[71] ^ in[72] ^ in[73] ^ in[74] ^ in[75] ^ in[76] ^ in[77] ^ in[78] ^ in[79] ^ in[80] ^ in[81] ^ in[82] ^ in[83] ^ in[84] ^ in[85] ^ in[86] ^ in[87] ^ in[88] ^ in[89] ^ in[90] ^ in[91] ^ in[92] ^ in[93] ^ in[94] ^ in[95] ^ in[96] ^ in[97] ^ in[98] ^ in[99] ^ in[100] ^ in[101] ^ in[102] ^ in[103] ^ in[104] ^ in[105] ^ in[106] ^ in[107] ^ in[108] ^ in[109] ^ in[110] ^ in[111] ^ in[112] ^ in[113] ^ in[114] ^ in[115] ^ in[116] ^ in[117] ^ in[118] ^ in[119] ^ in[120] ^ in[121] ^ in[122] ^ in[123] ^ in[124] ^ in[125] ^ in[126] ^ in[127] ^ in[128] ^ in[129] ^ in[130] ^ in[131] ^ in[132] ^ in[133] ^ in[134] ^ in[135] ^ in[136] ^ in[137] ^ in[138] ^ in[139] ^ in[140] ^ in[141] ^ in[142] ^ in[143] ^ in[144] ^ in[145] ^ in[146] ^ in[147] ^ in[148] ^ in[149] ^ in[150] ^ in[151] ^ in[152] ^ in[153] ^ in[154] ^ in[155] ^ in[156] ^ in[157] ^ in[158] ^ in[159] ^ in[160] ^ in[161] ^ in[162] ^ in[163] ^ in[164] ^ in[165] ^ in[166] ^ in[167] ^ in[168] ^ in[169] ^ in[170] ^ in[171] ^ in[172] ^ in[173"}
{"task_id": "fsm3comb", "completion": "\n\talways \n  begin \n  case (state) \n  2'b00: next_state = 2'b00; \n  2'b01: next_state = 2'b01; \n  2'b10: next_state = 2'b10; \n  2'b11: next_state = 2'b11; \n  endcase \n  case (in) \n  2'b00: next_state = 2'b00; \n  2'b01: next_state = 2'b01; \n  2'b10: next_state = 2'b10; \n  2'b11: next_state = 2'b11; \n  endcase \n  case (state) \n  2'b00: out = 2'b00; \n  2'b01: out = 2'b01; \n  2'b10: out = 2'b10; \n  2'b11: out = 2'b11; \n  endcase \n  end \n endmodule"}
{"task_id": "2012_q2fsm", "completion": "\n\talways begin \n  z = 0; \n  end \n  always @* \n  begin \n  if (reset) \n  begin \n  z = 0; \n  end \n  else \n  begin \n  case (w) \n  0: z = 1; \n  1: z = 2; \n  2: z = 3; \n  3: z = 4; \n  4: z = 5; \n  5: z = 6; \n  6: z = 7; \n  7: z = 8; \n  8: z = 9; \n  9: z = 10; \n  10: z = 11; \n  11: z = 12; \n  12: z = 13; \n  13: z = 14; \n  14: z = 15; \n  15: z = 16; \n  16: z = 17; \n  17: z = 18; \n  18: z = 19; \n  19: z = 20; \n  20: z = 21; \n  21: z = 22; \n  22: z = 23; \n  23: z = 24; \n  24: z = 25; \n  25: z = 26; \n  26: z = 27; \n  27: z = 28; \n  28: z = 29; \n  29: z = 30; \n  30: z = 31; \n  31: z = 32; \n  32: z = 33; \n  33: z = 34; \n  34: z = 35; \n  35: z = 36; \n  36: z = 37; \n  37: z = 38; \n  38: z = 39; \n  39: z = 40; \n  40: z = 41; \n  41: z = 42; \n  42: z = 43; \n  43: z = 44; \n  44: z = 45; \n  45: z = 46; \n  46: z = 47; \n  47: z = 48; \n  48: z = 49; \n  49: z = 50; \n  50: z = 51; \n  51: z = 52; \n  52: z = 53; \n  53: z = 54; \n  54: z = 55; \n  55: z = 56; \n  56: z = 57; \n  57: z = 58; \n  58: z = 59; \n  59: z = 60; \n  60: z = 61; \n  61: z = 62; \n  62: z = 63; \n  63: z = 64; \n  64: z = 65; \n  65: z = 66; \n  66: z = 67; \n  67: z = 68; \n  68"}
{"task_id": "dff16e", "completion": "\n\talways @(posedge clk) begin \n  if (resetn) begin \n  q <= 16'b0; \n  end \n  else begin \n  if (byteena[1]) begin \n  q[15:8] <= d[15:8]; \n  end \n  if (byteena[0]) begin \n  q[7:0] <= d[7:0]; \n  end \n  end \n  end \n endmodule"}
{"task_id": "edgedetect", "completion": "\n\talways @(posedge clk) \n  if (in[7] == 1'b0 && in[6] == 1'b0 && in[5] == 1'b0 && in[4] == 1'b0 && in[3] == 1'b0 && in[2] == 1'b0 && in[1] == 1'b0 && in[0] == 1'b0) \n  pedge = 8'b11111111; \n  else if (in[7] == 1'b1 && in[6] == 1'b1 && in[5] == 1'b1 && in[4] == 1'b1 && in[3] == 1'b1 && in[2] == 1'b1 && in[1] == 1'b1 && in[0] == 1'b1) \n  pedge = 8'b00000000; \n endmodule"}
{"task_id": "mt2015_eq2", "completion": "\n\tassign z = (A == B)? 1 : 0; \n endmodule"}
{"task_id": "m2014_q4a", "completion": "\n\tassign q = d; \n endmodule"}
{"task_id": "mux256to1v", "completion": "\n\tassign out = (sel==0)? in[3:0] : \n  (sel==1)? in[7:4] : \n  (sel==2)? in[11:8] : \n  (sel==3)? in[15:12] : \n  (sel==4)? in[23:20] : \n  (sel==5)? in[31:28] : \n  (sel==6)? in[39:36] : \n  (sel==7)? in[47:44] : \n  (sel==8)? in[55:52] : \n  (sel==9)? in[63:60] : \n  (sel==10)? in[71:68] : \n  (sel==11)? in[79:76] : \n  (sel==12)? in[87:84] : \n  (sel==13)? in[95:92] : \n  (sel==14)? in[103:100] : \n  (sel==15)? in[111:108] : \n  (sel==16)? in[119:116] : \n  (sel==17)? in[127:124] : \n  (sel==18)? in[135:132] : \n  (sel==19)? in[143:140] : \n  (sel==20)? in[151:148] : \n  (sel==21)? in[159:156] : \n  (sel==22)? in[167:164] : \n  (sel==23)? in[175:172] : \n  (sel==24)? in[183:180] : \n  (sel==25)? in[191:188] : \n  (sel==26)? in[199:196] : \n  (sel==27)? in[207:204] : \n  (sel==28)? in[215:212] : \n  (sel==29)? in[223:220] : \n  (sel==30)? in[231:228] : \n  (sel==31)? in[239:236] : \n  (sel==32)? in[247:244] : \n  (sel==33)? in[255:252] : \n  (sel==34)? in[263:260] : \n  (sel==35)? in[271:268] : \n  (sel==36)? in[279:276] : \n  (sel==37)? in[287:284] : \n  (sel==38)? in[295:292] : \n  (sel==39)? in[303:300] : \n  (sel==40)? in[311:308] : \n  (sel==41)? in[319:316] : \n  (sel==42)? in[327:324] : \n  (sel==43)? in[335:332] : \n  (sel==44)? in[343:340] : \n  (sel==45)? in[351:348] : \n  (sel==46)? in[359:356] : \n  (sel==47)? in[367:364] : \n  (sel==48)? in[375:372] : \n  (sel==49)? in[383:380] : \n  (sel==50)? in[391:388] : \n  (sel==51)? in[399:396] : \n  (sel==52)? in[407:404] : \n  (sel==53)? in[415:412] : \n  (sel==54)? in[423:420] : \n  (sel==55)? in[431:428] : \n  (sel==56)? in[439:436] : \n "}
{"task_id": "mux9to1v", "completion": "\n\tassign out = (sel == 0)? a : \n  (sel == 1)? b : \n  (sel == 2)? c : \n  (sel == 3)? d : \n  (sel == 4)? e : \n  (sel == 5)? f : \n  (sel == 6)? g : \n  (sel == 7)? h : \n  (sel == 8)? i : \n  (sel == 9)? 1'b1 : \n  (sel == 10)? 1'b1 : \n  (sel == 11)? 1'b1 : \n  (sel == 12)? 1'b1 : \n  (sel == 13)? 1'b1 : \n  (sel == 14)? 1'b1 : \n  (sel == 15)? 1'b1 : \n  (sel == 16)? 1'b1 : \n  (sel == 17)? 1'b1 : \n  (sel == 18)? 1'b1 : \n  (sel == 19)? 1'b1 : \n  (sel == 20)? 1'b1 : \n  (sel == 21)? 1'b1 : \n  (sel == 22)? 1'b1 : \n  (sel == 23)? 1'b1 : \n  (sel == 24)? 1'b1 : \n  (sel == 25)? 1'b1 : \n  (sel == 26)? 1'b1 : \n  (sel == 27)? 1'b1 : \n  (sel == 28)? 1'b1 : \n  (sel == 29)? 1'b1 : \n  (sel == 30)? 1'b1 : \n  (sel == 31)? 1'b1 : \n  (sel == 32)? 1'b1 : \n  (sel == 33)? 1'b1 : \n  (sel == 34)? 1'b1 : \n  (sel == 35)? 1'b1 : \n  (sel == 36)? 1'b1 : \n  (sel == 37)? 1'b1 : \n  (sel == 38)? 1'b1 : \n  (sel == 39)? 1'b1 : \n  (sel == 40)? 1'b1 : \n  (sel == 41)? 1'b1 : \n  (sel == 42)? 1'b1 : \n  (sel == 43)? 1'b1 : \n  (sel == 44)? 1'b1 : \n  (sel == 45)? 1'b1 : \n  (sel == 46)? 1'b1 : \n  (sel == 47)? 1'b1 : \n  (sel == 48)? 1'b1 : \n  (sel == 49)? 1'b1 : \n  (sel == 50)? 1'b1 : \n  (sel == 51)? 1'b1 : \n  (sel == 52)? 1'b1 : \n  (sel == 53)? 1'b1 : \n  (sel == 54)? 1'b1 : \n  (sel == 55)? 1'b1 : \n  (sel == 56)? 1'b1 : \n  (sel == 57)? 1'b1 : \n  (sel == 58)? 1'b1 : \n  (sel == 59)? 1'b1 : \n "}
{"task_id": "vectorgates", "completion": "\n\tassign out_or_bitwise = |(a[2:0], b[2:0]); \n  assign out_or_logical = |(a[2:0], b[2:0]); \n  assign out_not = ~(a[2:0], b[2:0]); \n endmodule"}
{"task_id": "fsm3onehot", "completion": "\n\talways @(in or state) \n  begin \n  case (state) \n  A: next_state = A; \n  B: next_state = B; \n  C: next_state = C; \n  D: next_state = D; \n  default: next_state = 0; \n  endcase \n  case (in) \n  0: next_state = A; \n  1: next_state = B; \n  2: next_state = C; \n  3: next_state = D; \n  4: next_state = A; \n  5: next_state = B; \n  6: next_state = C; \n  7: next_state = D; \n  8: next_state = A; \n  9: next_state = B; \n  10: next_state = C; \n  11: next_state = D; \n  12: next_state = A; \n  13: next_state = B; \n  14: next_state = C; \n  15: next_state = D; \n  16: next_state = A; \n  17: next_state = B; \n  18: next_state = C; \n  19: next_state = D; \n  20: next_state = A; \n  21: next_state = B; \n  22: next_state = C; \n  23: next_state = D; \n  24: next_state = A; \n  25: next_state = B; \n  26: next_state = C; \n  27: next_state = D; \n  28: next_state = A; \n  29: next_state = B; \n  30: next_state = C; \n  31: next_state = D; \n  32: next_state = A; \n  33: next_state = B; \n  34: next_state = C; \n  35: next_state = D; \n  36: next_state = A; \n  37: next_state = B; \n  38: next_state = C; \n  39: next_state = D; \n  40: next_state = A; \n  41: next_state = B; \n  42: next_state = C; \n  43: next_state = D; \n  44: next_state = A; \n  45: next_state = B; \n  46: next_state = C; \n  47: next_state = D; \n  48: next_state = A; \n  49: next_state = B; \n  50: next_state = C; \n  51: next_state = D; \n  52: next_state = A; \n  53: next_state = B; \n  54: next_state = C; \n  55: next_state = D; \n  56: next_state = A; \n  57: next_state = B; \n  58: next_state = C; \n  59: next_state = D; \n  60: next_state = A; \n  61: next_state = B; \n  62: next_state = C; \n  63: next_state = D; \n  64: next_state = A; \n  65: next_state = B; \n  66: next_state = C; \n  67: next_state = D; \n  68: next_state = A; \n  69: next_state = B; \n  70: next"}
{"task_id": "conditional", "completion": "\n\tassign min = (a < b)? a : b;\n  assign min = (a < c)? a : c;\n  assign min = (a < d)? a : d;\n  assign min = (b < c)? b : c;\n  assign min = (b < d)? b : d;\n  assign min = (c < d)? c : d;\n  assign min = (d < a)? d : a;\n  assign min = (d < b)? d : b;\n  assign min = (d < c)? d : c;\n  assign min = (d < a)? d : a;\n  assign min = (d < b)? d : b;\n  assign min = (d < c)? d : c;\n  assign min = (d < a)? d : a;\n  assign min = (d < b)? d : b;\n  assign min = (d < c)? d : c;\n  assign min = (d < a)? d : a;\n  assign min = (d < b)? d : b;\n  assign min = (d < c)? d : c;\n  assign min = (d < a)? d : a;\n  assign min = (d < b)? d : b;\n  assign min = (d < c)? d : c;\n  assign min = (d < a)? d : a;\n  assign min = (d < b)? d : b;\n  assign min = (d < c)? d : c;\n  assign min = (d < a)? d : a;\n  assign min = (d < b)? d : b;\n  assign min = (d < c)? d : c;\n  assign min = (d < a)? d : a;\n  assign min = (d < b)? d : b;\n  assign min = (d < c)? d : c;\n  assign min = (d < a)? d : a;\n  assign min = (d < b)? d : b;\n  assign min = (d < c)? d : c;\n  assign min = (d < a)? d : a;\n  assign min = (d < b)? d : b;\n  assign min = (d < c)? d : c;\n  assign min = (d < a)? d : a;\n  assign min = (d < b)? d : b;\n  assign min = (d < c)? d : c;\n  assign min = (d < a)? d : a;\n  assign min = (d < b)? d : b;\n  assign min = (d < c)? d : c;\n  assign min = (d < a)? d : a;\n  assign min = (d < b)? d : b;\n  assign min = (d < c)? d : c;\n  assign min = (d < a)? d : a;\n  assign min = (d < b)? d : b;\n  assign min = (d < c)? d : c;\n  assign min = (d < a)? d : a;\n  assign min = (d < b)? d : b;\n  assign min = (d < c)? d : c;\n  assign min = (d < a)? d : a;\n  assign min = (d < b)? d : b;\n  assign min = (d < c)? d : c;\n  assign min = (d < a)? d : a;\n  assign min = (d < b)? d : b;\n  assign min = (d < c)? d : c;\n  assign min = (d < a)? d : a;\n  assign min = (d < b)? d : b;\n  assign min = (d < c)? d : c;\n  assign min = (d < a)? d : a;\n  assign min = (d < b)? d : b;\n  assign min = (d < c)? d : c;\n  assign min = (d < a)"}
{"task_id": "gates", "completion": "\n\tassign out_and = a & b;\n  assign out_or = a | b;\n  assign out_xor = a ^ b;\n  assign out_nand = a & ~b;\n  assign out_nor = a | ~b;\n  assign out_xnor = a ^ ~b;\n  assign out_anotb = a & ~b;\n endmodule"}
{"task_id": "kmap2", "completion": "\n\tassign out = (a & b) | (b & c) | (c & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a) | (d & b) | (d & c) | (d & d) | (d & a)"}
{"task_id": "vector4", "completion": "\n\tassign out[31:24] = in[7:0]; \n  assign out[23:16] = in[15:8]; \n  assign out[15:8] = in[7:0]; \n  assign out[7:0] = in[7:0]; \n endmodule"}
{"task_id": "m2014_q4k", "completion": "\n\tassign out = in; \n  always @(posedge clk or negedge resetn) begin \n  if (!resetn) begin \n  out <= 1'b0; \n  end else begin \n  out <= in; \n  end \n  end \n endmodule"}
{"task_id": "always_case2", "completion": "\n\talways @* \n  case (in) \n  4'b0000: pos = 2'd0; \n  4'b0001: pos = 2'd1; \n  4'b0010: pos = 2'd2; \n  4'b0011: pos = 2'd3; \n  4'b0100: pos = 2'd4; \n  4'b0101: pos = 2'd5; \n  4'b0110: pos = 2'd6; \n  4'b0111: pos = 2'd7; \n  4'b1000: pos = 2'd8; \n  4'b1001: pos = 2'd9; \n  4'b1010: pos = 2'd10; \n  4'b1011: pos = 2'd11; \n  4'b1100: pos = 2'd12; \n  4'b1101: pos = 2'd13; \n  4'b1110: pos = 2'd14; \n  4'b1111: pos = 2'd15; \n  default: pos = 2'd0; \n  endcase \n endmodule"}
{"task_id": "fsm2", "completion": "\n\tassign out = areset? 1'b0 : k == 1'b1? 1'b1 : k == 1'b0? 1'b0 : j == 1'b1? 1'b1 : j == 1'b0? 1'b0 : j == 1'b1? 1'b1 : j == 1'b0? 1'b0 : j == 1'b1? 1'b1 : j == 1'b0? 1'b0 : j == 1'b1? 1'b1 : j == 1'b0? 1'b0 : j == 1'b1? 1'b1 : j == 1'b0? 1'b0 : j == 1'b1? 1'b1 : j == 1'b0? 1'b0 : j == 1'b1? 1'b1 : j == 1'b0? 1'b0 : j == 1'b1? 1'b1 : j == 1'b0? 1'b0 : j == 1'b1? 1'b1 : j == 1'b0? 1'b0 : j == 1'b1? 1'b1 : j == 1'b0? 1'b0 : j == 1'b1? 1'b1 : j == 1'b0? 1'b0 : j == 1'b1? 1'b1 : j == 1'b0? 1'b0 : j == 1'b1? 1'b1 : j == 1'b0? 1'b0 : j == 1'b1? 1'b1 : j == 1'b0? 1'b0 : j == 1'b1? 1'b1 : j == 1'b0? 1'b0 : j == 1'b1? 1'b1 : j == 1'b0? 1'b0 : j == 1'b1? 1'b1 : j == 1'b0? 1'b0 : j == 1'b1? 1'b1 : j == 1'b0? 1'b0 : j == 1'b1? 1'b1 : j == 1'b0? 1'b0 : j == 1'b1? 1'b1 : j == 1'b0? 1'b0 : j == 1'b1? 1'b1 : j == 1'b0? 1'b0 : j == 1'b1? 1'b1 : j == 1'b0? 1'b0 : j == 1'b1? 1'b1 : j == 1'b0? 1'b0 : j == 1'b1? 1'b1 : j == 1'b0? 1'b0 : j == 1'b1? 1'b1 : j == 1'b0? 1'b0 : j == 1'b1? 1'b1 : j == 1'b0? 1'b0 : j == 1'b1? 1'b1 : j == 1'b0? 1'b0 : j == 1'b1? 1'b1 : j == 1'b0? 1'b0 : j == 1'b1? 1'b1 : j == 1'b0? 1'b0 : j == 1'b1? 1'b1 : j == 1'b0? 1'b0 : j == 1'b1? 1'b1 : j == 1'b0? 1'b0 : j == 1'b1? 1'b1 : j == 1'b0? 1'b0 : j == 1'b1? 1'b1 : j == 1'b0? 1'b0 : j == 1'b1? 1'b1 : j == 1'b0? "}
{"task_id": "m2014_q4i", "completion": "\n\tassign out = 0; \n endmodule"}
{"task_id": "step_one", "completion": "\n\tone = 1'b1; \n endmodule"}
{"task_id": "vector100r", "completion": "\n\tassign out[99] = 1'b0; \n  assign out[98] = 1'b0; \n  assign out[97] = 1'b0; \n  assign out[96] = 1'b0; \n  assign out[95] = 1'b0; \n  assign out[94] = 1'b0; \n  assign out[93] = 1'b0; \n  assign out[92] = 1'b0; \n  assign out[91] = 1'b0; \n  assign out[90] = 1'b0; \n  assign out[89] = 1'b0; \n  assign out[88] = 1'b0; \n  assign out[87] = 1'b0; \n  assign out[86] = 1'b0; \n  assign out[85] = 1'b0; \n  assign out[84] = 1'b0; \n  assign out[83] = 1'b0; \n  assign out[82] = 1'b0; \n  assign out[81] = 1'b0; \n  assign out[80] = 1'b0; \n  assign out[79] = 1'b0; \n  assign out[78] = 1'b0; \n  assign out[77] = 1'b0; \n  assign out[76] = 1'b0; \n  assign out[75] = 1'b0; \n  assign out[74] = 1'b0; \n  assign out[73] = 1'b0; \n  assign out[72] = 1'b0; \n  assign out[71] = 1'b0; \n  assign out[70] = 1'b0; \n  assign out[69] = 1'b0; \n  assign out[68] = 1'b0; \n  assign out[67] = 1'b0; \n  assign out[66] = 1'b0; \n  assign out[65] = 1'b0; \n  assign out[64] = 1'b0; \n  assign out[63] = 1'b0; \n  assign out[62] = 1'b0; \n  assign out[61] = 1'b0; \n  assign out[60] = 1'b0; \n  assign out[59] = 1'b0; \n  assign out[58] = 1'b0; \n  assign out[57] = 1'b0; \n  assign out[56] = 1'b0; \n  assign out[55] = 1'b0; \n  assign out[54] = 1'b0; \n  assign out[53] = 1'b0; \n  assign out[52] = 1'b0; \n  assign out[51] = 1'b0; \n  assign out[50] = 1'b0; \n  assign out[49] = 1'b0; \n  assign out[48] = 1'b0; \n  assign out[47] = 1'b0; \n  assign out[46] = 1'b0; \n  assign out[45] = 1'b0; \n  assign out[44] = 1'b0; \n  assign out[43] = 1'b0; \n  assign out[42] = 1'b0; \n  assign out[41] = 1'b0; \n  assign out[40] = 1'b0; \n  assign out[39] = 1'b0; \n  assign out[38] = 1'b0; \n  assign out[37] = 1'b0; \n  assign out[36] = 1'b0; \n  assign out[35] = 1'b0; \n  assign out[34] = 1'b0; \n  assign out[33] = 1'b0; \n  assign out[32] = 1'b0; \n  assign out[31] = 1'b0; \n  assign out[30] = 1'b0; \n  assign out[29] = 1'b0"}
{"task_id": "m2014_q4d", "completion": "\n\talways @(posedge clk) begin \n  out = in ^ in; \n  end \n endmodule"}
{"task_id": "shift4", "completion": "\n\talways @(posedge clk or negedge areset) \n  if (!areset) \n  q <= 4'b0000; \n  else if (load) \n  q <= {data[3:0], 1'b0}; \n  else if (ena) \n  q <= 4'b0000; \n endmodule"}
{"task_id": "truthtable1", "completion": "\n\tassign f = (x3 & x2 & x1) | (x3 & x2 & x1 & x1) | (x3 & x2 & x1 & x2) | (x3 & x2 & x1 & x3) | (x3 & x2 & x1 & x4) | (x3 & x2 & x1 & x5) | (x3 & x2 & x1 & x6) | (x3 & x2 & x1 & x7) | (x3 & x2 & x1 & x8) | (x3 & x2 & x1 & x9) | (x3 & x2 & x1 & x10) | (x3 & x2 & x1 & x11) | (x3 & x2 & x1 & x12) | (x3 & x2 & x1 & x13) | (x3 & x2 & x1 & x14) | (x3 & x2 & x1 & x15) | (x3 & x2 & x1 & x16) | (x3 & x2 & x1 & x17) | (x3 & x2 & x1 & x18) | (x3 & x2 & x1 & x19) | (x3 & x2 & x1 & x20) | (x3 & x2 & x1 & x21) | (x3 & x2 & x1 & x22) | (x3 & x2 & x1 & x23) | (x3 & x2 & x1 & x24) | (x3 & x2 & x1 & x25) | (x3 & x2 & x1 & x26) | (x3 & x2 & x1 & x27) | (x3 & x2 & x1 & x28) | (x3 & x2 & x1 & x29) | (x3 & x2 & x1 & x30) | (x3 & x2 & x1 & x31) | (x3 & x2 & x1 & x32) | (x3 & x2 & x1 & x33) | (x3 & x2 & x1 & x34) | (x3 & x2 & x1 & x35) | (x3 & x2 & x1 & x36) | (x3 & x2 & x1 & x37) | (x3 & x2 & x1 & x38) | (x3 & x2 & x1 & x39) | (x3 & x2 & x1 & x40) | (x3 & x2 & x1 & x41) | (x3 & x2 & x1 & x42) | (x3 & x2 & x1 & x43) | (x3 & x2 & x1 & x44) | (x3 & x2 & x1 & x45) | (x3 & x2 & x1 & x46) | (x3 & x2 & x1 & x47) | (x3 & x2 & x1 & x48) | (x3 & x2 & x1 & x49) | (x3 & x2 & x1 & x50) | (x3 & x2 & x1 & x51) | (x3 & x2 & x1 & x52) | (x3 & x2 & x1 & x53) | (x3 & x2 & x1 & x54) | (x3 & x2 & x1 & x55) | (x3 & x2 & x1 & x56) | (x3 & x2 & x1 & x57) | ("}
{"task_id": "dff8ar", "completion": "\n\talways @(posedge clk) begin \n  if (areset) begin \n  q <= 8'd0; \n  end else begin \n  q <= d; \n  end \n  end \n endmodule"}
{"task_id": "gates100", "completion": "\n\tassign out_and = in[99] & in[98] & in[97] & in[96] & in[95] & in[94] & in[93] & in[92] & in[91] & in[90] & in[89] & in[88] & in[87] & in[86] & in[85] & in[84] & in[83] & in[82] & in[81] & in[80] & in[79] & in[78] & in[77] & in[76] & in[75] & in[74] & in[73] & in[72] & in[71] & in[70] & in[69] & in[68] & in[67] & in[66] & in[65] & in[64] & in[63] & in[62] & in[61] & in[60] & in[59] & in[58] & in[57] & in[56] & in[55] & in[54] & in[53] & in[52] & in[51] & in[50] & in[49] & in[48] & in[47] & in[46] & in[45] & in[44] & in[43] & in[42] & in[41] & in[40] & in[39] & in[38] & in[37] & in[36] & in[35] & in[34] & in[33] & in[32] & in[31] & in[30] & in[29] & in[28] & in[27] & in[26] & in[25] & in[24] & in[23] & in[22] & in[21] & in[20] & in[19] & in[18] & in[17] & in[16] & in[15] & in[14] & in[13] & in[12] & in[11] & in[10] & in[9] & in[8] & in[7] & in[6] & in[5] & in[4] & in[3] & in[2] & in[1] & in[0] );\n  assign out_or = in[99] | in[98] | in[97] | in[96] | in[95] | in[94] | in[93] | in[92] | in[91] | in[90] | in[89] | in[88] | in[87] | in[86] | in[85] | in[84] | in[83] | in[82] | in[81] | in[80] | in[79] | in[78] | in[77] | in[76] | in[75] | in[74] | in[73] | in[72] | in[71] | in[70] | in[69] | in[68] | in[67] | in[66] | in[65] | in[64] | in[63] | in[62] | in[61] | in[60] | in[59] | in[58] | in[57] | in[56] | in[55] | in[54] | in[53] | in[52] | in[51] | in[50] | in[49] | in[48] | in[47] | in[46] | in[45] | in[44] | in[43] | in[42] | in[41] | in[40] | in[39] | in[38] | in[37] | in[36] | in[35] | in[34] | in[33] | in[32] | in[31] | in[30] | in["}
{"task_id": "hadd", "completion": "\n\tassign sum = a + b; \n  assign cout = a ^ b; \n endmodule"}
{"task_id": "always_if2", "completion": "\n\tassign shut_off_computer = cpu_overheated; \n  assign keep_driving = ~gas_tank_empty; \n endmodule"}
{"task_id": "fsm2s", "completion": "\n\tassign out = (reset == 1'b1)? 1'b0 : (k == 1'b1)? 1'b1 : (k == 1'b0)? 1'b0 : (j == 1'b1)? 1'b1 : (j == 1'b0)? 1'b0 : 1'b0); \n endmodule"}
{"task_id": "vector3", "completion": "\n\twire [4:0] a_wire;\n  wire [4:0] b_wire;\n  wire [4:0] c_wire;\n  wire [4:0] d_wire;\n  wire [4:0] e_wire;\n  wire [4:0] f_wire;\n  wire [7:0] w_wire;\n  wire [7:0] x_wire;\n  wire [7:0] y_wire;\n  wire [7:0] z_wire;\n  assign a_wire = a; \n  assign b_wire = b; \n  assign c_wire = c; \n  assign d_wire = d; \n  assign e_wire = e; \n  assign f_wire = f; \n  assign w_wire = {a_wire, b_wire, c_wire, d_wire, e_wire, f_wire}; \n  assign x_wire = {a_wire, b_wire, c_wire, d_wire, e_wire, f_wire}; \n  assign y_wire = {a_wire, b_wire, c_wire, d_wire, e_wire, f_wire}; \n  assign z_wire = {a_wire, b_wire, c_wire, d_wire, e_wire, f_wire}; \n endmodule"}
{"task_id": "andgate", "completion": "\n\tassign out = a & b; \n endmodule"}
{"task_id": "fsm1s", "completion": "\n\tassign out = in; \n  always @(posedge clk or negedge reset) \n  begin \n  if (!reset) \n  out = B; \n  else \n  out = A; \n  end \n  reg B = 1'b0; \n  reg A = 1'b0; \n  always @(posedge clk or negedge reset) \n  begin \n  if (!reset) \n  B = 1'b0; \n  else \n  B = B + 1'b1; \n  end \n endmodule"}
{"task_id": "fadd", "completion": "\n\tassign sum = a + b + cin; \n endmodule"}
{"task_id": "m2014_q4g", "completion": "\n\tassign out = in1 ^ in2 ^ in3; \n endmodule"}
{"task_id": "ece241_2014_q5b", "completion": "\n\twire [1:0] w; \n  wire [1:0] w2; \n  wire [1:0] w3; \n  wire [1:0] w4; \n  wire [1:0] w5; \n  wire [1:0] w6; \n  wire [1:0] w7; \n  wire [1:0] w8; \n  wire [1:0] w9; \n  wire [1:0] w10; \n  wire [1:0] w11; \n  wire [1:0] w12; \n  wire [1:0] w13; \n  wire [1:0] w14; \n  wire [1:0] w15; \n  wire [1:0] w16; \n  wire [1:0] w17; \n  wire [1:0] w18; \n  wire [1:0] w19; \n  wire [1:0] w20; \n  wire [1:0] w21; \n  wire [1:0] w22; \n  wire [1:0] w23; \n  wire [1:0] w24; \n  wire [1:0] w25; \n  wire [1:0] w26; \n  wire [1:0] w27; \n  wire [1:0] w28; \n  wire [1:0] w29; \n  wire [1:0] w30; \n  wire [1:0] w31; \n  wire [1:0] w32; \n  wire [1:0] w33; \n  wire [1:0] w34; \n  wire [1:0] w35; \n  wire [1:0] w36; \n  wire [1:0] w37; \n  wire [1:0] w38; \n  wire [1:0] w39; \n  wire [1:0] w40; \n  wire [1:0] w41; \n  wire [1:0] w42; \n  wire [1:0] w43; \n  wire [1:0] w44; \n  wire [1:0] w45; \n  wire [1:0] w46; \n  wire [1:0] w47; \n  wire [1:0] w48; \n  wire [1:0] w49; \n  wire [1:0] w50; \n  wire [1:0] w51; \n  wire [1:0] w52; \n  wire [1:0] w53; \n  wire [1:0] w54; \n  wire [1:0] w55; \n  wire [1:0] w56; \n  wire [1:0] w57; \n  wire [1:0] w58; \n  wire [1:0] w59; \n  wire [1:0] w60; \n  wire [1:0] w61; \n  wire [1:0] w62; \n  wire [1:0] w63; \n  wire [1:0] w64; \n  wire [1:0] w65; \n  wire [1:0] w66; \n  wire [1:0] w67; \n  wire [1:0] w68; \n  wire [1:0] w69; \n  wire [1:0] w70; \n  wire [1:0] w71; \n  wire [1:0] w72; \n  wire [1:0] w73; \n  wire [1:0] w74; \n  wire [1:0] w75; \n  wire [1:0] w76; \n  wire [1:0] w77; \n  wire [1"}
{"task_id": "2012_q1g", "completion": "\n\tassign f = (x[1] & x[2]) | (x[3] & x[4]); \n endmodule"}
{"task_id": "countbcd", "completion": "\n\talways @(posedge clk or negedge reset) \n  if (!reset) \n  q <= 16'd0; \n  else \n  q <= {q[3:0], q[7:4], q[11:8], q[13:12], q[15:14]}; \n endmodule"}
